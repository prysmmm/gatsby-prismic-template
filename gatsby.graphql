"""
Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = []
) on OBJECT

"""Add date formatting options."""
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

"""Do not infer field types from field values."""
directive @dontInfer on OBJECT

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer on OBJECT

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

input AVIFOptions {
  lossless: Boolean
  quality: Int
  speed: Int
}

input BlurredOptions {
  """
  Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat

  """Width of the generated low-res preview. Default is 20px"""
  width: Int
}

input BooleanQueryOperatorInput {
  eq: Boolean
  in: [Boolean]
  ne: Boolean
  nin: [Boolean]
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateQueryOperatorInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

type Directory implements Node {
  absolutePath: String!
  accessTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  changeTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  children: [Node!]!
  ctime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type DirectoryConnection {
  distinct(field: DirectoryFieldsEnum!): [String!]!
  edges: [DirectoryEdge!]!
  group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldsEnum!): Float
  totalCount: Int!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  absolutePath
  accessTime
  atime
  atimeMs
  base
  birthTime
  birthtime
  birthtimeMs
  changeTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ctime
  ctimeMs
  dev
  dir
  ext
  extension
  gid
  id
  ino
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mode
  modifiedTime
  mtime
  mtimeMs
  name
  nlink
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prettySize
  rdev
  relativeDirectory
  relativePath
  root
  size
  sourceInstanceName
  uid
}

input DirectoryFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type DirectoryGroupConnection {
  distinct(field: DirectoryFieldsEnum!): [String!]!
  edges: [DirectoryEdge!]!
  field: String!
  fieldValue: String
  group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldsEnum!): Float
  totalCount: Int!
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
  highlight: String!
  opacity: Int
  shadow: String!
}

type File implements Node {
  absolutePath: String!
  accessTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  changeTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!

  """
  Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  """
  childImageSharp: ImageSharp
  children: [Node!]!

  """Returns all children nodes filtered by type ImageSharp"""
  childrenImageSharp: [ImageSharp]
  ctime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!

  """Copy file to static directory and return public url to it"""
  publicURL: String
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type FileConnection {
  distinct(field: FileFieldsEnum!): [String!]!
  edges: [FileEdge!]!
  group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldsEnum!): Float
  totalCount: Int!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

enum FileFieldsEnum {
  absolutePath
  accessTime
  atime
  atimeMs
  base
  birthTime
  birthtime
  birthtimeMs
  blksize
  blocks
  changeTime
  childImageSharp___children
  childImageSharp___children___children
  childImageSharp___children___children___children
  childImageSharp___children___children___id
  childImageSharp___children___id
  childImageSharp___children___internal___content
  childImageSharp___children___internal___contentDigest
  childImageSharp___children___internal___contentFilePath
  childImageSharp___children___internal___description
  childImageSharp___children___internal___fieldOwners
  childImageSharp___children___internal___ignoreType
  childImageSharp___children___internal___mediaType
  childImageSharp___children___internal___owner
  childImageSharp___children___internal___type
  childImageSharp___children___parent___children
  childImageSharp___children___parent___id
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id
  childImageSharp___internal___content
  childImageSharp___internal___contentDigest
  childImageSharp___internal___contentFilePath
  childImageSharp___internal___description
  childImageSharp___internal___fieldOwners
  childImageSharp___internal___ignoreType
  childImageSharp___internal___mediaType
  childImageSharp___internal___owner
  childImageSharp___internal___type
  childImageSharp___original___height
  childImageSharp___original___src
  childImageSharp___original___width
  childImageSharp___parent___children
  childImageSharp___parent___children___children
  childImageSharp___parent___children___id
  childImageSharp___parent___id
  childImageSharp___parent___internal___content
  childImageSharp___parent___internal___contentDigest
  childImageSharp___parent___internal___contentFilePath
  childImageSharp___parent___internal___description
  childImageSharp___parent___internal___fieldOwners
  childImageSharp___parent___internal___ignoreType
  childImageSharp___parent___internal___mediaType
  childImageSharp___parent___internal___owner
  childImageSharp___parent___internal___type
  childImageSharp___parent___parent___children
  childImageSharp___parent___parent___id
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children
  childrenImageSharp
  childrenImageSharp___children
  childrenImageSharp___children___children
  childrenImageSharp___children___children___children
  childrenImageSharp___children___children___id
  childrenImageSharp___children___id
  childrenImageSharp___children___internal___content
  childrenImageSharp___children___internal___contentDigest
  childrenImageSharp___children___internal___contentFilePath
  childrenImageSharp___children___internal___description
  childrenImageSharp___children___internal___fieldOwners
  childrenImageSharp___children___internal___ignoreType
  childrenImageSharp___children___internal___mediaType
  childrenImageSharp___children___internal___owner
  childrenImageSharp___children___internal___type
  childrenImageSharp___children___parent___children
  childrenImageSharp___children___parent___id
  childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___id
  childrenImageSharp___internal___content
  childrenImageSharp___internal___contentDigest
  childrenImageSharp___internal___contentFilePath
  childrenImageSharp___internal___description
  childrenImageSharp___internal___fieldOwners
  childrenImageSharp___internal___ignoreType
  childrenImageSharp___internal___mediaType
  childrenImageSharp___internal___owner
  childrenImageSharp___internal___type
  childrenImageSharp___original___height
  childrenImageSharp___original___src
  childrenImageSharp___original___width
  childrenImageSharp___parent___children
  childrenImageSharp___parent___children___children
  childrenImageSharp___parent___children___id
  childrenImageSharp___parent___id
  childrenImageSharp___parent___internal___content
  childrenImageSharp___parent___internal___contentDigest
  childrenImageSharp___parent___internal___contentFilePath
  childrenImageSharp___parent___internal___description
  childrenImageSharp___parent___internal___fieldOwners
  childrenImageSharp___parent___internal___ignoreType
  childrenImageSharp___parent___internal___mediaType
  childrenImageSharp___parent___internal___owner
  childrenImageSharp___parent___internal___type
  childrenImageSharp___parent___parent___children
  childrenImageSharp___parent___parent___id
  childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ctime
  ctimeMs
  dev
  dir
  ext
  extension
  gid
  id
  ino
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mode
  modifiedTime
  mtime
  mtimeMs
  name
  nlink
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prettySize
  publicURL
  rdev
  relativeDirectory
  relativePath
  root
  size
  sourceInstanceName
  uid
}

input FileFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  childImageSharp: ImageSharpFilterInput
  children: NodeFilterListInput
  childrenImageSharp: ImageSharpFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type FileGroupConnection {
  distinct(field: FileFieldsEnum!): [String!]!
  edges: [FileEdge!]!
  field: String!
  fieldValue: String
  group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldsEnum!): Float
  totalCount: Int!
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nin: [Float]
}

scalar GatsbyImageData

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  in: [GatsbyImageData]
  ne: GatsbyImageData
  nin: [GatsbyImageData]
}

enum GatsbyImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum GatsbyImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum GatsbyImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

input IDQueryOperatorInput {
  eq: ID
  in: [ID]
  ne: ID
  nin: [ID]
}

enum ImageCropFocus {
  ATTENTION
  CENTER
  EAST
  ENTROPY
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
  WEST
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
  INSIDE
  OUTSIDE
}

enum ImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum ImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum ImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

type ImageSharp implements Node {
  children: [Node!]!
  fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpFixed
  fluid(
    background: String = "rgba(0,0,0,1)"
    base64Width: Int
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient
    fit: ImageFit = COVER
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    jpegQuality: Int
    maxHeight: Int
    maxWidth: Int
    pngCompressionSpeed: Int = 4
    pngQuality: Int
    quality: Int
    rotate: Int = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    traceSVG: Potrace
    trim: Float = 0
    webpQuality: Int
  ): ImageSharpFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """
    The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int
  ): GatsbyImageData!
  id: ID!
  internal: Internal!
  original: ImageSharpOriginal
  parent: Node
  resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  edges: [ImageSharpEdge!]!
  group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldsEnum!): Float
  totalCount: Int!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  original___height
  original___src
  original___width
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

input ImageSharpFilterInput {
  children: NodeFilterListInput
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  original: ImageSharpOriginalFilterInput
  parent: NodeFilterInput
  resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

type ImageSharpFixed {
  aspectRatio: Float
  base64: String
  height: Float!
  originalName: String
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float!
}

input ImageSharpFixedFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

type ImageSharpFluid {
  aspectRatio: Float!
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int!
  presentationWidth: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

input ImageSharpFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

type ImageSharpGroupConnection {
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  edges: [ImageSharpEdge!]!
  field: String!
  fieldValue: String
  group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldsEnum!): Float
  totalCount: Int!
}

type ImageSharpOriginal {
  height: Float
  src: String
  width: Float
}

input ImageSharpOriginalFilterInput {
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

type ImageSharpResize {
  aspectRatio: Float
  height: Int
  originalName: String
  src: String
  tracedSVG: String
  width: Int
}

input ImageSharpResizeFilterInput {
  aspectRatio: FloatQueryOperatorInput
  height: IntQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ImgixFixed {
  base64: String!
  height: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String!
  srcWebp: String!
  width: Int!
}

input ImgixFixedFilterInput {
  base64: StringQueryOperatorInput
  height: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

type ImgixFluid {
  aspectRatio: Float!
  base64: String!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String!
  srcWebp: String!
}

input ImgixFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
}

input ImgixParamsInput {
  """Alias for `pdfAnnotation`."""
  annotation: Boolean

  """
  Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar).
  """
  ar: String

  """
  Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto).
  """
  auto: String

  """Alias for `blend`."""
  b: String

  """Alias for `blendAlign`."""
  ba: String

  """Alias for `blendAlpha`."""
  balph: Int

  """Alias for `blendCrop`."""
  bc: String

  """Alias for `blendFit`."""
  bf: String

  """
  Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg).
  """
  bg: String

  """Alias for `blendH`."""
  bh: Float

  """
  Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend).
  """
  blend: String

  """
  Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align).
  """
  blendAlign: String

  """
  Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha).
  """
  blendAlpha: Int

  """Alias for `blendColor`."""
  blendClr: String

  """
  Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color).
  """
  blendColor: String

  """
  Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop).
  """
  blendCrop: String

  """
  Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit).
  """
  blendFit: String

  """
  Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h).
  """
  blendH: Float

  """
  Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode).
  """
  blendMode: String

  """
  Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad).
  """
  blendPad: Int

  """
  Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size).
  """
  blendSize: String

  """
  Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w).
  """
  blendW: Float

  """
  Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x).
  """
  blendX: Int

  """
  Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y).
  """
  blendY: Int

  """Alias for `blendAlign`."""
  blendalign: String

  """Alias for `blendAlpha`."""
  blendalpha: Int

  """Alias for `blendColor`."""
  blendclr: String

  """Alias for `blendColor`."""
  blendcolor: String

  """Alias for `blendCrop`."""
  blendcrop: String

  """Alias for `blendFit`."""
  blendfit: String

  """Alias for `blendH`."""
  blendh: Float

  """Alias for `blendMode`."""
  blendmode: String

  """Alias for `blendPad`."""
  blendpad: Int

  """Alias for `blendSize`."""
  blendsize: String

  """Alias for `blendW`."""
  blendw: Float

  """Alias for `blendX`."""
  blendx: Int

  """Alias for `blendY`."""
  blendy: Int

  """
  Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur).
  """
  blur: Int

  """Alias for `blendMode`."""
  bm: String

  """
  Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border).
  """
  border: String

  """
  Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom).
  """
  borderBottom: Int

  """
  Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left).
  """
  borderLeft: Int

  """
  Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius).
  """
  borderRadius: String

  """
  Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner).
  """
  borderRadiusInner: String

  """
  Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right).
  """
  borderRight: Int

  """
  Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top).
  """
  borderTop: Int

  """Alias for `blendPad`."""
  bp: Int

  """
  Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri).
  """
  bri: Int

  """Alias for `blendSize`."""
  bs: String

  """Alias for `blendW`."""
  bw: Float

  """Alias for `blendX`."""
  bx: Int

  """Alias for `blendY`."""
  by: Int

  """
  Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch).
  """
  ch: String

  """
  Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub).
  """
  chromasub: Int

  """
  Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant).
  """
  colorquant: Int

  """
  Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors).
  """
  colors: Int

  """
  Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con).
  """
  con: Int

  """
  Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius).
  """
  cornerRadius: String

  """
  Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop).
  """
  crop: String

  """
  Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs).
  """
  cs: String

  """
  Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl).
  """
  dl: String

  """
  Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi).
  """
  dpi: Int

  """
  Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr).
  """
  dpr: Float

  """
  Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone).
  """
  duotone: String

  """
  Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha).
  """
  duotoneAlpha: Int

  """
  Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp).
  """
  exp: Int

  """
  A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires).
  """
  expires: String

  """Alias for `fit`."""
  f: String

  """
  Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex).
  """
  faceindex: Int

  """
  Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad).
  """
  facepad: Float

  """
  Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces).
  """
  faces: Int

  """
  Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill).
  """
  fill: String

  """
  Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color).
  """
  fillColor: String

  """Alias for `fillColor`."""
  fillcolor: String

  """
  Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit).
  """
  fit: String

  """
  Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip).
  """
  flip: String

  """
  Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm).
  """
  fm: String

  """
  Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug).
  """
  fpDebug: Boolean

  """
  Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x).
  """
  fpX: Float

  """
  Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y).
  """
  fpY: Float

  """
  Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z).
  """
  fpZ: Float

  """
  Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam).
  """
  gam: Int

  """Sets grid colors for the transparency checkerboard grid."""
  gridColors: String

  """Sets grid size for the transparency checkerboard grid."""
  gridSize: Int

  """
  Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h).
  """
  h: Float

  """Alias for `h`."""
  height: Float

  """
  Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high).
  """
  high: Int

  """
  Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn).
  """
  htn: Int

  """
  Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue).
  """
  hue: Int

  """Alias for `invert`."""
  inv: Boolean

  """
  Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert).
  """
  invert: Boolean

  """Determine if IPTC data should be passed for JPEG images."""
  iptc: String

  """
  Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless).
  """
  lossless: Boolean

  """Alias for `mark`."""
  m: String

  """Alias for `markAlign`."""
  ma: String

  """Alias for `markAlpha`."""
  malph: Int

  """
  Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark).
  """
  mark: String

  """
  Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align).
  """
  markAlign: String

  """
  Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha).
  """
  markAlpha: Int

  """
  Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base).
  """
  markBase: String

  """
  Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit).
  """
  markFit: String

  """
  Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h).
  """
  markH: Float

  """
  Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad).
  """
  markPad: Int

  """
  Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot).
  """
  markRot: Float

  """
  Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale).
  """
  markScale: Int

  """
  Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile).
  """
  markTile: String

  """
  Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w).
  """
  markW: Float

  """
  Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x).
  """
  markX: Int

  """
  Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y).
  """
  markY: Int

  """Alias for `markAlign`."""
  markalign: String

  """Alias for `markAlpha`."""
  markalpha: Int

  """Alias for `markBase`."""
  markbase: String

  """Alias for `markFit`."""
  markfit: String

  """Alias for `markH`."""
  markh: Float

  """Alias for `markPad`."""
  markpad: Int

  """Alias for `markScale`."""
  markscale: Int

  """Alias for `markTile`."""
  marktile: String

  """Alias for `markW`."""
  markw: Float

  """Alias for `markX`."""
  markx: Int

  """Alias for `markY`."""
  marky: Int

  """
  Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask).
  """
  mask: String

  """
  Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg).
  """
  maskBg: String

  """Alias for `maskBg`."""
  maskbg: String

  """
  Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height).
  """
  maxH: Int

  """Alias for `maxH`."""
  maxHeight: Int

  """
  Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width).
  """
  maxW: Int

  """Alias for `maxW`."""
  maxWidth: Int

  """Alias for `markBase`."""
  mb: String

  """Alias for `markFit`."""
  mf: String

  """Alias for `markH`."""
  mh: Float

  """
  Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height).
  """
  minH: Int

  """Alias for `minH`."""
  minHeight: Int

  """
  Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width).
  """
  minW: Int

  """Alias for `minW`."""
  minWidth: Int

  """Alias for `monochrome`."""
  mono: String

  """
  Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome).
  """
  monochrome: String

  """Alias for `markPad`."""
  mp: Int

  """Alias for `markScale`."""
  ms: Int

  """Alias for `markTile`."""
  mtile: String

  """Alias for `markW`."""
  mw: Float

  """Alias for `markX`."""
  mx: Int

  """Alias for `markY`."""
  my: Int

  """
  Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr).
  """
  nr: Int

  """
  Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs).
  """
  nrs: Int

  """Alias for `orient`."""
  or: Int

  """
  Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient).
  """
  orient: Int

  """
  Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad).
  """
  pad: Int

  """
  Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom).
  """
  padBottom: Int

  """
  Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left).
  """
  padLeft: Int

  """
  Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right).
  """
  padRight: Int

  """
  Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top).
  """
  padTop: Int

  """
  Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page).
  """
  page: Int

  """
  Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette).
  """
  palette: String

  """
  Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation).
  """
  pdfAnnotation: Boolean

  """
  Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix).
  """
  prefix: String

  """
  Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px).
  """
  px: Int

  """
  Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q).
  """
  q: Int

  """
  Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect).
  """
  rect: String

  """
  Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot).
  """
  rot: Float

  """
  Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat).
  """
  sat: Int

  """
  Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia).
  """
  sepia: Int

  """
  Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad).
  """
  shad: Float

  """
  Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp).
  """
  sharp: Float

  """Alias for `txt`."""
  t: String

  """Alias for `txtAlign`."""
  ta: String

  """Alias for `txtColor`."""
  tc: String

  """Alias for `txtClip`."""
  tcl: String

  """Alias for `txtFont`."""
  tf: String

  """Alias for `txtLine`."""
  tl: Int

  """Alias for `txtPad`."""
  tp: Int

  """
  Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency).
  """
  transparency: String

  """
  Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim).
  """
  trim: String

  """
  Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color).
  """
  trimColor: String

  """
  Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md).
  """
  trimMd: Float

  """
  Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad).
  """
  trimPad: Int

  """
  Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd).
  """
  trimSd: Float

  """
  Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol).
  """
  trimTol: Float

  """Alias for `trimColor`."""
  trimcolor: String

  """Alias for `trimMd`."""
  trimmd: Float

  """Alias for `trimPad`."""
  trimpad: Int

  """Alias for `trimSd`."""
  trimsd: Float

  """Alias for `trimTol`."""
  trimtol: Float

  """Alias for `txtShad`."""
  tsh: Float

  """Alias for `txtSize`."""
  tsz: Int

  """Alias for `txtTrack`."""
  tt: Int

  """
  Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt).
  """
  txt: String

  """
  Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align).
  """
  txtAlign: String

  """
  Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip).
  """
  txtClip: String

  """Alias for `txtColor`."""
  txtClr: String

  """
  Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color).
  """
  txtColor: String

  """
  Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit).
  """
  txtFit: String

  """
  Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font).
  """
  txtFont: String

  """
  Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead).
  """
  txtLead: Int

  """
  Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig).
  """
  txtLig: Int

  """
  Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line).
  """
  txtLine: Int

  """Alias for `txtLineColor`."""
  txtLineClr: String

  """
  Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color).
  """
  txtLineColor: String

  """
  Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad).
  """
  txtPad: Int

  """
  Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad).
  """
  txtShad: Float

  """
  Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size).
  """
  txtSize: Int

  """
  Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track).
  """
  txtTrack: Int

  """
  Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width).
  """
  txtWidth: Int

  """
  Sets the horizontal (x) position of the text in pixels relative to the left edge of the base image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-x).
  """
  txtX: Int

  """
  Sets the vertical (y) position of the text in pixels relative to the top edge of the base image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-y).
  """
  txtY: Int

  """Alias for `txtAlign`."""
  txtalign: String

  """Alias for `txtClip`."""
  txtclip: String

  """Alias for `txtColor`."""
  txtclr: String

  """Alias for `txtColor`."""
  txtcolor: String

  """Alias for `txtFit`."""
  txtfit: String

  """Alias for `txtFont`."""
  txtfont: String

  """Alias for `txtLead`."""
  txtlead: Int

  """Alias for `txtLig`."""
  txtlig: Int

  """Alias for `txtLine`."""
  txtline: Int

  """Alias for `txtLineColor`."""
  txtlineclr: String

  """Alias for `txtLineColor`."""
  txtlinecolor: String

  """Alias for `txtPad`."""
  txtpad: Int

  """Alias for `txtShad`."""
  txtshad: Float

  """Alias for `txtSize`."""
  txtsize: Int

  """Alias for `txtTrack`."""
  txttrack: Int

  """Alias for `txtWidth`."""
  txtwidth: Int

  """Alias for `txtX`."""
  txtx: Int

  """Alias for `txtY`."""
  txty: Int

  """
  Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm).
  """
  usm: Int

  """
  Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad).
  """
  usmrad: Float

  """
  Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib).
  """
  vib: Int

  """
  Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w).
  """
  w: Float

  """Alias for `w`."""
  width: Float
}

enum ImgixPlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
}

input IntQueryOperatorInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nin: [Int]
}

type Internal {
  content: String
  contentDigest: String!
  contentFilePath: String
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  contentFilePath: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input JPGOptions {
  progressive: Boolean = true
  quality: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONQueryOperatorInput {
  eq: JSON
  glob: JSON
  in: [JSON]
  ne: JSON
  nin: [JSON]
  regex: JSON
}

"""Node Interface"""
interface Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

input NodeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input PNGOptions {
  compressionSpeed: Int = 4
  quality: Int
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input Potrace {
  alphaMax: Float
  background: String
  blackOnWhite: Boolean
  color: String
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  turdSize: Float
  turnPolicy: PotraceTurnPolicy
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_LEFT
  TURNPOLICY_MAJORITY
  TURNPOLICY_MINORITY
  TURNPOLICY_RIGHT
  TURNPOLICY_WHITE
}

type PrismicAboutPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicAboutPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicAboutPageConnection {
  distinct(field: PrismicAboutPageFieldsEnum!): [String!]!
  edges: [PrismicAboutPageEdge!]!
  group(field: PrismicAboutPageFieldsEnum!, limit: Int, skip: Int): [PrismicAboutPageGroupConnection!]!
  max(field: PrismicAboutPageFieldsEnum!): Float
  min(field: PrismicAboutPageFieldsEnum!): Float
  nodes: [PrismicAboutPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicAboutPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicAboutPageDataHeroImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicAboutPageDataHeroImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicAboutPageDataMissionImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicAboutPageDataMissionImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicAboutPageDataType {
  hero_button: String
  hero_image: PrismicAboutPageDataHeroImageImageType
  hero_text: PrismicStructuredTextType
  hero_title: PrismicStructuredTextType
  mission_image: PrismicAboutPageDataMissionImageImageType
  mission_left: PrismicStructuredTextType
  mission_right: PrismicStructuredTextType
  mission_title: PrismicStructuredTextType
  seo_description: String
  seo_title: String
  title: String
  values: [PrismicAboutPageDataValues]
  values_text: PrismicStructuredTextType
  values_title: PrismicStructuredTextType
}

input PrismicAboutPageDataTypeFilterInput {
  hero_button: StringQueryOperatorInput
  hero_image: PrismicAboutPageDataHeroImageImageTypeFilterInput
  hero_text: PrismicStructuredTextTypeFilterInput
  hero_title: PrismicStructuredTextTypeFilterInput
  mission_image: PrismicAboutPageDataMissionImageImageTypeFilterInput
  mission_left: PrismicStructuredTextTypeFilterInput
  mission_right: PrismicStructuredTextTypeFilterInput
  mission_title: PrismicStructuredTextTypeFilterInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  title: StringQueryOperatorInput
  values: PrismicAboutPageDataValuesFilterListInput
  values_text: PrismicStructuredTextTypeFilterInput
  values_title: PrismicStructuredTextTypeFilterInput
}

type PrismicAboutPageDataValues {
  content: PrismicStructuredTextType
  icon: String
  icon_color: String
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

input PrismicAboutPageDataValuesFilterInput {
  content: PrismicStructuredTextTypeFilterInput
  icon: StringQueryOperatorInput
  icon_color: StringQueryOperatorInput
  text: PrismicStructuredTextTypeFilterInput
  title: PrismicStructuredTextTypeFilterInput
}

input PrismicAboutPageDataValuesFilterListInput {
  elemMatch: PrismicAboutPageDataValuesFilterInput
}

type PrismicAboutPageEdge {
  next: PrismicAboutPage
  node: PrismicAboutPage!
  previous: PrismicAboutPage
}

enum PrismicAboutPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___hero_button
  data___hero_image___alt
  data___hero_image___copyright
  data___hero_image___dimensions___height
  data___hero_image___dimensions___width
  data___hero_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___localFile___absolutePath
  data___hero_image___localFile___accessTime
  data___hero_image___localFile___atime
  data___hero_image___localFile___atimeMs
  data___hero_image___localFile___base
  data___hero_image___localFile___birthTime
  data___hero_image___localFile___birthtime
  data___hero_image___localFile___birthtimeMs
  data___hero_image___localFile___blksize
  data___hero_image___localFile___blocks
  data___hero_image___localFile___changeTime
  data___hero_image___localFile___children
  data___hero_image___localFile___childrenImageSharp
  data___hero_image___localFile___ctime
  data___hero_image___localFile___ctimeMs
  data___hero_image___localFile___dev
  data___hero_image___localFile___dir
  data___hero_image___localFile___ext
  data___hero_image___localFile___extension
  data___hero_image___localFile___gid
  data___hero_image___localFile___id
  data___hero_image___localFile___ino
  data___hero_image___localFile___mode
  data___hero_image___localFile___modifiedTime
  data___hero_image___localFile___mtime
  data___hero_image___localFile___mtimeMs
  data___hero_image___localFile___name
  data___hero_image___localFile___nlink
  data___hero_image___localFile___prettySize
  data___hero_image___localFile___publicURL
  data___hero_image___localFile___rdev
  data___hero_image___localFile___relativeDirectory
  data___hero_image___localFile___relativePath
  data___hero_image___localFile___root
  data___hero_image___localFile___size
  data___hero_image___localFile___sourceInstanceName
  data___hero_image___localFile___uid
  data___hero_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_text___html
  data___hero_text___raw
  data___hero_text___richText
  data___hero_text___text
  data___hero_title___html
  data___hero_title___raw
  data___hero_title___richText
  data___hero_title___text
  data___mission_image___alt
  data___mission_image___copyright
  data___mission_image___dimensions___height
  data___mission_image___dimensions___width
  data___mission_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_image___localFile___absolutePath
  data___mission_image___localFile___accessTime
  data___mission_image___localFile___atime
  data___mission_image___localFile___atimeMs
  data___mission_image___localFile___base
  data___mission_image___localFile___birthTime
  data___mission_image___localFile___birthtime
  data___mission_image___localFile___birthtimeMs
  data___mission_image___localFile___blksize
  data___mission_image___localFile___blocks
  data___mission_image___localFile___changeTime
  data___mission_image___localFile___children
  data___mission_image___localFile___childrenImageSharp
  data___mission_image___localFile___ctime
  data___mission_image___localFile___ctimeMs
  data___mission_image___localFile___dev
  data___mission_image___localFile___dir
  data___mission_image___localFile___ext
  data___mission_image___localFile___extension
  data___mission_image___localFile___gid
  data___mission_image___localFile___id
  data___mission_image___localFile___ino
  data___mission_image___localFile___mode
  data___mission_image___localFile___modifiedTime
  data___mission_image___localFile___mtime
  data___mission_image___localFile___mtimeMs
  data___mission_image___localFile___name
  data___mission_image___localFile___nlink
  data___mission_image___localFile___prettySize
  data___mission_image___localFile___publicURL
  data___mission_image___localFile___rdev
  data___mission_image___localFile___relativeDirectory
  data___mission_image___localFile___relativePath
  data___mission_image___localFile___root
  data___mission_image___localFile___size
  data___mission_image___localFile___sourceInstanceName
  data___mission_image___localFile___uid
  data___mission_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___mission_left___html
  data___mission_left___raw
  data___mission_left___richText
  data___mission_left___text
  data___mission_right___html
  data___mission_right___raw
  data___mission_right___richText
  data___mission_right___text
  data___mission_title___html
  data___mission_title___raw
  data___mission_title___richText
  data___mission_title___text
  data___seo_description
  data___seo_title
  data___title
  data___values
  data___values___content___html
  data___values___content___raw
  data___values___content___richText
  data___values___content___text
  data___values___icon
  data___values___icon_color
  data___values___text___html
  data___values___text___raw
  data___values___text___richText
  data___values___text___text
  data___values___title___html
  data___values___title___raw
  data___values___title___richText
  data___values___title___text
  data___values_text___html
  data___values_text___raw
  data___values_text___richText
  data___values_text___text
  data___values_title___html
  data___values_title___raw
  data___values_title___richText
  data___values_title___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicAboutPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicAboutPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicAboutPageGroupConnection {
  distinct(field: PrismicAboutPageFieldsEnum!): [String!]!
  edges: [PrismicAboutPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicAboutPageFieldsEnum!, limit: Int, skip: Int): [PrismicAboutPageGroupConnection!]!
  max(field: PrismicAboutPageFieldsEnum!): Float
  min(field: PrismicAboutPageFieldsEnum!): Float
  nodes: [PrismicAboutPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicAboutPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicAboutPageSortInput {
  fields: [PrismicAboutPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicAccountPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicAccountPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicAccountPageConnection {
  distinct(field: PrismicAccountPageFieldsEnum!): [String!]!
  edges: [PrismicAccountPageEdge!]!
  group(field: PrismicAccountPageFieldsEnum!, limit: Int, skip: Int): [PrismicAccountPageGroupConnection!]!
  max(field: PrismicAccountPageFieldsEnum!): Float
  min(field: PrismicAccountPageFieldsEnum!): Float
  nodes: [PrismicAccountPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicAccountPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicAccountPageDataType {
  title: String
}

input PrismicAccountPageDataTypeFilterInput {
  title: StringQueryOperatorInput
}

type PrismicAccountPageEdge {
  next: PrismicAccountPage
  node: PrismicAccountPage!
  previous: PrismicAccountPage
}

enum PrismicAccountPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicAccountPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicAccountPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicAccountPageGroupConnection {
  distinct(field: PrismicAccountPageFieldsEnum!): [String!]!
  edges: [PrismicAccountPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicAccountPageFieldsEnum!, limit: Int, skip: Int): [PrismicAccountPageGroupConnection!]!
  max(field: PrismicAccountPageFieldsEnum!): Float
  min(field: PrismicAccountPageFieldsEnum!): Float
  nodes: [PrismicAccountPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicAccountPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicAccountPageSortInput {
  fields: [PrismicAccountPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicActivateAccountPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicActivateAccountPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicActivateAccountPageConnection {
  distinct(field: PrismicActivateAccountPageFieldsEnum!): [String!]!
  edges: [PrismicActivateAccountPageEdge!]!
  group(field: PrismicActivateAccountPageFieldsEnum!, limit: Int, skip: Int): [PrismicActivateAccountPageGroupConnection!]!
  max(field: PrismicActivateAccountPageFieldsEnum!): Float
  min(field: PrismicActivateAccountPageFieldsEnum!): Float
  nodes: [PrismicActivateAccountPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicActivateAccountPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicActivateAccountPageDataHeroImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicActivateAccountPageDataHeroImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicActivateAccountPageDataType {
  back_link: PrismicLinkType
  back_text: String
  button: String
  heading: PrismicStructuredTextType
  hero: PrismicActivateAccountPageDataHeroImageType
  intro: String
}

input PrismicActivateAccountPageDataTypeFilterInput {
  back_link: PrismicLinkTypeFilterInput
  back_text: StringQueryOperatorInput
  button: StringQueryOperatorInput
  heading: PrismicStructuredTextTypeFilterInput
  hero: PrismicActivateAccountPageDataHeroImageTypeFilterInput
  intro: StringQueryOperatorInput
}

type PrismicActivateAccountPageEdge {
  next: PrismicActivateAccountPage
  node: PrismicActivateAccountPage!
  previous: PrismicActivateAccountPage
}

enum PrismicActivateAccountPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___back_link___id
  data___back_link___isBroken
  data___back_link___lang
  data___back_link___link_type
  data___back_link___localFile___absolutePath
  data___back_link___localFile___accessTime
  data___back_link___localFile___atime
  data___back_link___localFile___atimeMs
  data___back_link___localFile___base
  data___back_link___localFile___birthTime
  data___back_link___localFile___birthtime
  data___back_link___localFile___birthtimeMs
  data___back_link___localFile___blksize
  data___back_link___localFile___blocks
  data___back_link___localFile___changeTime
  data___back_link___localFile___children
  data___back_link___localFile___childrenImageSharp
  data___back_link___localFile___ctime
  data___back_link___localFile___ctimeMs
  data___back_link___localFile___dev
  data___back_link___localFile___dir
  data___back_link___localFile___ext
  data___back_link___localFile___extension
  data___back_link___localFile___gid
  data___back_link___localFile___id
  data___back_link___localFile___ino
  data___back_link___localFile___mode
  data___back_link___localFile___modifiedTime
  data___back_link___localFile___mtime
  data___back_link___localFile___mtimeMs
  data___back_link___localFile___name
  data___back_link___localFile___nlink
  data___back_link___localFile___prettySize
  data___back_link___localFile___publicURL
  data___back_link___localFile___rdev
  data___back_link___localFile___relativeDirectory
  data___back_link___localFile___relativePath
  data___back_link___localFile___root
  data___back_link___localFile___size
  data___back_link___localFile___sourceInstanceName
  data___back_link___localFile___uid
  data___back_link___raw
  data___back_link___size
  data___back_link___slug
  data___back_link___tags
  data___back_link___target
  data___back_link___type
  data___back_link___uid
  data___back_link___url
  data___back_text
  data___button
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___hero___alt
  data___hero___copyright
  data___hero___dimensions___height
  data___hero___dimensions___width
  data___hero___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___localFile___absolutePath
  data___hero___localFile___accessTime
  data___hero___localFile___atime
  data___hero___localFile___atimeMs
  data___hero___localFile___base
  data___hero___localFile___birthTime
  data___hero___localFile___birthtime
  data___hero___localFile___birthtimeMs
  data___hero___localFile___blksize
  data___hero___localFile___blocks
  data___hero___localFile___changeTime
  data___hero___localFile___children
  data___hero___localFile___childrenImageSharp
  data___hero___localFile___ctime
  data___hero___localFile___ctimeMs
  data___hero___localFile___dev
  data___hero___localFile___dir
  data___hero___localFile___ext
  data___hero___localFile___extension
  data___hero___localFile___gid
  data___hero___localFile___id
  data___hero___localFile___ino
  data___hero___localFile___mode
  data___hero___localFile___modifiedTime
  data___hero___localFile___mtime
  data___hero___localFile___mtimeMs
  data___hero___localFile___name
  data___hero___localFile___nlink
  data___hero___localFile___prettySize
  data___hero___localFile___publicURL
  data___hero___localFile___rdev
  data___hero___localFile___relativeDirectory
  data___hero___localFile___relativePath
  data___hero___localFile___root
  data___hero___localFile___size
  data___hero___localFile___sourceInstanceName
  data___hero___localFile___uid
  data___hero___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___intro
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicActivateAccountPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicActivateAccountPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicActivateAccountPageGroupConnection {
  distinct(field: PrismicActivateAccountPageFieldsEnum!): [String!]!
  edges: [PrismicActivateAccountPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicActivateAccountPageFieldsEnum!, limit: Int, skip: Int): [PrismicActivateAccountPageGroupConnection!]!
  max(field: PrismicActivateAccountPageFieldsEnum!): Float
  min(field: PrismicActivateAccountPageFieldsEnum!): Float
  nodes: [PrismicActivateAccountPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicActivateAccountPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicActivateAccountPageSortInput {
  fields: [PrismicActivateAccountPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicActiveSubstance implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicActiveSubstanceDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicActiveSubstanceConnection {
  distinct(field: PrismicActiveSubstanceFieldsEnum!): [String!]!
  edges: [PrismicActiveSubstanceEdge!]!
  group(field: PrismicActiveSubstanceFieldsEnum!, limit: Int, skip: Int): [PrismicActiveSubstanceGroupConnection!]!
  max(field: PrismicActiveSubstanceFieldsEnum!): Float
  min(field: PrismicActiveSubstanceFieldsEnum!): Float
  nodes: [PrismicActiveSubstance!]!
  pageInfo: PageInfo!
  sum(field: PrismicActiveSubstanceFieldsEnum!): Float
  totalCount: Int!
}

type PrismicActiveSubstanceDataType {
  female: Boolean
  name: String
  plural: Boolean
}

input PrismicActiveSubstanceDataTypeFilterInput {
  female: BooleanQueryOperatorInput
  name: StringQueryOperatorInput
  plural: BooleanQueryOperatorInput
}

type PrismicActiveSubstanceEdge {
  next: PrismicActiveSubstance
  node: PrismicActiveSubstance!
  previous: PrismicActiveSubstance
}

enum PrismicActiveSubstanceFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___female
  data___name
  data___plural
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicActiveSubstanceFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicActiveSubstanceDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicActiveSubstanceGroupConnection {
  distinct(field: PrismicActiveSubstanceFieldsEnum!): [String!]!
  edges: [PrismicActiveSubstanceEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicActiveSubstanceFieldsEnum!, limit: Int, skip: Int): [PrismicActiveSubstanceGroupConnection!]!
  max(field: PrismicActiveSubstanceFieldsEnum!): Float
  min(field: PrismicActiveSubstanceFieldsEnum!): Float
  nodes: [PrismicActiveSubstance!]!
  pageInfo: PageInfo!
  sum(field: PrismicActiveSubstanceFieldsEnum!): Float
  totalCount: Int!
}

input PrismicActiveSubstanceSortInput {
  fields: [PrismicActiveSubstanceFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

union PrismicAllDocumentTypes = PrismicAboutPage | PrismicAccountPage | PrismicActivateAccountPage | PrismicActiveSubstance | PrismicBlogAuthor | PrismicBlogCategory | PrismicBlogPage | PrismicBlogPost | PrismicBlogPostPage | PrismicBlogSubCategory | PrismicCartPage | PrismicCreateAccountPage | PrismicDownloadAppSection | PrismicFaqSection | PrismicHeddaPage | PrismicHelpCategory | PrismicHelpCategoryPage | PrismicHelpPage | PrismicHelpQuestion | PrismicHighlightsSection | PrismicHomePage | PrismicIconList | PrismicLegalPage | PrismicLoginPage | PrismicMedicalExpert | PrismicMobileAppPage | PrismicNewsletterSection | PrismicOrdersPage | PrismicPasswordForgottenPage | PrismicPasswordResetPage | PrismicProduct | PrismicProductPage | PrismicProductsPage | PrismicSearchPage | PrismicSubscriptionsPage

type PrismicAlternateLanguageType {
  document: PrismicAllDocumentTypes
  id: ID
  lang: String
  raw: JSON
  type: String
  uid: String
}

input PrismicAlternateLanguageTypeFilterInput {
  id: IDQueryOperatorInput
  lang: StringQueryOperatorInput
  raw: JSONQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
}

input PrismicAlternateLanguageTypeFilterListInput {
  elemMatch: PrismicAlternateLanguageTypeFilterInput
}

type PrismicBlogAuthor implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicBlogAuthorDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicBlogAuthorConnection {
  distinct(field: PrismicBlogAuthorFieldsEnum!): [String!]!
  edges: [PrismicBlogAuthorEdge!]!
  group(field: PrismicBlogAuthorFieldsEnum!, limit: Int, skip: Int): [PrismicBlogAuthorGroupConnection!]!
  max(field: PrismicBlogAuthorFieldsEnum!): Float
  min(field: PrismicBlogAuthorFieldsEnum!): Float
  nodes: [PrismicBlogAuthor!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogAuthorFieldsEnum!): Float
  totalCount: Int!
}

type PrismicBlogAuthorDataAvatarImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicBlogAuthorDataAvatarImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicBlogAuthorDataType {
  avatar: PrismicBlogAuthorDataAvatarImageType
  first_name: String
  last_name: String
}

input PrismicBlogAuthorDataTypeFilterInput {
  avatar: PrismicBlogAuthorDataAvatarImageTypeFilterInput
  first_name: StringQueryOperatorInput
  last_name: StringQueryOperatorInput
}

type PrismicBlogAuthorEdge {
  next: PrismicBlogAuthor
  node: PrismicBlogAuthor!
  previous: PrismicBlogAuthor
}

enum PrismicBlogAuthorFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___avatar___alt
  data___avatar___copyright
  data___avatar___dimensions___height
  data___avatar___dimensions___width
  data___avatar___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___localFile___absolutePath
  data___avatar___localFile___accessTime
  data___avatar___localFile___atime
  data___avatar___localFile___atimeMs
  data___avatar___localFile___base
  data___avatar___localFile___birthTime
  data___avatar___localFile___birthtime
  data___avatar___localFile___birthtimeMs
  data___avatar___localFile___blksize
  data___avatar___localFile___blocks
  data___avatar___localFile___changeTime
  data___avatar___localFile___children
  data___avatar___localFile___childrenImageSharp
  data___avatar___localFile___ctime
  data___avatar___localFile___ctimeMs
  data___avatar___localFile___dev
  data___avatar___localFile___dir
  data___avatar___localFile___ext
  data___avatar___localFile___extension
  data___avatar___localFile___gid
  data___avatar___localFile___id
  data___avatar___localFile___ino
  data___avatar___localFile___mode
  data___avatar___localFile___modifiedTime
  data___avatar___localFile___mtime
  data___avatar___localFile___mtimeMs
  data___avatar___localFile___name
  data___avatar___localFile___nlink
  data___avatar___localFile___prettySize
  data___avatar___localFile___publicURL
  data___avatar___localFile___rdev
  data___avatar___localFile___relativeDirectory
  data___avatar___localFile___relativePath
  data___avatar___localFile___root
  data___avatar___localFile___size
  data___avatar___localFile___sourceInstanceName
  data___avatar___localFile___uid
  data___avatar___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___first_name
  data___last_name
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicBlogAuthorFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicBlogAuthorDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicBlogAuthorGroupConnection {
  distinct(field: PrismicBlogAuthorFieldsEnum!): [String!]!
  edges: [PrismicBlogAuthorEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicBlogAuthorFieldsEnum!, limit: Int, skip: Int): [PrismicBlogAuthorGroupConnection!]!
  max(field: PrismicBlogAuthorFieldsEnum!): Float
  min(field: PrismicBlogAuthorFieldsEnum!): Float
  nodes: [PrismicBlogAuthor!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogAuthorFieldsEnum!): Float
  totalCount: Int!
}

input PrismicBlogAuthorSortInput {
  fields: [PrismicBlogAuthorFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicBlogCategory implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicBlogCategoryDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicBlogCategoryConnection {
  distinct(field: PrismicBlogCategoryFieldsEnum!): [String!]!
  edges: [PrismicBlogCategoryEdge!]!
  group(field: PrismicBlogCategoryFieldsEnum!, limit: Int, skip: Int): [PrismicBlogCategoryGroupConnection!]!
  max(field: PrismicBlogCategoryFieldsEnum!): Float
  min(field: PrismicBlogCategoryFieldsEnum!): Float
  nodes: [PrismicBlogCategory!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogCategoryFieldsEnum!): Float
  totalCount: Int!
}

type PrismicBlogCategoryDataSubCategories {
  sub_category: PrismicLinkType
}

input PrismicBlogCategoryDataSubCategoriesFilterInput {
  sub_category: PrismicLinkTypeFilterInput
}

input PrismicBlogCategoryDataSubCategoriesFilterListInput {
  elemMatch: PrismicBlogCategoryDataSubCategoriesFilterInput
}

type PrismicBlogCategoryDataType {
  name: String
  sub_categories: [PrismicBlogCategoryDataSubCategories]
}

input PrismicBlogCategoryDataTypeFilterInput {
  name: StringQueryOperatorInput
  sub_categories: PrismicBlogCategoryDataSubCategoriesFilterListInput
}

type PrismicBlogCategoryEdge {
  next: PrismicBlogCategory
  node: PrismicBlogCategory!
  previous: PrismicBlogCategory
}

enum PrismicBlogCategoryFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___name
  data___sub_categories
  data___sub_categories___sub_category___id
  data___sub_categories___sub_category___isBroken
  data___sub_categories___sub_category___lang
  data___sub_categories___sub_category___link_type
  data___sub_categories___sub_category___raw
  data___sub_categories___sub_category___size
  data___sub_categories___sub_category___slug
  data___sub_categories___sub_category___tags
  data___sub_categories___sub_category___target
  data___sub_categories___sub_category___type
  data___sub_categories___sub_category___uid
  data___sub_categories___sub_category___url
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicBlogCategoryFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicBlogCategoryDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicBlogCategoryGroupConnection {
  distinct(field: PrismicBlogCategoryFieldsEnum!): [String!]!
  edges: [PrismicBlogCategoryEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicBlogCategoryFieldsEnum!, limit: Int, skip: Int): [PrismicBlogCategoryGroupConnection!]!
  max(field: PrismicBlogCategoryFieldsEnum!): Float
  min(field: PrismicBlogCategoryFieldsEnum!): Float
  nodes: [PrismicBlogCategory!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogCategoryFieldsEnum!): Float
  totalCount: Int!
}

input PrismicBlogCategorySortInput {
  fields: [PrismicBlogCategoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicBlogPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicBlogPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicBlogPageConnection {
  distinct(field: PrismicBlogPageFieldsEnum!): [String!]!
  edges: [PrismicBlogPageEdge!]!
  group(field: PrismicBlogPageFieldsEnum!, limit: Int, skip: Int): [PrismicBlogPageGroupConnection!]!
  max(field: PrismicBlogPageFieldsEnum!): Float
  min(field: PrismicBlogPageFieldsEnum!): Float
  nodes: [PrismicBlogPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicBlogPageDataType {
  hero_title: PrismicStructuredTextType
  seo_description: String
  seo_title: String
  title: String
}

input PrismicBlogPageDataTypeFilterInput {
  hero_title: PrismicStructuredTextTypeFilterInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

type PrismicBlogPageEdge {
  next: PrismicBlogPage
  node: PrismicBlogPage!
  previous: PrismicBlogPage
}

enum PrismicBlogPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___hero_title___html
  data___hero_title___raw
  data___hero_title___richText
  data___hero_title___text
  data___seo_description
  data___seo_title
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicBlogPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicBlogPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicBlogPageGroupConnection {
  distinct(field: PrismicBlogPageFieldsEnum!): [String!]!
  edges: [PrismicBlogPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicBlogPageFieldsEnum!, limit: Int, skip: Int): [PrismicBlogPageGroupConnection!]!
  max(field: PrismicBlogPageFieldsEnum!): Float
  min(field: PrismicBlogPageFieldsEnum!): Float
  nodes: [PrismicBlogPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicBlogPageSortInput {
  fields: [PrismicBlogPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicBlogPost implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicBlogPostDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicBlogPostConnection {
  distinct(field: PrismicBlogPostFieldsEnum!): [String!]!
  edges: [PrismicBlogPostEdge!]!
  group(field: PrismicBlogPostFieldsEnum!, limit: Int, skip: Int): [PrismicBlogPostGroupConnection!]!
  max(field: PrismicBlogPostFieldsEnum!): Float
  min(field: PrismicBlogPostFieldsEnum!): Float
  nodes: [PrismicBlogPost!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogPostFieldsEnum!): Float
  totalCount: Int!
}

type PrismicBlogPostDataActiveSubstances {
  active_substance: PrismicLinkType
}

input PrismicBlogPostDataActiveSubstancesFilterInput {
  active_substance: PrismicLinkTypeFilterInput
}

input PrismicBlogPostDataActiveSubstancesFilterListInput {
  elemMatch: PrismicBlogPostDataActiveSubstancesFilterInput
}

type PrismicBlogPostDataAuthors {
  author: PrismicLinkType
}

input PrismicBlogPostDataAuthorsFilterInput {
  author: PrismicLinkTypeFilterInput
}

input PrismicBlogPostDataAuthorsFilterListInput {
  elemMatch: PrismicBlogPostDataAuthorsFilterInput
}

type PrismicBlogPostDataExperts {
  expert: PrismicLinkType
}

input PrismicBlogPostDataExpertsFilterInput {
  expert: PrismicLinkTypeFilterInput
}

input PrismicBlogPostDataExpertsFilterListInput {
  elemMatch: PrismicBlogPostDataExpertsFilterInput
}

type PrismicBlogPostDataImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicBlogPostDataImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicBlogPostDataType {
  active_substances: [PrismicBlogPostDataActiveSubstances]
  authors: [PrismicBlogPostDataAuthors]
  body: PrismicStructuredTextType
  category: PrismicLinkType
  excerpt: PrismicStructuredTextType
  experts: [PrismicBlogPostDataExperts]
  image: PrismicBlogPostDataImageImageType
  intro: PrismicStructuredTextType
  sub_category: PrismicLinkType
  title: PrismicStructuredTextType
}

input PrismicBlogPostDataTypeFilterInput {
  active_substances: PrismicBlogPostDataActiveSubstancesFilterListInput
  authors: PrismicBlogPostDataAuthorsFilterListInput
  body: PrismicStructuredTextTypeFilterInput
  category: PrismicLinkTypeFilterInput
  excerpt: PrismicStructuredTextTypeFilterInput
  experts: PrismicBlogPostDataExpertsFilterListInput
  image: PrismicBlogPostDataImageImageTypeFilterInput
  intro: PrismicStructuredTextTypeFilterInput
  sub_category: PrismicLinkTypeFilterInput
  title: PrismicStructuredTextTypeFilterInput
}

type PrismicBlogPostEdge {
  next: PrismicBlogPost
  node: PrismicBlogPost!
  previous: PrismicBlogPost
}

enum PrismicBlogPostFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___active_substances
  data___active_substances___active_substance___id
  data___active_substances___active_substance___isBroken
  data___active_substances___active_substance___lang
  data___active_substances___active_substance___link_type
  data___active_substances___active_substance___raw
  data___active_substances___active_substance___size
  data___active_substances___active_substance___slug
  data___active_substances___active_substance___tags
  data___active_substances___active_substance___target
  data___active_substances___active_substance___type
  data___active_substances___active_substance___uid
  data___active_substances___active_substance___url
  data___authors
  data___authors___author___id
  data___authors___author___isBroken
  data___authors___author___lang
  data___authors___author___link_type
  data___authors___author___raw
  data___authors___author___size
  data___authors___author___slug
  data___authors___author___tags
  data___authors___author___target
  data___authors___author___type
  data___authors___author___uid
  data___authors___author___url
  data___body___html
  data___body___raw
  data___body___richText
  data___body___text
  data___category___id
  data___category___isBroken
  data___category___lang
  data___category___link_type
  data___category___localFile___absolutePath
  data___category___localFile___accessTime
  data___category___localFile___atime
  data___category___localFile___atimeMs
  data___category___localFile___base
  data___category___localFile___birthTime
  data___category___localFile___birthtime
  data___category___localFile___birthtimeMs
  data___category___localFile___blksize
  data___category___localFile___blocks
  data___category___localFile___changeTime
  data___category___localFile___children
  data___category___localFile___childrenImageSharp
  data___category___localFile___ctime
  data___category___localFile___ctimeMs
  data___category___localFile___dev
  data___category___localFile___dir
  data___category___localFile___ext
  data___category___localFile___extension
  data___category___localFile___gid
  data___category___localFile___id
  data___category___localFile___ino
  data___category___localFile___mode
  data___category___localFile___modifiedTime
  data___category___localFile___mtime
  data___category___localFile___mtimeMs
  data___category___localFile___name
  data___category___localFile___nlink
  data___category___localFile___prettySize
  data___category___localFile___publicURL
  data___category___localFile___rdev
  data___category___localFile___relativeDirectory
  data___category___localFile___relativePath
  data___category___localFile___root
  data___category___localFile___size
  data___category___localFile___sourceInstanceName
  data___category___localFile___uid
  data___category___raw
  data___category___size
  data___category___slug
  data___category___tags
  data___category___target
  data___category___type
  data___category___uid
  data___category___url
  data___excerpt___html
  data___excerpt___raw
  data___excerpt___richText
  data___excerpt___text
  data___experts
  data___experts___expert___id
  data___experts___expert___isBroken
  data___experts___expert___lang
  data___experts___expert___link_type
  data___experts___expert___raw
  data___experts___expert___size
  data___experts___expert___slug
  data___experts___expert___tags
  data___experts___expert___target
  data___experts___expert___type
  data___experts___expert___uid
  data___experts___expert___url
  data___image___alt
  data___image___copyright
  data___image___dimensions___height
  data___image___dimensions___width
  data___image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___absolutePath
  data___image___localFile___accessTime
  data___image___localFile___atime
  data___image___localFile___atimeMs
  data___image___localFile___base
  data___image___localFile___birthTime
  data___image___localFile___birthtime
  data___image___localFile___birthtimeMs
  data___image___localFile___blksize
  data___image___localFile___blocks
  data___image___localFile___changeTime
  data___image___localFile___children
  data___image___localFile___childrenImageSharp
  data___image___localFile___ctime
  data___image___localFile___ctimeMs
  data___image___localFile___dev
  data___image___localFile___dir
  data___image___localFile___ext
  data___image___localFile___extension
  data___image___localFile___gid
  data___image___localFile___id
  data___image___localFile___ino
  data___image___localFile___mode
  data___image___localFile___modifiedTime
  data___image___localFile___mtime
  data___image___localFile___mtimeMs
  data___image___localFile___name
  data___image___localFile___nlink
  data___image___localFile___prettySize
  data___image___localFile___publicURL
  data___image___localFile___rdev
  data___image___localFile___relativeDirectory
  data___image___localFile___relativePath
  data___image___localFile___root
  data___image___localFile___size
  data___image___localFile___sourceInstanceName
  data___image___localFile___uid
  data___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___intro___html
  data___intro___raw
  data___intro___richText
  data___intro___text
  data___sub_category___id
  data___sub_category___isBroken
  data___sub_category___lang
  data___sub_category___link_type
  data___sub_category___localFile___absolutePath
  data___sub_category___localFile___accessTime
  data___sub_category___localFile___atime
  data___sub_category___localFile___atimeMs
  data___sub_category___localFile___base
  data___sub_category___localFile___birthTime
  data___sub_category___localFile___birthtime
  data___sub_category___localFile___birthtimeMs
  data___sub_category___localFile___blksize
  data___sub_category___localFile___blocks
  data___sub_category___localFile___changeTime
  data___sub_category___localFile___children
  data___sub_category___localFile___childrenImageSharp
  data___sub_category___localFile___ctime
  data___sub_category___localFile___ctimeMs
  data___sub_category___localFile___dev
  data___sub_category___localFile___dir
  data___sub_category___localFile___ext
  data___sub_category___localFile___extension
  data___sub_category___localFile___gid
  data___sub_category___localFile___id
  data___sub_category___localFile___ino
  data___sub_category___localFile___mode
  data___sub_category___localFile___modifiedTime
  data___sub_category___localFile___mtime
  data___sub_category___localFile___mtimeMs
  data___sub_category___localFile___name
  data___sub_category___localFile___nlink
  data___sub_category___localFile___prettySize
  data___sub_category___localFile___publicURL
  data___sub_category___localFile___rdev
  data___sub_category___localFile___relativeDirectory
  data___sub_category___localFile___relativePath
  data___sub_category___localFile___root
  data___sub_category___localFile___size
  data___sub_category___localFile___sourceInstanceName
  data___sub_category___localFile___uid
  data___sub_category___raw
  data___sub_category___size
  data___sub_category___slug
  data___sub_category___tags
  data___sub_category___target
  data___sub_category___type
  data___sub_category___uid
  data___sub_category___url
  data___title___html
  data___title___raw
  data___title___richText
  data___title___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicBlogPostFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicBlogPostDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicBlogPostGroupConnection {
  distinct(field: PrismicBlogPostFieldsEnum!): [String!]!
  edges: [PrismicBlogPostEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicBlogPostFieldsEnum!, limit: Int, skip: Int): [PrismicBlogPostGroupConnection!]!
  max(field: PrismicBlogPostFieldsEnum!): Float
  min(field: PrismicBlogPostFieldsEnum!): Float
  nodes: [PrismicBlogPost!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogPostFieldsEnum!): Float
  totalCount: Int!
}

type PrismicBlogPostPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicBlogPostPageConnection {
  distinct(field: PrismicBlogPostPageFieldsEnum!): [String!]!
  edges: [PrismicBlogPostPageEdge!]!
  group(field: PrismicBlogPostPageFieldsEnum!, limit: Int, skip: Int): [PrismicBlogPostPageGroupConnection!]!
  max(field: PrismicBlogPostPageFieldsEnum!): Float
  min(field: PrismicBlogPostPageFieldsEnum!): Float
  nodes: [PrismicBlogPostPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogPostPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicBlogPostPageEdge {
  next: PrismicBlogPostPage
  node: PrismicBlogPostPage!
  previous: PrismicBlogPostPage
}

enum PrismicBlogPostPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicBlogPostPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicBlogPostPageGroupConnection {
  distinct(field: PrismicBlogPostPageFieldsEnum!): [String!]!
  edges: [PrismicBlogPostPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicBlogPostPageFieldsEnum!, limit: Int, skip: Int): [PrismicBlogPostPageGroupConnection!]!
  max(field: PrismicBlogPostPageFieldsEnum!): Float
  min(field: PrismicBlogPostPageFieldsEnum!): Float
  nodes: [PrismicBlogPostPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogPostPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicBlogPostPageSortInput {
  fields: [PrismicBlogPostPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicBlogPostSortInput {
  fields: [PrismicBlogPostFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicBlogSubCategory implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicBlogSubCategoryDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicBlogSubCategoryConnection {
  distinct(field: PrismicBlogSubCategoryFieldsEnum!): [String!]!
  edges: [PrismicBlogSubCategoryEdge!]!
  group(field: PrismicBlogSubCategoryFieldsEnum!, limit: Int, skip: Int): [PrismicBlogSubCategoryGroupConnection!]!
  max(field: PrismicBlogSubCategoryFieldsEnum!): Float
  min(field: PrismicBlogSubCategoryFieldsEnum!): Float
  nodes: [PrismicBlogSubCategory!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogSubCategoryFieldsEnum!): Float
  totalCount: Int!
}

type PrismicBlogSubCategoryDataType {
  name: String
}

input PrismicBlogSubCategoryDataTypeFilterInput {
  name: StringQueryOperatorInput
}

type PrismicBlogSubCategoryEdge {
  next: PrismicBlogSubCategory
  node: PrismicBlogSubCategory!
  previous: PrismicBlogSubCategory
}

enum PrismicBlogSubCategoryFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___name
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicBlogSubCategoryFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicBlogSubCategoryDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicBlogSubCategoryGroupConnection {
  distinct(field: PrismicBlogSubCategoryFieldsEnum!): [String!]!
  edges: [PrismicBlogSubCategoryEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicBlogSubCategoryFieldsEnum!, limit: Int, skip: Int): [PrismicBlogSubCategoryGroupConnection!]!
  max(field: PrismicBlogSubCategoryFieldsEnum!): Float
  min(field: PrismicBlogSubCategoryFieldsEnum!): Float
  nodes: [PrismicBlogSubCategory!]!
  pageInfo: PageInfo!
  sum(field: PrismicBlogSubCategoryFieldsEnum!): Float
  totalCount: Int!
}

input PrismicBlogSubCategorySortInput {
  fields: [PrismicBlogSubCategoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicCartPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicCartPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicCartPageConnection {
  distinct(field: PrismicCartPageFieldsEnum!): [String!]!
  edges: [PrismicCartPageEdge!]!
  group(field: PrismicCartPageFieldsEnum!, limit: Int, skip: Int): [PrismicCartPageGroupConnection!]!
  max(field: PrismicCartPageFieldsEnum!): Float
  min(field: PrismicCartPageFieldsEnum!): Float
  nodes: [PrismicCartPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicCartPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicCartPageDataType {
  banner: PrismicStructuredTextType
  empty_button_link: PrismicLinkType
  empty_button_text: String
  empty_heading: PrismicStructuredTextType
  heading: PrismicStructuredTextType
  seo_description: String
  seo_title: String
  sidebar_heading: PrismicStructuredTextType
  sidebar_legal: PrismicStructuredTextType
  sidebar_order: String
  sidebar_questions_label: String
  sidebar_questions_link: PrismicLinkType
  title: String
  upsell_heading: PrismicStructuredTextType
}

input PrismicCartPageDataTypeFilterInput {
  banner: PrismicStructuredTextTypeFilterInput
  empty_button_link: PrismicLinkTypeFilterInput
  empty_button_text: StringQueryOperatorInput
  empty_heading: PrismicStructuredTextTypeFilterInput
  heading: PrismicStructuredTextTypeFilterInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  sidebar_heading: PrismicStructuredTextTypeFilterInput
  sidebar_legal: PrismicStructuredTextTypeFilterInput
  sidebar_order: StringQueryOperatorInput
  sidebar_questions_label: StringQueryOperatorInput
  sidebar_questions_link: PrismicLinkTypeFilterInput
  title: StringQueryOperatorInput
  upsell_heading: PrismicStructuredTextTypeFilterInput
}

type PrismicCartPageEdge {
  next: PrismicCartPage
  node: PrismicCartPage!
  previous: PrismicCartPage
}

enum PrismicCartPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___banner___html
  data___banner___raw
  data___banner___richText
  data___banner___text
  data___empty_button_link___id
  data___empty_button_link___isBroken
  data___empty_button_link___lang
  data___empty_button_link___link_type
  data___empty_button_link___localFile___absolutePath
  data___empty_button_link___localFile___accessTime
  data___empty_button_link___localFile___atime
  data___empty_button_link___localFile___atimeMs
  data___empty_button_link___localFile___base
  data___empty_button_link___localFile___birthTime
  data___empty_button_link___localFile___birthtime
  data___empty_button_link___localFile___birthtimeMs
  data___empty_button_link___localFile___blksize
  data___empty_button_link___localFile___blocks
  data___empty_button_link___localFile___changeTime
  data___empty_button_link___localFile___children
  data___empty_button_link___localFile___childrenImageSharp
  data___empty_button_link___localFile___ctime
  data___empty_button_link___localFile___ctimeMs
  data___empty_button_link___localFile___dev
  data___empty_button_link___localFile___dir
  data___empty_button_link___localFile___ext
  data___empty_button_link___localFile___extension
  data___empty_button_link___localFile___gid
  data___empty_button_link___localFile___id
  data___empty_button_link___localFile___ino
  data___empty_button_link___localFile___mode
  data___empty_button_link___localFile___modifiedTime
  data___empty_button_link___localFile___mtime
  data___empty_button_link___localFile___mtimeMs
  data___empty_button_link___localFile___name
  data___empty_button_link___localFile___nlink
  data___empty_button_link___localFile___prettySize
  data___empty_button_link___localFile___publicURL
  data___empty_button_link___localFile___rdev
  data___empty_button_link___localFile___relativeDirectory
  data___empty_button_link___localFile___relativePath
  data___empty_button_link___localFile___root
  data___empty_button_link___localFile___size
  data___empty_button_link___localFile___sourceInstanceName
  data___empty_button_link___localFile___uid
  data___empty_button_link___raw
  data___empty_button_link___size
  data___empty_button_link___slug
  data___empty_button_link___tags
  data___empty_button_link___target
  data___empty_button_link___type
  data___empty_button_link___uid
  data___empty_button_link___url
  data___empty_button_text
  data___empty_heading___html
  data___empty_heading___raw
  data___empty_heading___richText
  data___empty_heading___text
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___seo_description
  data___seo_title
  data___sidebar_heading___html
  data___sidebar_heading___raw
  data___sidebar_heading___richText
  data___sidebar_heading___text
  data___sidebar_legal___html
  data___sidebar_legal___raw
  data___sidebar_legal___richText
  data___sidebar_legal___text
  data___sidebar_order
  data___sidebar_questions_label
  data___sidebar_questions_link___id
  data___sidebar_questions_link___isBroken
  data___sidebar_questions_link___lang
  data___sidebar_questions_link___link_type
  data___sidebar_questions_link___localFile___absolutePath
  data___sidebar_questions_link___localFile___accessTime
  data___sidebar_questions_link___localFile___atime
  data___sidebar_questions_link___localFile___atimeMs
  data___sidebar_questions_link___localFile___base
  data___sidebar_questions_link___localFile___birthTime
  data___sidebar_questions_link___localFile___birthtime
  data___sidebar_questions_link___localFile___birthtimeMs
  data___sidebar_questions_link___localFile___blksize
  data___sidebar_questions_link___localFile___blocks
  data___sidebar_questions_link___localFile___changeTime
  data___sidebar_questions_link___localFile___children
  data___sidebar_questions_link___localFile___childrenImageSharp
  data___sidebar_questions_link___localFile___ctime
  data___sidebar_questions_link___localFile___ctimeMs
  data___sidebar_questions_link___localFile___dev
  data___sidebar_questions_link___localFile___dir
  data___sidebar_questions_link___localFile___ext
  data___sidebar_questions_link___localFile___extension
  data___sidebar_questions_link___localFile___gid
  data___sidebar_questions_link___localFile___id
  data___sidebar_questions_link___localFile___ino
  data___sidebar_questions_link___localFile___mode
  data___sidebar_questions_link___localFile___modifiedTime
  data___sidebar_questions_link___localFile___mtime
  data___sidebar_questions_link___localFile___mtimeMs
  data___sidebar_questions_link___localFile___name
  data___sidebar_questions_link___localFile___nlink
  data___sidebar_questions_link___localFile___prettySize
  data___sidebar_questions_link___localFile___publicURL
  data___sidebar_questions_link___localFile___rdev
  data___sidebar_questions_link___localFile___relativeDirectory
  data___sidebar_questions_link___localFile___relativePath
  data___sidebar_questions_link___localFile___root
  data___sidebar_questions_link___localFile___size
  data___sidebar_questions_link___localFile___sourceInstanceName
  data___sidebar_questions_link___localFile___uid
  data___sidebar_questions_link___raw
  data___sidebar_questions_link___size
  data___sidebar_questions_link___slug
  data___sidebar_questions_link___tags
  data___sidebar_questions_link___target
  data___sidebar_questions_link___type
  data___sidebar_questions_link___uid
  data___sidebar_questions_link___url
  data___title
  data___upsell_heading___html
  data___upsell_heading___raw
  data___upsell_heading___richText
  data___upsell_heading___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicCartPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicCartPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicCartPageGroupConnection {
  distinct(field: PrismicCartPageFieldsEnum!): [String!]!
  edges: [PrismicCartPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicCartPageFieldsEnum!, limit: Int, skip: Int): [PrismicCartPageGroupConnection!]!
  max(field: PrismicCartPageFieldsEnum!): Float
  min(field: PrismicCartPageFieldsEnum!): Float
  nodes: [PrismicCartPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicCartPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicCartPageSortInput {
  fields: [PrismicCartPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicCreateAccountPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicCreateAccountPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicCreateAccountPageConnection {
  distinct(field: PrismicCreateAccountPageFieldsEnum!): [String!]!
  edges: [PrismicCreateAccountPageEdge!]!
  group(field: PrismicCreateAccountPageFieldsEnum!, limit: Int, skip: Int): [PrismicCreateAccountPageGroupConnection!]!
  max(field: PrismicCreateAccountPageFieldsEnum!): Float
  min(field: PrismicCreateAccountPageFieldsEnum!): Float
  nodes: [PrismicCreateAccountPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicCreateAccountPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicCreateAccountPageDataHeroImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicCreateAccountPageDataHeroImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicCreateAccountPageDataType {
  already_account_link: PrismicLinkType
  already_account_text_1: String
  already_account_text_2: String
  back_link: PrismicLinkType
  back_text: String
  button: String
  faq_link: PrismicLinkType
  faq_text: String
  heading: PrismicStructuredTextType
  hero: PrismicCreateAccountPageDataHeroImageType
  intro: String
}

input PrismicCreateAccountPageDataTypeFilterInput {
  already_account_link: PrismicLinkTypeFilterInput
  already_account_text_1: StringQueryOperatorInput
  already_account_text_2: StringQueryOperatorInput
  back_link: PrismicLinkTypeFilterInput
  back_text: StringQueryOperatorInput
  button: StringQueryOperatorInput
  faq_link: PrismicLinkTypeFilterInput
  faq_text: StringQueryOperatorInput
  heading: PrismicStructuredTextTypeFilterInput
  hero: PrismicCreateAccountPageDataHeroImageTypeFilterInput
  intro: StringQueryOperatorInput
}

type PrismicCreateAccountPageEdge {
  next: PrismicCreateAccountPage
  node: PrismicCreateAccountPage!
  previous: PrismicCreateAccountPage
}

enum PrismicCreateAccountPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___already_account_link___id
  data___already_account_link___isBroken
  data___already_account_link___lang
  data___already_account_link___link_type
  data___already_account_link___localFile___absolutePath
  data___already_account_link___localFile___accessTime
  data___already_account_link___localFile___atime
  data___already_account_link___localFile___atimeMs
  data___already_account_link___localFile___base
  data___already_account_link___localFile___birthTime
  data___already_account_link___localFile___birthtime
  data___already_account_link___localFile___birthtimeMs
  data___already_account_link___localFile___blksize
  data___already_account_link___localFile___blocks
  data___already_account_link___localFile___changeTime
  data___already_account_link___localFile___children
  data___already_account_link___localFile___childrenImageSharp
  data___already_account_link___localFile___ctime
  data___already_account_link___localFile___ctimeMs
  data___already_account_link___localFile___dev
  data___already_account_link___localFile___dir
  data___already_account_link___localFile___ext
  data___already_account_link___localFile___extension
  data___already_account_link___localFile___gid
  data___already_account_link___localFile___id
  data___already_account_link___localFile___ino
  data___already_account_link___localFile___mode
  data___already_account_link___localFile___modifiedTime
  data___already_account_link___localFile___mtime
  data___already_account_link___localFile___mtimeMs
  data___already_account_link___localFile___name
  data___already_account_link___localFile___nlink
  data___already_account_link___localFile___prettySize
  data___already_account_link___localFile___publicURL
  data___already_account_link___localFile___rdev
  data___already_account_link___localFile___relativeDirectory
  data___already_account_link___localFile___relativePath
  data___already_account_link___localFile___root
  data___already_account_link___localFile___size
  data___already_account_link___localFile___sourceInstanceName
  data___already_account_link___localFile___uid
  data___already_account_link___raw
  data___already_account_link___size
  data___already_account_link___slug
  data___already_account_link___tags
  data___already_account_link___target
  data___already_account_link___type
  data___already_account_link___uid
  data___already_account_link___url
  data___already_account_text_1
  data___already_account_text_2
  data___back_link___id
  data___back_link___isBroken
  data___back_link___lang
  data___back_link___link_type
  data___back_link___localFile___absolutePath
  data___back_link___localFile___accessTime
  data___back_link___localFile___atime
  data___back_link___localFile___atimeMs
  data___back_link___localFile___base
  data___back_link___localFile___birthTime
  data___back_link___localFile___birthtime
  data___back_link___localFile___birthtimeMs
  data___back_link___localFile___blksize
  data___back_link___localFile___blocks
  data___back_link___localFile___changeTime
  data___back_link___localFile___children
  data___back_link___localFile___childrenImageSharp
  data___back_link___localFile___ctime
  data___back_link___localFile___ctimeMs
  data___back_link___localFile___dev
  data___back_link___localFile___dir
  data___back_link___localFile___ext
  data___back_link___localFile___extension
  data___back_link___localFile___gid
  data___back_link___localFile___id
  data___back_link___localFile___ino
  data___back_link___localFile___mode
  data___back_link___localFile___modifiedTime
  data___back_link___localFile___mtime
  data___back_link___localFile___mtimeMs
  data___back_link___localFile___name
  data___back_link___localFile___nlink
  data___back_link___localFile___prettySize
  data___back_link___localFile___publicURL
  data___back_link___localFile___rdev
  data___back_link___localFile___relativeDirectory
  data___back_link___localFile___relativePath
  data___back_link___localFile___root
  data___back_link___localFile___size
  data___back_link___localFile___sourceInstanceName
  data___back_link___localFile___uid
  data___back_link___raw
  data___back_link___size
  data___back_link___slug
  data___back_link___tags
  data___back_link___target
  data___back_link___type
  data___back_link___uid
  data___back_link___url
  data___back_text
  data___button
  data___faq_link___id
  data___faq_link___isBroken
  data___faq_link___lang
  data___faq_link___link_type
  data___faq_link___localFile___absolutePath
  data___faq_link___localFile___accessTime
  data___faq_link___localFile___atime
  data___faq_link___localFile___atimeMs
  data___faq_link___localFile___base
  data___faq_link___localFile___birthTime
  data___faq_link___localFile___birthtime
  data___faq_link___localFile___birthtimeMs
  data___faq_link___localFile___blksize
  data___faq_link___localFile___blocks
  data___faq_link___localFile___changeTime
  data___faq_link___localFile___children
  data___faq_link___localFile___childrenImageSharp
  data___faq_link___localFile___ctime
  data___faq_link___localFile___ctimeMs
  data___faq_link___localFile___dev
  data___faq_link___localFile___dir
  data___faq_link___localFile___ext
  data___faq_link___localFile___extension
  data___faq_link___localFile___gid
  data___faq_link___localFile___id
  data___faq_link___localFile___ino
  data___faq_link___localFile___mode
  data___faq_link___localFile___modifiedTime
  data___faq_link___localFile___mtime
  data___faq_link___localFile___mtimeMs
  data___faq_link___localFile___name
  data___faq_link___localFile___nlink
  data___faq_link___localFile___prettySize
  data___faq_link___localFile___publicURL
  data___faq_link___localFile___rdev
  data___faq_link___localFile___relativeDirectory
  data___faq_link___localFile___relativePath
  data___faq_link___localFile___root
  data___faq_link___localFile___size
  data___faq_link___localFile___sourceInstanceName
  data___faq_link___localFile___uid
  data___faq_link___raw
  data___faq_link___size
  data___faq_link___slug
  data___faq_link___tags
  data___faq_link___target
  data___faq_link___type
  data___faq_link___uid
  data___faq_link___url
  data___faq_text
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___hero___alt
  data___hero___copyright
  data___hero___dimensions___height
  data___hero___dimensions___width
  data___hero___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___localFile___absolutePath
  data___hero___localFile___accessTime
  data___hero___localFile___atime
  data___hero___localFile___atimeMs
  data___hero___localFile___base
  data___hero___localFile___birthTime
  data___hero___localFile___birthtime
  data___hero___localFile___birthtimeMs
  data___hero___localFile___blksize
  data___hero___localFile___blocks
  data___hero___localFile___changeTime
  data___hero___localFile___children
  data___hero___localFile___childrenImageSharp
  data___hero___localFile___ctime
  data___hero___localFile___ctimeMs
  data___hero___localFile___dev
  data___hero___localFile___dir
  data___hero___localFile___ext
  data___hero___localFile___extension
  data___hero___localFile___gid
  data___hero___localFile___id
  data___hero___localFile___ino
  data___hero___localFile___mode
  data___hero___localFile___modifiedTime
  data___hero___localFile___mtime
  data___hero___localFile___mtimeMs
  data___hero___localFile___name
  data___hero___localFile___nlink
  data___hero___localFile___prettySize
  data___hero___localFile___publicURL
  data___hero___localFile___rdev
  data___hero___localFile___relativeDirectory
  data___hero___localFile___relativePath
  data___hero___localFile___root
  data___hero___localFile___size
  data___hero___localFile___sourceInstanceName
  data___hero___localFile___uid
  data___hero___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___intro
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicCreateAccountPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicCreateAccountPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicCreateAccountPageGroupConnection {
  distinct(field: PrismicCreateAccountPageFieldsEnum!): [String!]!
  edges: [PrismicCreateAccountPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicCreateAccountPageFieldsEnum!, limit: Int, skip: Int): [PrismicCreateAccountPageGroupConnection!]!
  max(field: PrismicCreateAccountPageFieldsEnum!): Float
  min(field: PrismicCreateAccountPageFieldsEnum!): Float
  nodes: [PrismicCreateAccountPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicCreateAccountPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicCreateAccountPageSortInput {
  fields: [PrismicCreateAccountPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicDownloadAppSection implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicDownloadAppSectionDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicDownloadAppSectionConnection {
  distinct(field: PrismicDownloadAppSectionFieldsEnum!): [String!]!
  edges: [PrismicDownloadAppSectionEdge!]!
  group(field: PrismicDownloadAppSectionFieldsEnum!, limit: Int, skip: Int): [PrismicDownloadAppSectionGroupConnection!]!
  max(field: PrismicDownloadAppSectionFieldsEnum!): Float
  min(field: PrismicDownloadAppSectionFieldsEnum!): Float
  nodes: [PrismicDownloadAppSection!]!
  pageInfo: PageInfo!
  sum(field: PrismicDownloadAppSectionFieldsEnum!): Float
  totalCount: Int!
}

type PrismicDownloadAppSectionDataType {
  heading: PrismicStructuredTextType
  learn_more_label: String
  learn_more_link: PrismicLinkType
  text: PrismicStructuredTextType
}

input PrismicDownloadAppSectionDataTypeFilterInput {
  heading: PrismicStructuredTextTypeFilterInput
  learn_more_label: StringQueryOperatorInput
  learn_more_link: PrismicLinkTypeFilterInput
  text: PrismicStructuredTextTypeFilterInput
}

type PrismicDownloadAppSectionEdge {
  next: PrismicDownloadAppSection
  node: PrismicDownloadAppSection!
  previous: PrismicDownloadAppSection
}

enum PrismicDownloadAppSectionFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___learn_more_label
  data___learn_more_link___id
  data___learn_more_link___isBroken
  data___learn_more_link___lang
  data___learn_more_link___link_type
  data___learn_more_link___localFile___absolutePath
  data___learn_more_link___localFile___accessTime
  data___learn_more_link___localFile___atime
  data___learn_more_link___localFile___atimeMs
  data___learn_more_link___localFile___base
  data___learn_more_link___localFile___birthTime
  data___learn_more_link___localFile___birthtime
  data___learn_more_link___localFile___birthtimeMs
  data___learn_more_link___localFile___blksize
  data___learn_more_link___localFile___blocks
  data___learn_more_link___localFile___changeTime
  data___learn_more_link___localFile___children
  data___learn_more_link___localFile___childrenImageSharp
  data___learn_more_link___localFile___ctime
  data___learn_more_link___localFile___ctimeMs
  data___learn_more_link___localFile___dev
  data___learn_more_link___localFile___dir
  data___learn_more_link___localFile___ext
  data___learn_more_link___localFile___extension
  data___learn_more_link___localFile___gid
  data___learn_more_link___localFile___id
  data___learn_more_link___localFile___ino
  data___learn_more_link___localFile___mode
  data___learn_more_link___localFile___modifiedTime
  data___learn_more_link___localFile___mtime
  data___learn_more_link___localFile___mtimeMs
  data___learn_more_link___localFile___name
  data___learn_more_link___localFile___nlink
  data___learn_more_link___localFile___prettySize
  data___learn_more_link___localFile___publicURL
  data___learn_more_link___localFile___rdev
  data___learn_more_link___localFile___relativeDirectory
  data___learn_more_link___localFile___relativePath
  data___learn_more_link___localFile___root
  data___learn_more_link___localFile___size
  data___learn_more_link___localFile___sourceInstanceName
  data___learn_more_link___localFile___uid
  data___learn_more_link___raw
  data___learn_more_link___size
  data___learn_more_link___slug
  data___learn_more_link___tags
  data___learn_more_link___target
  data___learn_more_link___type
  data___learn_more_link___uid
  data___learn_more_link___url
  data___text___html
  data___text___raw
  data___text___richText
  data___text___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicDownloadAppSectionFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicDownloadAppSectionDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicDownloadAppSectionGroupConnection {
  distinct(field: PrismicDownloadAppSectionFieldsEnum!): [String!]!
  edges: [PrismicDownloadAppSectionEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicDownloadAppSectionFieldsEnum!, limit: Int, skip: Int): [PrismicDownloadAppSectionGroupConnection!]!
  max(field: PrismicDownloadAppSectionFieldsEnum!): Float
  min(field: PrismicDownloadAppSectionFieldsEnum!): Float
  nodes: [PrismicDownloadAppSection!]!
  pageInfo: PageInfo!
  sum(field: PrismicDownloadAppSectionFieldsEnum!): Float
  totalCount: Int!
}

input PrismicDownloadAppSectionSortInput {
  fields: [PrismicDownloadAppSectionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicEmbedType implements Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type PrismicEmbedTypeConnection {
  distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
  edges: [PrismicEmbedTypeEdge!]!
  group(field: PrismicEmbedTypeFieldsEnum!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
  max(field: PrismicEmbedTypeFieldsEnum!): Float
  min(field: PrismicEmbedTypeFieldsEnum!): Float
  nodes: [PrismicEmbedType!]!
  pageInfo: PageInfo!
  sum(field: PrismicEmbedTypeFieldsEnum!): Float
  totalCount: Int!
}

type PrismicEmbedTypeEdge {
  next: PrismicEmbedType
  node: PrismicEmbedType!
  previous: PrismicEmbedType
}

enum PrismicEmbedTypeFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
}

input PrismicEmbedTypeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

type PrismicEmbedTypeGroupConnection {
  distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
  edges: [PrismicEmbedTypeEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicEmbedTypeFieldsEnum!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
  max(field: PrismicEmbedTypeFieldsEnum!): Float
  min(field: PrismicEmbedTypeFieldsEnum!): Float
  nodes: [PrismicEmbedType!]!
  pageInfo: PageInfo!
  sum(field: PrismicEmbedTypeFieldsEnum!): Float
  totalCount: Int!
}

input PrismicEmbedTypeSortInput {
  fields: [PrismicEmbedTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicFaqSection implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicFaqSectionDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicFaqSectionConnection {
  distinct(field: PrismicFaqSectionFieldsEnum!): [String!]!
  edges: [PrismicFaqSectionEdge!]!
  group(field: PrismicFaqSectionFieldsEnum!, limit: Int, skip: Int): [PrismicFaqSectionGroupConnection!]!
  max(field: PrismicFaqSectionFieldsEnum!): Float
  min(field: PrismicFaqSectionFieldsEnum!): Float
  nodes: [PrismicFaqSection!]!
  pageInfo: PageInfo!
  sum(field: PrismicFaqSectionFieldsEnum!): Float
  totalCount: Int!
}

type PrismicFaqSectionDataType {
  heading: String
  link: PrismicLinkType
  text: String
}

input PrismicFaqSectionDataTypeFilterInput {
  heading: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
  text: StringQueryOperatorInput
}

type PrismicFaqSectionEdge {
  next: PrismicFaqSection
  node: PrismicFaqSection!
  previous: PrismicFaqSection
}

enum PrismicFaqSectionFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___heading
  data___link___id
  data___link___isBroken
  data___link___lang
  data___link___link_type
  data___link___localFile___absolutePath
  data___link___localFile___accessTime
  data___link___localFile___atime
  data___link___localFile___atimeMs
  data___link___localFile___base
  data___link___localFile___birthTime
  data___link___localFile___birthtime
  data___link___localFile___birthtimeMs
  data___link___localFile___blksize
  data___link___localFile___blocks
  data___link___localFile___changeTime
  data___link___localFile___children
  data___link___localFile___childrenImageSharp
  data___link___localFile___ctime
  data___link___localFile___ctimeMs
  data___link___localFile___dev
  data___link___localFile___dir
  data___link___localFile___ext
  data___link___localFile___extension
  data___link___localFile___gid
  data___link___localFile___id
  data___link___localFile___ino
  data___link___localFile___mode
  data___link___localFile___modifiedTime
  data___link___localFile___mtime
  data___link___localFile___mtimeMs
  data___link___localFile___name
  data___link___localFile___nlink
  data___link___localFile___prettySize
  data___link___localFile___publicURL
  data___link___localFile___rdev
  data___link___localFile___relativeDirectory
  data___link___localFile___relativePath
  data___link___localFile___root
  data___link___localFile___size
  data___link___localFile___sourceInstanceName
  data___link___localFile___uid
  data___link___raw
  data___link___size
  data___link___slug
  data___link___tags
  data___link___target
  data___link___type
  data___link___uid
  data___link___url
  data___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicFaqSectionFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicFaqSectionDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicFaqSectionGroupConnection {
  distinct(field: PrismicFaqSectionFieldsEnum!): [String!]!
  edges: [PrismicFaqSectionEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicFaqSectionFieldsEnum!, limit: Int, skip: Int): [PrismicFaqSectionGroupConnection!]!
  max(field: PrismicFaqSectionFieldsEnum!): Float
  min(field: PrismicFaqSectionFieldsEnum!): Float
  nodes: [PrismicFaqSection!]!
  pageInfo: PageInfo!
  sum(field: PrismicFaqSectionFieldsEnum!): Float
  totalCount: Int!
}

input PrismicFaqSectionSortInput {
  fields: [PrismicFaqSectionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicGeoPointType {
  latitude: Float!
  longitude: Float!
}

type PrismicHeddaPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicHeddaPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicHeddaPageConnection {
  distinct(field: PrismicHeddaPageFieldsEnum!): [String!]!
  edges: [PrismicHeddaPageEdge!]!
  group(field: PrismicHeddaPageFieldsEnum!, limit: Int, skip: Int): [PrismicHeddaPageGroupConnection!]!
  max(field: PrismicHeddaPageFieldsEnum!): Float
  min(field: PrismicHeddaPageFieldsEnum!): Float
  nodes: [PrismicHeddaPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicHeddaPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicHeddaPageDataBody1HorizontalSection implements PrismicSliceType {
  id: ID!
  items: [PrismicHeddaPageDataBody1HorizontalSectionItem!]!
  slice_label: String
  slice_type: String!
}

type PrismicHeddaPageDataBody1HorizontalSectionItem {
  heading: PrismicStructuredTextType
  image: PrismicHeddaPageDataBody1HorizontalSectionItemsImageImageType
  text: PrismicStructuredTextType
  text_background: PrismicHeddaPageDataBody1HorizontalSectionItemsTextBackgroundImageType
}

type PrismicHeddaPageDataBody1HorizontalSectionItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHeddaPageDataBody1HorizontalSectionItemsTextBackgroundImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

union PrismicHeddaPageDataBody1SlicesType = PrismicHeddaPageDataBody1HorizontalSection

type PrismicHeddaPageDataBody2HorizontalSection implements PrismicSliceType {
  id: ID!
  items: [PrismicHeddaPageDataBody2HorizontalSectionItem!]!
  slice_label: String
  slice_type: String!
}

type PrismicHeddaPageDataBody2HorizontalSectionItem {
  heading: PrismicStructuredTextType
  image: PrismicHeddaPageDataBody2HorizontalSectionItemsImageImageType
  text: PrismicStructuredTextType
  text_background: PrismicHeddaPageDataBody2HorizontalSectionItemsTextBackgroundImageType
}

type PrismicHeddaPageDataBody2HorizontalSectionItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHeddaPageDataBody2HorizontalSectionItemsTextBackgroundImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

union PrismicHeddaPageDataBody2SlicesType = PrismicHeddaPageDataBody2HorizontalSection

type PrismicHeddaPageDataBodyHorizontalSection implements PrismicSliceType {
  id: ID!
  items: [PrismicHeddaPageDataBodyHorizontalSectionItem!]!
  slice_label: String
  slice_type: String!
}

type PrismicHeddaPageDataBodyHorizontalSectionItem {
  heading: PrismicStructuredTextType
  image: PrismicHeddaPageDataBodyHorizontalSectionItemsImageImageType
  text: PrismicStructuredTextType
  text_background: PrismicHeddaPageDataBodyHorizontalSectionItemsTextBackgroundImageType
}

type PrismicHeddaPageDataBodyHorizontalSectionItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHeddaPageDataBodyHorizontalSectionItemsTextBackgroundImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

union PrismicHeddaPageDataBodySlicesType = PrismicHeddaPageDataBodyHorizontalSection

type PrismicHeddaPageDataEngagementsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHeddaPageDataEngagementsImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHeddaPageDataEngagementsList {
  list_item: PrismicStructuredTextType
}

input PrismicHeddaPageDataEngagementsListFilterInput {
  list_item: PrismicStructuredTextTypeFilterInput
}

input PrismicHeddaPageDataEngagementsListFilterListInput {
  elemMatch: PrismicHeddaPageDataEngagementsListFilterInput
}

type PrismicHeddaPageDataHeroLeftImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHeddaPageDataHeroLeftImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHeddaPageDataHeroRightImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHeddaPageDataHeroRightImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHeddaPageDataSupplementsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHeddaPageDataSupplementsImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHeddaPageDataSupplementsList {
  list_item: PrismicStructuredTextType
}

input PrismicHeddaPageDataSupplementsListFilterInput {
  list_item: PrismicStructuredTextTypeFilterInput
}

input PrismicHeddaPageDataSupplementsListFilterListInput {
  elemMatch: PrismicHeddaPageDataSupplementsListFilterInput
}

type PrismicHeddaPageDataSupplementsListImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHeddaPageDataSupplementsListImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHeddaPageDataType {
  body: [PrismicHeddaPageDataBodySlicesType!]!
  body1: [PrismicHeddaPageDataBody1SlicesType!]!
  body2: [PrismicHeddaPageDataBody2SlicesType!]!
  engagements_button_text: PrismicStructuredTextType
  engagements_heading: PrismicStructuredTextType
  engagements_highlighted_words: String
  engagements_image: PrismicHeddaPageDataEngagementsImageImageType
  engagements_list: [PrismicHeddaPageDataEngagementsList]
  engagements_list_heading: PrismicStructuredTextType
  engagements_slug: String
  engagements_subtitle: PrismicStructuredTextType
  hero_heading: PrismicStructuredTextType
  hero_highlighted_words: String
  hero_left_image: PrismicHeddaPageDataHeroLeftImageImageType
  hero_right_image: PrismicHeddaPageDataHeroRightImageImageType
  hero_text: PrismicStructuredTextType
  seo_description: String
  seo_title: String
  supplements_button_text: PrismicStructuredTextType
  supplements_heading: PrismicStructuredTextType
  supplements_image: PrismicHeddaPageDataSupplementsImageImageType
  supplements_list: [PrismicHeddaPageDataSupplementsList]
  supplements_list_heading: PrismicStructuredTextType
  supplements_list_image: PrismicHeddaPageDataSupplementsListImageImageType
  supplements_slug: String
  supplements_subtitle: PrismicStructuredTextType
  title: String
  who_we_are_button_text: PrismicStructuredTextType
  who_we_are_heading: PrismicStructuredTextType
  who_we_are_highlighted_words: String
  who_we_are_left_image: PrismicHeddaPageDataWhoWeAreLeftImageImageType
  who_we_are_list: [PrismicHeddaPageDataWhoWeAreList]
  who_we_are_list_title: PrismicStructuredTextType
  who_we_are_right_image: PrismicHeddaPageDataWhoWeAreRightImageImageType
  who_we_are_slug: String
  who_we_are_subtitle: PrismicStructuredTextType
}

input PrismicHeddaPageDataTypeFilterInput {
  engagements_button_text: PrismicStructuredTextTypeFilterInput
  engagements_heading: PrismicStructuredTextTypeFilterInput
  engagements_highlighted_words: StringQueryOperatorInput
  engagements_image: PrismicHeddaPageDataEngagementsImageImageTypeFilterInput
  engagements_list: PrismicHeddaPageDataEngagementsListFilterListInput
  engagements_list_heading: PrismicStructuredTextTypeFilterInput
  engagements_slug: StringQueryOperatorInput
  engagements_subtitle: PrismicStructuredTextTypeFilterInput
  hero_heading: PrismicStructuredTextTypeFilterInput
  hero_highlighted_words: StringQueryOperatorInput
  hero_left_image: PrismicHeddaPageDataHeroLeftImageImageTypeFilterInput
  hero_right_image: PrismicHeddaPageDataHeroRightImageImageTypeFilterInput
  hero_text: PrismicStructuredTextTypeFilterInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  supplements_button_text: PrismicStructuredTextTypeFilterInput
  supplements_heading: PrismicStructuredTextTypeFilterInput
  supplements_image: PrismicHeddaPageDataSupplementsImageImageTypeFilterInput
  supplements_list: PrismicHeddaPageDataSupplementsListFilterListInput
  supplements_list_heading: PrismicStructuredTextTypeFilterInput
  supplements_list_image: PrismicHeddaPageDataSupplementsListImageImageTypeFilterInput
  supplements_slug: StringQueryOperatorInput
  supplements_subtitle: PrismicStructuredTextTypeFilterInput
  title: StringQueryOperatorInput
  who_we_are_button_text: PrismicStructuredTextTypeFilterInput
  who_we_are_heading: PrismicStructuredTextTypeFilterInput
  who_we_are_highlighted_words: StringQueryOperatorInput
  who_we_are_left_image: PrismicHeddaPageDataWhoWeAreLeftImageImageTypeFilterInput
  who_we_are_list: PrismicHeddaPageDataWhoWeAreListFilterListInput
  who_we_are_list_title: PrismicStructuredTextTypeFilterInput
  who_we_are_right_image: PrismicHeddaPageDataWhoWeAreRightImageImageTypeFilterInput
  who_we_are_slug: StringQueryOperatorInput
  who_we_are_subtitle: PrismicStructuredTextTypeFilterInput
}

type PrismicHeddaPageDataWhoWeAreLeftImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHeddaPageDataWhoWeAreLeftImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHeddaPageDataWhoWeAreList {
  list_item: PrismicStructuredTextType
}

input PrismicHeddaPageDataWhoWeAreListFilterInput {
  list_item: PrismicStructuredTextTypeFilterInput
}

input PrismicHeddaPageDataWhoWeAreListFilterListInput {
  elemMatch: PrismicHeddaPageDataWhoWeAreListFilterInput
}

type PrismicHeddaPageDataWhoWeAreRightImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHeddaPageDataWhoWeAreRightImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHeddaPageEdge {
  next: PrismicHeddaPage
  node: PrismicHeddaPage!
  previous: PrismicHeddaPage
}

enum PrismicHeddaPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___engagements_button_text___html
  data___engagements_button_text___raw
  data___engagements_button_text___richText
  data___engagements_button_text___text
  data___engagements_heading___html
  data___engagements_heading___raw
  data___engagements_heading___richText
  data___engagements_heading___text
  data___engagements_highlighted_words
  data___engagements_image___alt
  data___engagements_image___copyright
  data___engagements_image___dimensions___height
  data___engagements_image___dimensions___width
  data___engagements_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_image___localFile___absolutePath
  data___engagements_image___localFile___accessTime
  data___engagements_image___localFile___atime
  data___engagements_image___localFile___atimeMs
  data___engagements_image___localFile___base
  data___engagements_image___localFile___birthTime
  data___engagements_image___localFile___birthtime
  data___engagements_image___localFile___birthtimeMs
  data___engagements_image___localFile___blksize
  data___engagements_image___localFile___blocks
  data___engagements_image___localFile___changeTime
  data___engagements_image___localFile___children
  data___engagements_image___localFile___childrenImageSharp
  data___engagements_image___localFile___ctime
  data___engagements_image___localFile___ctimeMs
  data___engagements_image___localFile___dev
  data___engagements_image___localFile___dir
  data___engagements_image___localFile___ext
  data___engagements_image___localFile___extension
  data___engagements_image___localFile___gid
  data___engagements_image___localFile___id
  data___engagements_image___localFile___ino
  data___engagements_image___localFile___mode
  data___engagements_image___localFile___modifiedTime
  data___engagements_image___localFile___mtime
  data___engagements_image___localFile___mtimeMs
  data___engagements_image___localFile___name
  data___engagements_image___localFile___nlink
  data___engagements_image___localFile___prettySize
  data___engagements_image___localFile___publicURL
  data___engagements_image___localFile___rdev
  data___engagements_image___localFile___relativeDirectory
  data___engagements_image___localFile___relativePath
  data___engagements_image___localFile___root
  data___engagements_image___localFile___size
  data___engagements_image___localFile___sourceInstanceName
  data___engagements_image___localFile___uid
  data___engagements_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___engagements_list
  data___engagements_list___list_item___html
  data___engagements_list___list_item___raw
  data___engagements_list___list_item___richText
  data___engagements_list___list_item___text
  data___engagements_list_heading___html
  data___engagements_list_heading___raw
  data___engagements_list_heading___richText
  data___engagements_list_heading___text
  data___engagements_slug
  data___engagements_subtitle___html
  data___engagements_subtitle___raw
  data___engagements_subtitle___richText
  data___engagements_subtitle___text
  data___hero_heading___html
  data___hero_heading___raw
  data___hero_heading___richText
  data___hero_heading___text
  data___hero_highlighted_words
  data___hero_left_image___alt
  data___hero_left_image___copyright
  data___hero_left_image___dimensions___height
  data___hero_left_image___dimensions___width
  data___hero_left_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_left_image___localFile___absolutePath
  data___hero_left_image___localFile___accessTime
  data___hero_left_image___localFile___atime
  data___hero_left_image___localFile___atimeMs
  data___hero_left_image___localFile___base
  data___hero_left_image___localFile___birthTime
  data___hero_left_image___localFile___birthtime
  data___hero_left_image___localFile___birthtimeMs
  data___hero_left_image___localFile___blksize
  data___hero_left_image___localFile___blocks
  data___hero_left_image___localFile___changeTime
  data___hero_left_image___localFile___children
  data___hero_left_image___localFile___childrenImageSharp
  data___hero_left_image___localFile___ctime
  data___hero_left_image___localFile___ctimeMs
  data___hero_left_image___localFile___dev
  data___hero_left_image___localFile___dir
  data___hero_left_image___localFile___ext
  data___hero_left_image___localFile___extension
  data___hero_left_image___localFile___gid
  data___hero_left_image___localFile___id
  data___hero_left_image___localFile___ino
  data___hero_left_image___localFile___mode
  data___hero_left_image___localFile___modifiedTime
  data___hero_left_image___localFile___mtime
  data___hero_left_image___localFile___mtimeMs
  data___hero_left_image___localFile___name
  data___hero_left_image___localFile___nlink
  data___hero_left_image___localFile___prettySize
  data___hero_left_image___localFile___publicURL
  data___hero_left_image___localFile___rdev
  data___hero_left_image___localFile___relativeDirectory
  data___hero_left_image___localFile___relativePath
  data___hero_left_image___localFile___root
  data___hero_left_image___localFile___size
  data___hero_left_image___localFile___sourceInstanceName
  data___hero_left_image___localFile___uid
  data___hero_left_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___alt
  data___hero_right_image___copyright
  data___hero_right_image___dimensions___height
  data___hero_right_image___dimensions___width
  data___hero_right_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_right_image___localFile___absolutePath
  data___hero_right_image___localFile___accessTime
  data___hero_right_image___localFile___atime
  data___hero_right_image___localFile___atimeMs
  data___hero_right_image___localFile___base
  data___hero_right_image___localFile___birthTime
  data___hero_right_image___localFile___birthtime
  data___hero_right_image___localFile___birthtimeMs
  data___hero_right_image___localFile___blksize
  data___hero_right_image___localFile___blocks
  data___hero_right_image___localFile___changeTime
  data___hero_right_image___localFile___children
  data___hero_right_image___localFile___childrenImageSharp
  data___hero_right_image___localFile___ctime
  data___hero_right_image___localFile___ctimeMs
  data___hero_right_image___localFile___dev
  data___hero_right_image___localFile___dir
  data___hero_right_image___localFile___ext
  data___hero_right_image___localFile___extension
  data___hero_right_image___localFile___gid
  data___hero_right_image___localFile___id
  data___hero_right_image___localFile___ino
  data___hero_right_image___localFile___mode
  data___hero_right_image___localFile___modifiedTime
  data___hero_right_image___localFile___mtime
  data___hero_right_image___localFile___mtimeMs
  data___hero_right_image___localFile___name
  data___hero_right_image___localFile___nlink
  data___hero_right_image___localFile___prettySize
  data___hero_right_image___localFile___publicURL
  data___hero_right_image___localFile___rdev
  data___hero_right_image___localFile___relativeDirectory
  data___hero_right_image___localFile___relativePath
  data___hero_right_image___localFile___root
  data___hero_right_image___localFile___size
  data___hero_right_image___localFile___sourceInstanceName
  data___hero_right_image___localFile___uid
  data___hero_right_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_text___html
  data___hero_text___raw
  data___hero_text___richText
  data___hero_text___text
  data___seo_description
  data___seo_title
  data___supplements_button_text___html
  data___supplements_button_text___raw
  data___supplements_button_text___richText
  data___supplements_button_text___text
  data___supplements_heading___html
  data___supplements_heading___raw
  data___supplements_heading___richText
  data___supplements_heading___text
  data___supplements_image___alt
  data___supplements_image___copyright
  data___supplements_image___dimensions___height
  data___supplements_image___dimensions___width
  data___supplements_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_image___localFile___absolutePath
  data___supplements_image___localFile___accessTime
  data___supplements_image___localFile___atime
  data___supplements_image___localFile___atimeMs
  data___supplements_image___localFile___base
  data___supplements_image___localFile___birthTime
  data___supplements_image___localFile___birthtime
  data___supplements_image___localFile___birthtimeMs
  data___supplements_image___localFile___blksize
  data___supplements_image___localFile___blocks
  data___supplements_image___localFile___changeTime
  data___supplements_image___localFile___children
  data___supplements_image___localFile___childrenImageSharp
  data___supplements_image___localFile___ctime
  data___supplements_image___localFile___ctimeMs
  data___supplements_image___localFile___dev
  data___supplements_image___localFile___dir
  data___supplements_image___localFile___ext
  data___supplements_image___localFile___extension
  data___supplements_image___localFile___gid
  data___supplements_image___localFile___id
  data___supplements_image___localFile___ino
  data___supplements_image___localFile___mode
  data___supplements_image___localFile___modifiedTime
  data___supplements_image___localFile___mtime
  data___supplements_image___localFile___mtimeMs
  data___supplements_image___localFile___name
  data___supplements_image___localFile___nlink
  data___supplements_image___localFile___prettySize
  data___supplements_image___localFile___publicURL
  data___supplements_image___localFile___rdev
  data___supplements_image___localFile___relativeDirectory
  data___supplements_image___localFile___relativePath
  data___supplements_image___localFile___root
  data___supplements_image___localFile___size
  data___supplements_image___localFile___sourceInstanceName
  data___supplements_image___localFile___uid
  data___supplements_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list
  data___supplements_list___list_item___html
  data___supplements_list___list_item___raw
  data___supplements_list___list_item___richText
  data___supplements_list___list_item___text
  data___supplements_list_heading___html
  data___supplements_list_heading___raw
  data___supplements_list_heading___richText
  data___supplements_list_heading___text
  data___supplements_list_image___alt
  data___supplements_list_image___copyright
  data___supplements_list_image___dimensions___height
  data___supplements_list_image___dimensions___width
  data___supplements_list_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_list_image___localFile___absolutePath
  data___supplements_list_image___localFile___accessTime
  data___supplements_list_image___localFile___atime
  data___supplements_list_image___localFile___atimeMs
  data___supplements_list_image___localFile___base
  data___supplements_list_image___localFile___birthTime
  data___supplements_list_image___localFile___birthtime
  data___supplements_list_image___localFile___birthtimeMs
  data___supplements_list_image___localFile___blksize
  data___supplements_list_image___localFile___blocks
  data___supplements_list_image___localFile___changeTime
  data___supplements_list_image___localFile___children
  data___supplements_list_image___localFile___childrenImageSharp
  data___supplements_list_image___localFile___ctime
  data___supplements_list_image___localFile___ctimeMs
  data___supplements_list_image___localFile___dev
  data___supplements_list_image___localFile___dir
  data___supplements_list_image___localFile___ext
  data___supplements_list_image___localFile___extension
  data___supplements_list_image___localFile___gid
  data___supplements_list_image___localFile___id
  data___supplements_list_image___localFile___ino
  data___supplements_list_image___localFile___mode
  data___supplements_list_image___localFile___modifiedTime
  data___supplements_list_image___localFile___mtime
  data___supplements_list_image___localFile___mtimeMs
  data___supplements_list_image___localFile___name
  data___supplements_list_image___localFile___nlink
  data___supplements_list_image___localFile___prettySize
  data___supplements_list_image___localFile___publicURL
  data___supplements_list_image___localFile___rdev
  data___supplements_list_image___localFile___relativeDirectory
  data___supplements_list_image___localFile___relativePath
  data___supplements_list_image___localFile___root
  data___supplements_list_image___localFile___size
  data___supplements_list_image___localFile___sourceInstanceName
  data___supplements_list_image___localFile___uid
  data___supplements_list_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___supplements_slug
  data___supplements_subtitle___html
  data___supplements_subtitle___raw
  data___supplements_subtitle___richText
  data___supplements_subtitle___text
  data___title
  data___who_we_are_button_text___html
  data___who_we_are_button_text___raw
  data___who_we_are_button_text___richText
  data___who_we_are_button_text___text
  data___who_we_are_heading___html
  data___who_we_are_heading___raw
  data___who_we_are_heading___richText
  data___who_we_are_heading___text
  data___who_we_are_highlighted_words
  data___who_we_are_left_image___alt
  data___who_we_are_left_image___copyright
  data___who_we_are_left_image___dimensions___height
  data___who_we_are_left_image___dimensions___width
  data___who_we_are_left_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_left_image___localFile___absolutePath
  data___who_we_are_left_image___localFile___accessTime
  data___who_we_are_left_image___localFile___atime
  data___who_we_are_left_image___localFile___atimeMs
  data___who_we_are_left_image___localFile___base
  data___who_we_are_left_image___localFile___birthTime
  data___who_we_are_left_image___localFile___birthtime
  data___who_we_are_left_image___localFile___birthtimeMs
  data___who_we_are_left_image___localFile___blksize
  data___who_we_are_left_image___localFile___blocks
  data___who_we_are_left_image___localFile___changeTime
  data___who_we_are_left_image___localFile___children
  data___who_we_are_left_image___localFile___childrenImageSharp
  data___who_we_are_left_image___localFile___ctime
  data___who_we_are_left_image___localFile___ctimeMs
  data___who_we_are_left_image___localFile___dev
  data___who_we_are_left_image___localFile___dir
  data___who_we_are_left_image___localFile___ext
  data___who_we_are_left_image___localFile___extension
  data___who_we_are_left_image___localFile___gid
  data___who_we_are_left_image___localFile___id
  data___who_we_are_left_image___localFile___ino
  data___who_we_are_left_image___localFile___mode
  data___who_we_are_left_image___localFile___modifiedTime
  data___who_we_are_left_image___localFile___mtime
  data___who_we_are_left_image___localFile___mtimeMs
  data___who_we_are_left_image___localFile___name
  data___who_we_are_left_image___localFile___nlink
  data___who_we_are_left_image___localFile___prettySize
  data___who_we_are_left_image___localFile___publicURL
  data___who_we_are_left_image___localFile___rdev
  data___who_we_are_left_image___localFile___relativeDirectory
  data___who_we_are_left_image___localFile___relativePath
  data___who_we_are_left_image___localFile___root
  data___who_we_are_left_image___localFile___size
  data___who_we_are_left_image___localFile___sourceInstanceName
  data___who_we_are_left_image___localFile___uid
  data___who_we_are_left_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_list
  data___who_we_are_list___list_item___html
  data___who_we_are_list___list_item___raw
  data___who_we_are_list___list_item___richText
  data___who_we_are_list___list_item___text
  data___who_we_are_list_title___html
  data___who_we_are_list_title___raw
  data___who_we_are_list_title___richText
  data___who_we_are_list_title___text
  data___who_we_are_right_image___alt
  data___who_we_are_right_image___copyright
  data___who_we_are_right_image___dimensions___height
  data___who_we_are_right_image___dimensions___width
  data___who_we_are_right_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_right_image___localFile___absolutePath
  data___who_we_are_right_image___localFile___accessTime
  data___who_we_are_right_image___localFile___atime
  data___who_we_are_right_image___localFile___atimeMs
  data___who_we_are_right_image___localFile___base
  data___who_we_are_right_image___localFile___birthTime
  data___who_we_are_right_image___localFile___birthtime
  data___who_we_are_right_image___localFile___birthtimeMs
  data___who_we_are_right_image___localFile___blksize
  data___who_we_are_right_image___localFile___blocks
  data___who_we_are_right_image___localFile___changeTime
  data___who_we_are_right_image___localFile___children
  data___who_we_are_right_image___localFile___childrenImageSharp
  data___who_we_are_right_image___localFile___ctime
  data___who_we_are_right_image___localFile___ctimeMs
  data___who_we_are_right_image___localFile___dev
  data___who_we_are_right_image___localFile___dir
  data___who_we_are_right_image___localFile___ext
  data___who_we_are_right_image___localFile___extension
  data___who_we_are_right_image___localFile___gid
  data___who_we_are_right_image___localFile___id
  data___who_we_are_right_image___localFile___ino
  data___who_we_are_right_image___localFile___mode
  data___who_we_are_right_image___localFile___modifiedTime
  data___who_we_are_right_image___localFile___mtime
  data___who_we_are_right_image___localFile___mtimeMs
  data___who_we_are_right_image___localFile___name
  data___who_we_are_right_image___localFile___nlink
  data___who_we_are_right_image___localFile___prettySize
  data___who_we_are_right_image___localFile___publicURL
  data___who_we_are_right_image___localFile___rdev
  data___who_we_are_right_image___localFile___relativeDirectory
  data___who_we_are_right_image___localFile___relativePath
  data___who_we_are_right_image___localFile___root
  data___who_we_are_right_image___localFile___size
  data___who_we_are_right_image___localFile___sourceInstanceName
  data___who_we_are_right_image___localFile___uid
  data___who_we_are_right_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___who_we_are_slug
  data___who_we_are_subtitle___html
  data___who_we_are_subtitle___raw
  data___who_we_are_subtitle___richText
  data___who_we_are_subtitle___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicHeddaPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicHeddaPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicHeddaPageGroupConnection {
  distinct(field: PrismicHeddaPageFieldsEnum!): [String!]!
  edges: [PrismicHeddaPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicHeddaPageFieldsEnum!, limit: Int, skip: Int): [PrismicHeddaPageGroupConnection!]!
  max(field: PrismicHeddaPageFieldsEnum!): Float
  min(field: PrismicHeddaPageFieldsEnum!): Float
  nodes: [PrismicHeddaPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicHeddaPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicHeddaPageSortInput {
  fields: [PrismicHeddaPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicHelpCategory implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicHelpCategoryDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicHelpCategoryConnection {
  distinct(field: PrismicHelpCategoryFieldsEnum!): [String!]!
  edges: [PrismicHelpCategoryEdge!]!
  group(field: PrismicHelpCategoryFieldsEnum!, limit: Int, skip: Int): [PrismicHelpCategoryGroupConnection!]!
  max(field: PrismicHelpCategoryFieldsEnum!): Float
  min(field: PrismicHelpCategoryFieldsEnum!): Float
  nodes: [PrismicHelpCategory!]!
  pageInfo: PageInfo!
  sum(field: PrismicHelpCategoryFieldsEnum!): Float
  totalCount: Int!
}

type PrismicHelpCategoryDataType {
  icon: String
  name: String
}

input PrismicHelpCategoryDataTypeFilterInput {
  icon: StringQueryOperatorInput
  name: StringQueryOperatorInput
}

type PrismicHelpCategoryEdge {
  next: PrismicHelpCategory
  node: PrismicHelpCategory!
  previous: PrismicHelpCategory
}

enum PrismicHelpCategoryFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___icon
  data___name
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicHelpCategoryFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicHelpCategoryDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicHelpCategoryGroupConnection {
  distinct(field: PrismicHelpCategoryFieldsEnum!): [String!]!
  edges: [PrismicHelpCategoryEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicHelpCategoryFieldsEnum!, limit: Int, skip: Int): [PrismicHelpCategoryGroupConnection!]!
  max(field: PrismicHelpCategoryFieldsEnum!): Float
  min(field: PrismicHelpCategoryFieldsEnum!): Float
  nodes: [PrismicHelpCategory!]!
  pageInfo: PageInfo!
  sum(field: PrismicHelpCategoryFieldsEnum!): Float
  totalCount: Int!
}

type PrismicHelpCategoryPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicHelpCategoryPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicHelpCategoryPageConnection {
  distinct(field: PrismicHelpCategoryPageFieldsEnum!): [String!]!
  edges: [PrismicHelpCategoryPageEdge!]!
  group(field: PrismicHelpCategoryPageFieldsEnum!, limit: Int, skip: Int): [PrismicHelpCategoryPageGroupConnection!]!
  max(field: PrismicHelpCategoryPageFieldsEnum!): Float
  min(field: PrismicHelpCategoryPageFieldsEnum!): Float
  nodes: [PrismicHelpCategoryPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicHelpCategoryPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicHelpCategoryPageDataType {
  sidebar_categories: String
  sidebar_email: PrismicStructuredTextType
  sidebar_not_found: String
  subject: String
}

input PrismicHelpCategoryPageDataTypeFilterInput {
  sidebar_categories: StringQueryOperatorInput
  sidebar_email: PrismicStructuredTextTypeFilterInput
  sidebar_not_found: StringQueryOperatorInput
  subject: StringQueryOperatorInput
}

type PrismicHelpCategoryPageEdge {
  next: PrismicHelpCategoryPage
  node: PrismicHelpCategoryPage!
  previous: PrismicHelpCategoryPage
}

enum PrismicHelpCategoryPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___sidebar_categories
  data___sidebar_email___html
  data___sidebar_email___raw
  data___sidebar_email___richText
  data___sidebar_email___text
  data___sidebar_not_found
  data___subject
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicHelpCategoryPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicHelpCategoryPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicHelpCategoryPageGroupConnection {
  distinct(field: PrismicHelpCategoryPageFieldsEnum!): [String!]!
  edges: [PrismicHelpCategoryPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicHelpCategoryPageFieldsEnum!, limit: Int, skip: Int): [PrismicHelpCategoryPageGroupConnection!]!
  max(field: PrismicHelpCategoryPageFieldsEnum!): Float
  min(field: PrismicHelpCategoryPageFieldsEnum!): Float
  nodes: [PrismicHelpCategoryPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicHelpCategoryPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicHelpCategoryPageSortInput {
  fields: [PrismicHelpCategoryPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicHelpCategorySortInput {
  fields: [PrismicHelpCategoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicHelpPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicHelpPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicHelpPageConnection {
  distinct(field: PrismicHelpPageFieldsEnum!): [String!]!
  edges: [PrismicHelpPageEdge!]!
  group(field: PrismicHelpPageFieldsEnum!, limit: Int, skip: Int): [PrismicHelpPageGroupConnection!]!
  max(field: PrismicHelpPageFieldsEnum!): Float
  min(field: PrismicHelpPageFieldsEnum!): Float
  nodes: [PrismicHelpPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicHelpPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicHelpPageDataCategoriesList {
  help_category: PrismicLinkType
}

input PrismicHelpPageDataCategoriesListFilterInput {
  help_category: PrismicLinkTypeFilterInput
}

input PrismicHelpPageDataCategoriesListFilterListInput {
  elemMatch: PrismicHelpPageDataCategoriesListFilterInput
}

type PrismicHelpPageDataHeroImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHelpPageDataHeroImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHelpPageDataType {
  categories_list: [PrismicHelpPageDataCategoriesList]
  categories_title: PrismicStructuredTextType
  hero_image: PrismicHelpPageDataHeroImageImageType
  hero_placeholder: String
  hero_title: PrismicStructuredTextType
  seo_description: String
  seo_title: String
  title: String
  top_questions_title: PrismicStructuredTextType
}

input PrismicHelpPageDataTypeFilterInput {
  categories_list: PrismicHelpPageDataCategoriesListFilterListInput
  categories_title: PrismicStructuredTextTypeFilterInput
  hero_image: PrismicHelpPageDataHeroImageImageTypeFilterInput
  hero_placeholder: StringQueryOperatorInput
  hero_title: PrismicStructuredTextTypeFilterInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  title: StringQueryOperatorInput
  top_questions_title: PrismicStructuredTextTypeFilterInput
}

type PrismicHelpPageEdge {
  next: PrismicHelpPage
  node: PrismicHelpPage!
  previous: PrismicHelpPage
}

enum PrismicHelpPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___categories_list
  data___categories_list___help_category___id
  data___categories_list___help_category___isBroken
  data___categories_list___help_category___lang
  data___categories_list___help_category___link_type
  data___categories_list___help_category___raw
  data___categories_list___help_category___size
  data___categories_list___help_category___slug
  data___categories_list___help_category___tags
  data___categories_list___help_category___target
  data___categories_list___help_category___type
  data___categories_list___help_category___uid
  data___categories_list___help_category___url
  data___categories_title___html
  data___categories_title___raw
  data___categories_title___richText
  data___categories_title___text
  data___hero_image___alt
  data___hero_image___copyright
  data___hero_image___dimensions___height
  data___hero_image___dimensions___width
  data___hero_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___localFile___absolutePath
  data___hero_image___localFile___accessTime
  data___hero_image___localFile___atime
  data___hero_image___localFile___atimeMs
  data___hero_image___localFile___base
  data___hero_image___localFile___birthTime
  data___hero_image___localFile___birthtime
  data___hero_image___localFile___birthtimeMs
  data___hero_image___localFile___blksize
  data___hero_image___localFile___blocks
  data___hero_image___localFile___changeTime
  data___hero_image___localFile___children
  data___hero_image___localFile___childrenImageSharp
  data___hero_image___localFile___ctime
  data___hero_image___localFile___ctimeMs
  data___hero_image___localFile___dev
  data___hero_image___localFile___dir
  data___hero_image___localFile___ext
  data___hero_image___localFile___extension
  data___hero_image___localFile___gid
  data___hero_image___localFile___id
  data___hero_image___localFile___ino
  data___hero_image___localFile___mode
  data___hero_image___localFile___modifiedTime
  data___hero_image___localFile___mtime
  data___hero_image___localFile___mtimeMs
  data___hero_image___localFile___name
  data___hero_image___localFile___nlink
  data___hero_image___localFile___prettySize
  data___hero_image___localFile___publicURL
  data___hero_image___localFile___rdev
  data___hero_image___localFile___relativeDirectory
  data___hero_image___localFile___relativePath
  data___hero_image___localFile___root
  data___hero_image___localFile___size
  data___hero_image___localFile___sourceInstanceName
  data___hero_image___localFile___uid
  data___hero_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_placeholder
  data___hero_title___html
  data___hero_title___raw
  data___hero_title___richText
  data___hero_title___text
  data___seo_description
  data___seo_title
  data___title
  data___top_questions_title___html
  data___top_questions_title___raw
  data___top_questions_title___richText
  data___top_questions_title___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicHelpPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicHelpPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicHelpPageGroupConnection {
  distinct(field: PrismicHelpPageFieldsEnum!): [String!]!
  edges: [PrismicHelpPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicHelpPageFieldsEnum!, limit: Int, skip: Int): [PrismicHelpPageGroupConnection!]!
  max(field: PrismicHelpPageFieldsEnum!): Float
  min(field: PrismicHelpPageFieldsEnum!): Float
  nodes: [PrismicHelpPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicHelpPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicHelpPageSortInput {
  fields: [PrismicHelpPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicHelpQuestion implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicHelpQuestionDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicHelpQuestionConnection {
  distinct(field: PrismicHelpQuestionFieldsEnum!): [String!]!
  edges: [PrismicHelpQuestionEdge!]!
  group(field: PrismicHelpQuestionFieldsEnum!, limit: Int, skip: Int): [PrismicHelpQuestionGroupConnection!]!
  max(field: PrismicHelpQuestionFieldsEnum!): Float
  min(field: PrismicHelpQuestionFieldsEnum!): Float
  nodes: [PrismicHelpQuestion!]!
  pageInfo: PageInfo!
  sum(field: PrismicHelpQuestionFieldsEnum!): Float
  totalCount: Int!
}

type PrismicHelpQuestionDataType {
  category: PrismicLinkType
  heading: PrismicStructuredTextType
  is_featured: Boolean
  text: PrismicStructuredTextType
}

input PrismicHelpQuestionDataTypeFilterInput {
  category: PrismicLinkTypeFilterInput
  heading: PrismicStructuredTextTypeFilterInput
  is_featured: BooleanQueryOperatorInput
  text: PrismicStructuredTextTypeFilterInput
}

type PrismicHelpQuestionEdge {
  next: PrismicHelpQuestion
  node: PrismicHelpQuestion!
  previous: PrismicHelpQuestion
}

enum PrismicHelpQuestionFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___category___id
  data___category___isBroken
  data___category___lang
  data___category___link_type
  data___category___localFile___absolutePath
  data___category___localFile___accessTime
  data___category___localFile___atime
  data___category___localFile___atimeMs
  data___category___localFile___base
  data___category___localFile___birthTime
  data___category___localFile___birthtime
  data___category___localFile___birthtimeMs
  data___category___localFile___blksize
  data___category___localFile___blocks
  data___category___localFile___changeTime
  data___category___localFile___children
  data___category___localFile___childrenImageSharp
  data___category___localFile___ctime
  data___category___localFile___ctimeMs
  data___category___localFile___dev
  data___category___localFile___dir
  data___category___localFile___ext
  data___category___localFile___extension
  data___category___localFile___gid
  data___category___localFile___id
  data___category___localFile___ino
  data___category___localFile___mode
  data___category___localFile___modifiedTime
  data___category___localFile___mtime
  data___category___localFile___mtimeMs
  data___category___localFile___name
  data___category___localFile___nlink
  data___category___localFile___prettySize
  data___category___localFile___publicURL
  data___category___localFile___rdev
  data___category___localFile___relativeDirectory
  data___category___localFile___relativePath
  data___category___localFile___root
  data___category___localFile___size
  data___category___localFile___sourceInstanceName
  data___category___localFile___uid
  data___category___raw
  data___category___size
  data___category___slug
  data___category___tags
  data___category___target
  data___category___type
  data___category___uid
  data___category___url
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___is_featured
  data___text___html
  data___text___raw
  data___text___richText
  data___text___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicHelpQuestionFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicHelpQuestionDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicHelpQuestionGroupConnection {
  distinct(field: PrismicHelpQuestionFieldsEnum!): [String!]!
  edges: [PrismicHelpQuestionEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicHelpQuestionFieldsEnum!, limit: Int, skip: Int): [PrismicHelpQuestionGroupConnection!]!
  max(field: PrismicHelpQuestionFieldsEnum!): Float
  min(field: PrismicHelpQuestionFieldsEnum!): Float
  nodes: [PrismicHelpQuestion!]!
  pageInfo: PageInfo!
  sum(field: PrismicHelpQuestionFieldsEnum!): Float
  totalCount: Int!
}

input PrismicHelpQuestionSortInput {
  fields: [PrismicHelpQuestionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicHighlightsSection implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicHighlightsSectionDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicHighlightsSectionConnection {
  distinct(field: PrismicHighlightsSectionFieldsEnum!): [String!]!
  edges: [PrismicHighlightsSectionEdge!]!
  group(field: PrismicHighlightsSectionFieldsEnum!, limit: Int, skip: Int): [PrismicHighlightsSectionGroupConnection!]!
  max(field: PrismicHighlightsSectionFieldsEnum!): Float
  min(field: PrismicHighlightsSectionFieldsEnum!): Float
  nodes: [PrismicHighlightsSection!]!
  pageInfo: PageInfo!
  sum(field: PrismicHighlightsSectionFieldsEnum!): Float
  totalCount: Int!
}

type PrismicHighlightsSectionDataHighlights {
  highlight_icon: String
  highlight_link: PrismicLinkType
  highlight_text: String
  icon_color: String
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

input PrismicHighlightsSectionDataHighlightsFilterInput {
  highlight_icon: StringQueryOperatorInput
  highlight_link: PrismicLinkTypeFilterInput
  highlight_text: StringQueryOperatorInput
  icon_color: StringQueryOperatorInput
  text: PrismicStructuredTextTypeFilterInput
  title: PrismicStructuredTextTypeFilterInput
}

input PrismicHighlightsSectionDataHighlightsFilterListInput {
  elemMatch: PrismicHighlightsSectionDataHighlightsFilterInput
}

type PrismicHighlightsSectionDataType {
  heading: PrismicStructuredTextType
  highlights: [PrismicHighlightsSectionDataHighlights]
}

input PrismicHighlightsSectionDataTypeFilterInput {
  heading: PrismicStructuredTextTypeFilterInput
  highlights: PrismicHighlightsSectionDataHighlightsFilterListInput
}

type PrismicHighlightsSectionEdge {
  next: PrismicHighlightsSection
  node: PrismicHighlightsSection!
  previous: PrismicHighlightsSection
}

enum PrismicHighlightsSectionFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___highlights
  data___highlights___highlight_icon
  data___highlights___highlight_link___id
  data___highlights___highlight_link___isBroken
  data___highlights___highlight_link___lang
  data___highlights___highlight_link___link_type
  data___highlights___highlight_link___raw
  data___highlights___highlight_link___size
  data___highlights___highlight_link___slug
  data___highlights___highlight_link___tags
  data___highlights___highlight_link___target
  data___highlights___highlight_link___type
  data___highlights___highlight_link___uid
  data___highlights___highlight_link___url
  data___highlights___highlight_text
  data___highlights___icon_color
  data___highlights___text___html
  data___highlights___text___raw
  data___highlights___text___richText
  data___highlights___text___text
  data___highlights___title___html
  data___highlights___title___raw
  data___highlights___title___richText
  data___highlights___title___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicHighlightsSectionFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicHighlightsSectionDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicHighlightsSectionGroupConnection {
  distinct(field: PrismicHighlightsSectionFieldsEnum!): [String!]!
  edges: [PrismicHighlightsSectionEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicHighlightsSectionFieldsEnum!, limit: Int, skip: Int): [PrismicHighlightsSectionGroupConnection!]!
  max(field: PrismicHighlightsSectionFieldsEnum!): Float
  min(field: PrismicHighlightsSectionFieldsEnum!): Float
  nodes: [PrismicHighlightsSection!]!
  pageInfo: PageInfo!
  sum(field: PrismicHighlightsSectionFieldsEnum!): Float
  totalCount: Int!
}

input PrismicHighlightsSectionSortInput {
  fields: [PrismicHighlightsSectionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicHomePage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicHomePageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicHomePageConnection {
  distinct(field: PrismicHomePageFieldsEnum!): [String!]!
  edges: [PrismicHomePageEdge!]!
  group(field: PrismicHomePageFieldsEnum!, limit: Int, skip: Int): [PrismicHomePageGroupConnection!]!
  max(field: PrismicHomePageFieldsEnum!): Float
  min(field: PrismicHomePageFieldsEnum!): Float
  nodes: [PrismicHomePage!]!
  pageInfo: PageInfo!
  sum(field: PrismicHomePageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicHomePageDataFeatures {
  feature_link: PrismicLinkType
  feature_text: String
  image: PrismicHomePageDataFeaturesImageImageType
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

input PrismicHomePageDataFeaturesFilterInput {
  feature_link: PrismicLinkTypeFilterInput
  feature_text: StringQueryOperatorInput
  image: PrismicHomePageDataFeaturesImageImageTypeFilterInput
  text: PrismicStructuredTextTypeFilterInput
  title: PrismicStructuredTextTypeFilterInput
}

input PrismicHomePageDataFeaturesFilterListInput {
  elemMatch: PrismicHomePageDataFeaturesFilterInput
}

type PrismicHomePageDataFeaturesImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHomePageDataFeaturesImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHomePageDataHeroImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHomePageDataHeroImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHomePageDataHerov2ImageFrontImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHomePageDataHerov2ImageFrontImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHomePageDataHomeStepsv2 {
  image: PrismicHomePageDataHomeStepsv2ImageImageType
  text: PrismicStructuredTextType
  title1: PrismicStructuredTextType
}

input PrismicHomePageDataHomeStepsv2FilterInput {
  image: PrismicHomePageDataHomeStepsv2ImageImageTypeFilterInput
  text: PrismicStructuredTextTypeFilterInput
  title1: PrismicStructuredTextTypeFilterInput
}

input PrismicHomePageDataHomeStepsv2FilterListInput {
  elemMatch: PrismicHomePageDataHomeStepsv2FilterInput
}

type PrismicHomePageDataHomeStepsv2ImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHomePageDataHomeStepsv2ImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHomePageDataImageGridFeatures {
  feature_link: PrismicLinkType
  feature_text: String
  heading: PrismicStructuredTextType
  image: PrismicHomePageDataImageGridFeaturesImageImageType
  text: PrismicStructuredTextType
}

input PrismicHomePageDataImageGridFeaturesFilterInput {
  feature_link: PrismicLinkTypeFilterInput
  feature_text: StringQueryOperatorInput
  heading: PrismicStructuredTextTypeFilterInput
  image: PrismicHomePageDataImageGridFeaturesImageImageTypeFilterInput
  text: PrismicStructuredTextTypeFilterInput
}

input PrismicHomePageDataImageGridFeaturesFilterListInput {
  elemMatch: PrismicHomePageDataImageGridFeaturesFilterInput
}

type PrismicHomePageDataImageGridFeaturesImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHomePageDataImageGridFeaturesImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHomePageDataSteps {
  button_link: PrismicLinkType
  button_text: String
  image: PrismicHomePageDataStepsImageImageType
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

input PrismicHomePageDataStepsFilterInput {
  button_link: PrismicLinkTypeFilterInput
  button_text: StringQueryOperatorInput
  image: PrismicHomePageDataStepsImageImageTypeFilterInput
  text: PrismicStructuredTextTypeFilterInput
  title: PrismicStructuredTextTypeFilterInput
}

input PrismicHomePageDataStepsFilterListInput {
  elemMatch: PrismicHomePageDataStepsFilterInput
}

type PrismicHomePageDataStepsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicHomePageDataStepsImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicHomePageDataType {
  features: [PrismicHomePageDataFeatures]
  features_title: PrismicStructuredTextType
  hero_button_link: PrismicLinkType
  hero_button_text: String
  hero_image: PrismicHomePageDataHeroImageImageType
  hero_tag_link: PrismicLinkType
  hero_tag_text: String
  hero_title: PrismicStructuredTextType
  herov2_button_link: PrismicLinkType
  herov2_button_text: String
  herov2_highlighted_words: String
  herov2_image_front: PrismicHomePageDataHerov2ImageFrontImageType
  herov2_link: PrismicLinkType
  herov2_link_text: String
  herov2_title: PrismicStructuredTextType
  home_stepsv2: [PrismicHomePageDataHomeStepsv2]
  home_stepsv2_button_text: String
  home_stepsv2_link: PrismicLinkType
  home_stepsv2_title: PrismicStructuredTextType
  image_grid_features: [PrismicHomePageDataImageGridFeatures]
  image_grid_title: PrismicStructuredTextType
  seo_description: String
  seo_title: String
  steps: [PrismicHomePageDataSteps]
  steps_title: PrismicStructuredTextType
  title: String
}

input PrismicHomePageDataTypeFilterInput {
  features: PrismicHomePageDataFeaturesFilterListInput
  features_title: PrismicStructuredTextTypeFilterInput
  hero_button_link: PrismicLinkTypeFilterInput
  hero_button_text: StringQueryOperatorInput
  hero_image: PrismicHomePageDataHeroImageImageTypeFilterInput
  hero_tag_link: PrismicLinkTypeFilterInput
  hero_tag_text: StringQueryOperatorInput
  hero_title: PrismicStructuredTextTypeFilterInput
  herov2_button_link: PrismicLinkTypeFilterInput
  herov2_button_text: StringQueryOperatorInput
  herov2_highlighted_words: StringQueryOperatorInput
  herov2_image_front: PrismicHomePageDataHerov2ImageFrontImageTypeFilterInput
  herov2_link: PrismicLinkTypeFilterInput
  herov2_link_text: StringQueryOperatorInput
  herov2_title: PrismicStructuredTextTypeFilterInput
  home_stepsv2: PrismicHomePageDataHomeStepsv2FilterListInput
  home_stepsv2_button_text: StringQueryOperatorInput
  home_stepsv2_link: PrismicLinkTypeFilterInput
  home_stepsv2_title: PrismicStructuredTextTypeFilterInput
  image_grid_features: PrismicHomePageDataImageGridFeaturesFilterListInput
  image_grid_title: PrismicStructuredTextTypeFilterInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  steps: PrismicHomePageDataStepsFilterListInput
  steps_title: PrismicStructuredTextTypeFilterInput
  title: StringQueryOperatorInput
}

type PrismicHomePageEdge {
  next: PrismicHomePage
  node: PrismicHomePage!
  previous: PrismicHomePage
}

enum PrismicHomePageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___features
  data___features___feature_link___id
  data___features___feature_link___isBroken
  data___features___feature_link___lang
  data___features___feature_link___link_type
  data___features___feature_link___raw
  data___features___feature_link___size
  data___features___feature_link___slug
  data___features___feature_link___tags
  data___features___feature_link___target
  data___features___feature_link___type
  data___features___feature_link___uid
  data___features___feature_link___url
  data___features___feature_text
  data___features___image___alt
  data___features___image___copyright
  data___features___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___features___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___features___text___html
  data___features___text___raw
  data___features___text___richText
  data___features___text___text
  data___features___title___html
  data___features___title___raw
  data___features___title___richText
  data___features___title___text
  data___features_title___html
  data___features_title___raw
  data___features_title___richText
  data___features_title___text
  data___hero_button_link___id
  data___hero_button_link___isBroken
  data___hero_button_link___lang
  data___hero_button_link___link_type
  data___hero_button_link___localFile___absolutePath
  data___hero_button_link___localFile___accessTime
  data___hero_button_link___localFile___atime
  data___hero_button_link___localFile___atimeMs
  data___hero_button_link___localFile___base
  data___hero_button_link___localFile___birthTime
  data___hero_button_link___localFile___birthtime
  data___hero_button_link___localFile___birthtimeMs
  data___hero_button_link___localFile___blksize
  data___hero_button_link___localFile___blocks
  data___hero_button_link___localFile___changeTime
  data___hero_button_link___localFile___children
  data___hero_button_link___localFile___childrenImageSharp
  data___hero_button_link___localFile___ctime
  data___hero_button_link___localFile___ctimeMs
  data___hero_button_link___localFile___dev
  data___hero_button_link___localFile___dir
  data___hero_button_link___localFile___ext
  data___hero_button_link___localFile___extension
  data___hero_button_link___localFile___gid
  data___hero_button_link___localFile___id
  data___hero_button_link___localFile___ino
  data___hero_button_link___localFile___mode
  data___hero_button_link___localFile___modifiedTime
  data___hero_button_link___localFile___mtime
  data___hero_button_link___localFile___mtimeMs
  data___hero_button_link___localFile___name
  data___hero_button_link___localFile___nlink
  data___hero_button_link___localFile___prettySize
  data___hero_button_link___localFile___publicURL
  data___hero_button_link___localFile___rdev
  data___hero_button_link___localFile___relativeDirectory
  data___hero_button_link___localFile___relativePath
  data___hero_button_link___localFile___root
  data___hero_button_link___localFile___size
  data___hero_button_link___localFile___sourceInstanceName
  data___hero_button_link___localFile___uid
  data___hero_button_link___raw
  data___hero_button_link___size
  data___hero_button_link___slug
  data___hero_button_link___tags
  data___hero_button_link___target
  data___hero_button_link___type
  data___hero_button_link___uid
  data___hero_button_link___url
  data___hero_button_text
  data___hero_image___alt
  data___hero_image___copyright
  data___hero_image___dimensions___height
  data___hero_image___dimensions___width
  data___hero_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___localFile___absolutePath
  data___hero_image___localFile___accessTime
  data___hero_image___localFile___atime
  data___hero_image___localFile___atimeMs
  data___hero_image___localFile___base
  data___hero_image___localFile___birthTime
  data___hero_image___localFile___birthtime
  data___hero_image___localFile___birthtimeMs
  data___hero_image___localFile___blksize
  data___hero_image___localFile___blocks
  data___hero_image___localFile___changeTime
  data___hero_image___localFile___children
  data___hero_image___localFile___childrenImageSharp
  data___hero_image___localFile___ctime
  data___hero_image___localFile___ctimeMs
  data___hero_image___localFile___dev
  data___hero_image___localFile___dir
  data___hero_image___localFile___ext
  data___hero_image___localFile___extension
  data___hero_image___localFile___gid
  data___hero_image___localFile___id
  data___hero_image___localFile___ino
  data___hero_image___localFile___mode
  data___hero_image___localFile___modifiedTime
  data___hero_image___localFile___mtime
  data___hero_image___localFile___mtimeMs
  data___hero_image___localFile___name
  data___hero_image___localFile___nlink
  data___hero_image___localFile___prettySize
  data___hero_image___localFile___publicURL
  data___hero_image___localFile___rdev
  data___hero_image___localFile___relativeDirectory
  data___hero_image___localFile___relativePath
  data___hero_image___localFile___root
  data___hero_image___localFile___size
  data___hero_image___localFile___sourceInstanceName
  data___hero_image___localFile___uid
  data___hero_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_tag_link___id
  data___hero_tag_link___isBroken
  data___hero_tag_link___lang
  data___hero_tag_link___link_type
  data___hero_tag_link___localFile___absolutePath
  data___hero_tag_link___localFile___accessTime
  data___hero_tag_link___localFile___atime
  data___hero_tag_link___localFile___atimeMs
  data___hero_tag_link___localFile___base
  data___hero_tag_link___localFile___birthTime
  data___hero_tag_link___localFile___birthtime
  data___hero_tag_link___localFile___birthtimeMs
  data___hero_tag_link___localFile___blksize
  data___hero_tag_link___localFile___blocks
  data___hero_tag_link___localFile___changeTime
  data___hero_tag_link___localFile___children
  data___hero_tag_link___localFile___childrenImageSharp
  data___hero_tag_link___localFile___ctime
  data___hero_tag_link___localFile___ctimeMs
  data___hero_tag_link___localFile___dev
  data___hero_tag_link___localFile___dir
  data___hero_tag_link___localFile___ext
  data___hero_tag_link___localFile___extension
  data___hero_tag_link___localFile___gid
  data___hero_tag_link___localFile___id
  data___hero_tag_link___localFile___ino
  data___hero_tag_link___localFile___mode
  data___hero_tag_link___localFile___modifiedTime
  data___hero_tag_link___localFile___mtime
  data___hero_tag_link___localFile___mtimeMs
  data___hero_tag_link___localFile___name
  data___hero_tag_link___localFile___nlink
  data___hero_tag_link___localFile___prettySize
  data___hero_tag_link___localFile___publicURL
  data___hero_tag_link___localFile___rdev
  data___hero_tag_link___localFile___relativeDirectory
  data___hero_tag_link___localFile___relativePath
  data___hero_tag_link___localFile___root
  data___hero_tag_link___localFile___size
  data___hero_tag_link___localFile___sourceInstanceName
  data___hero_tag_link___localFile___uid
  data___hero_tag_link___raw
  data___hero_tag_link___size
  data___hero_tag_link___slug
  data___hero_tag_link___tags
  data___hero_tag_link___target
  data___hero_tag_link___type
  data___hero_tag_link___uid
  data___hero_tag_link___url
  data___hero_tag_text
  data___hero_title___html
  data___hero_title___raw
  data___hero_title___richText
  data___hero_title___text
  data___herov2_button_link___id
  data___herov2_button_link___isBroken
  data___herov2_button_link___lang
  data___herov2_button_link___link_type
  data___herov2_button_link___localFile___absolutePath
  data___herov2_button_link___localFile___accessTime
  data___herov2_button_link___localFile___atime
  data___herov2_button_link___localFile___atimeMs
  data___herov2_button_link___localFile___base
  data___herov2_button_link___localFile___birthTime
  data___herov2_button_link___localFile___birthtime
  data___herov2_button_link___localFile___birthtimeMs
  data___herov2_button_link___localFile___blksize
  data___herov2_button_link___localFile___blocks
  data___herov2_button_link___localFile___changeTime
  data___herov2_button_link___localFile___children
  data___herov2_button_link___localFile___childrenImageSharp
  data___herov2_button_link___localFile___ctime
  data___herov2_button_link___localFile___ctimeMs
  data___herov2_button_link___localFile___dev
  data___herov2_button_link___localFile___dir
  data___herov2_button_link___localFile___ext
  data___herov2_button_link___localFile___extension
  data___herov2_button_link___localFile___gid
  data___herov2_button_link___localFile___id
  data___herov2_button_link___localFile___ino
  data___herov2_button_link___localFile___mode
  data___herov2_button_link___localFile___modifiedTime
  data___herov2_button_link___localFile___mtime
  data___herov2_button_link___localFile___mtimeMs
  data___herov2_button_link___localFile___name
  data___herov2_button_link___localFile___nlink
  data___herov2_button_link___localFile___prettySize
  data___herov2_button_link___localFile___publicURL
  data___herov2_button_link___localFile___rdev
  data___herov2_button_link___localFile___relativeDirectory
  data___herov2_button_link___localFile___relativePath
  data___herov2_button_link___localFile___root
  data___herov2_button_link___localFile___size
  data___herov2_button_link___localFile___sourceInstanceName
  data___herov2_button_link___localFile___uid
  data___herov2_button_link___raw
  data___herov2_button_link___size
  data___herov2_button_link___slug
  data___herov2_button_link___tags
  data___herov2_button_link___target
  data___herov2_button_link___type
  data___herov2_button_link___uid
  data___herov2_button_link___url
  data___herov2_button_text
  data___herov2_highlighted_words
  data___herov2_image_front___alt
  data___herov2_image_front___copyright
  data___herov2_image_front___dimensions___height
  data___herov2_image_front___dimensions___width
  data___herov2_image_front___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_image_front___localFile___absolutePath
  data___herov2_image_front___localFile___accessTime
  data___herov2_image_front___localFile___atime
  data___herov2_image_front___localFile___atimeMs
  data___herov2_image_front___localFile___base
  data___herov2_image_front___localFile___birthTime
  data___herov2_image_front___localFile___birthtime
  data___herov2_image_front___localFile___birthtimeMs
  data___herov2_image_front___localFile___blksize
  data___herov2_image_front___localFile___blocks
  data___herov2_image_front___localFile___changeTime
  data___herov2_image_front___localFile___children
  data___herov2_image_front___localFile___childrenImageSharp
  data___herov2_image_front___localFile___ctime
  data___herov2_image_front___localFile___ctimeMs
  data___herov2_image_front___localFile___dev
  data___herov2_image_front___localFile___dir
  data___herov2_image_front___localFile___ext
  data___herov2_image_front___localFile___extension
  data___herov2_image_front___localFile___gid
  data___herov2_image_front___localFile___id
  data___herov2_image_front___localFile___ino
  data___herov2_image_front___localFile___mode
  data___herov2_image_front___localFile___modifiedTime
  data___herov2_image_front___localFile___mtime
  data___herov2_image_front___localFile___mtimeMs
  data___herov2_image_front___localFile___name
  data___herov2_image_front___localFile___nlink
  data___herov2_image_front___localFile___prettySize
  data___herov2_image_front___localFile___publicURL
  data___herov2_image_front___localFile___rdev
  data___herov2_image_front___localFile___relativeDirectory
  data___herov2_image_front___localFile___relativePath
  data___herov2_image_front___localFile___root
  data___herov2_image_front___localFile___size
  data___herov2_image_front___localFile___sourceInstanceName
  data___herov2_image_front___localFile___uid
  data___herov2_image_front___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___herov2_link___id
  data___herov2_link___isBroken
  data___herov2_link___lang
  data___herov2_link___link_type
  data___herov2_link___localFile___absolutePath
  data___herov2_link___localFile___accessTime
  data___herov2_link___localFile___atime
  data___herov2_link___localFile___atimeMs
  data___herov2_link___localFile___base
  data___herov2_link___localFile___birthTime
  data___herov2_link___localFile___birthtime
  data___herov2_link___localFile___birthtimeMs
  data___herov2_link___localFile___blksize
  data___herov2_link___localFile___blocks
  data___herov2_link___localFile___changeTime
  data___herov2_link___localFile___children
  data___herov2_link___localFile___childrenImageSharp
  data___herov2_link___localFile___ctime
  data___herov2_link___localFile___ctimeMs
  data___herov2_link___localFile___dev
  data___herov2_link___localFile___dir
  data___herov2_link___localFile___ext
  data___herov2_link___localFile___extension
  data___herov2_link___localFile___gid
  data___herov2_link___localFile___id
  data___herov2_link___localFile___ino
  data___herov2_link___localFile___mode
  data___herov2_link___localFile___modifiedTime
  data___herov2_link___localFile___mtime
  data___herov2_link___localFile___mtimeMs
  data___herov2_link___localFile___name
  data___herov2_link___localFile___nlink
  data___herov2_link___localFile___prettySize
  data___herov2_link___localFile___publicURL
  data___herov2_link___localFile___rdev
  data___herov2_link___localFile___relativeDirectory
  data___herov2_link___localFile___relativePath
  data___herov2_link___localFile___root
  data___herov2_link___localFile___size
  data___herov2_link___localFile___sourceInstanceName
  data___herov2_link___localFile___uid
  data___herov2_link___raw
  data___herov2_link___size
  data___herov2_link___slug
  data___herov2_link___tags
  data___herov2_link___target
  data___herov2_link___type
  data___herov2_link___uid
  data___herov2_link___url
  data___herov2_link_text
  data___herov2_title___html
  data___herov2_title___raw
  data___herov2_title___richText
  data___herov2_title___text
  data___home_stepsv2
  data___home_stepsv2___image___alt
  data___home_stepsv2___image___copyright
  data___home_stepsv2___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___home_stepsv2___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___home_stepsv2___text___html
  data___home_stepsv2___text___raw
  data___home_stepsv2___text___richText
  data___home_stepsv2___text___text
  data___home_stepsv2___title1___html
  data___home_stepsv2___title1___raw
  data___home_stepsv2___title1___richText
  data___home_stepsv2___title1___text
  data___home_stepsv2_button_text
  data___home_stepsv2_link___id
  data___home_stepsv2_link___isBroken
  data___home_stepsv2_link___lang
  data___home_stepsv2_link___link_type
  data___home_stepsv2_link___localFile___absolutePath
  data___home_stepsv2_link___localFile___accessTime
  data___home_stepsv2_link___localFile___atime
  data___home_stepsv2_link___localFile___atimeMs
  data___home_stepsv2_link___localFile___base
  data___home_stepsv2_link___localFile___birthTime
  data___home_stepsv2_link___localFile___birthtime
  data___home_stepsv2_link___localFile___birthtimeMs
  data___home_stepsv2_link___localFile___blksize
  data___home_stepsv2_link___localFile___blocks
  data___home_stepsv2_link___localFile___changeTime
  data___home_stepsv2_link___localFile___children
  data___home_stepsv2_link___localFile___childrenImageSharp
  data___home_stepsv2_link___localFile___ctime
  data___home_stepsv2_link___localFile___ctimeMs
  data___home_stepsv2_link___localFile___dev
  data___home_stepsv2_link___localFile___dir
  data___home_stepsv2_link___localFile___ext
  data___home_stepsv2_link___localFile___extension
  data___home_stepsv2_link___localFile___gid
  data___home_stepsv2_link___localFile___id
  data___home_stepsv2_link___localFile___ino
  data___home_stepsv2_link___localFile___mode
  data___home_stepsv2_link___localFile___modifiedTime
  data___home_stepsv2_link___localFile___mtime
  data___home_stepsv2_link___localFile___mtimeMs
  data___home_stepsv2_link___localFile___name
  data___home_stepsv2_link___localFile___nlink
  data___home_stepsv2_link___localFile___prettySize
  data___home_stepsv2_link___localFile___publicURL
  data___home_stepsv2_link___localFile___rdev
  data___home_stepsv2_link___localFile___relativeDirectory
  data___home_stepsv2_link___localFile___relativePath
  data___home_stepsv2_link___localFile___root
  data___home_stepsv2_link___localFile___size
  data___home_stepsv2_link___localFile___sourceInstanceName
  data___home_stepsv2_link___localFile___uid
  data___home_stepsv2_link___raw
  data___home_stepsv2_link___size
  data___home_stepsv2_link___slug
  data___home_stepsv2_link___tags
  data___home_stepsv2_link___target
  data___home_stepsv2_link___type
  data___home_stepsv2_link___uid
  data___home_stepsv2_link___url
  data___home_stepsv2_title___html
  data___home_stepsv2_title___raw
  data___home_stepsv2_title___richText
  data___home_stepsv2_title___text
  data___image_grid_features
  data___image_grid_features___feature_link___id
  data___image_grid_features___feature_link___isBroken
  data___image_grid_features___feature_link___lang
  data___image_grid_features___feature_link___link_type
  data___image_grid_features___feature_link___raw
  data___image_grid_features___feature_link___size
  data___image_grid_features___feature_link___slug
  data___image_grid_features___feature_link___tags
  data___image_grid_features___feature_link___target
  data___image_grid_features___feature_link___type
  data___image_grid_features___feature_link___uid
  data___image_grid_features___feature_link___url
  data___image_grid_features___feature_text
  data___image_grid_features___heading___html
  data___image_grid_features___heading___raw
  data___image_grid_features___heading___richText
  data___image_grid_features___heading___text
  data___image_grid_features___image___alt
  data___image_grid_features___image___copyright
  data___image_grid_features___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_grid_features___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_grid_features___text___html
  data___image_grid_features___text___raw
  data___image_grid_features___text___richText
  data___image_grid_features___text___text
  data___image_grid_title___html
  data___image_grid_title___raw
  data___image_grid_title___richText
  data___image_grid_title___text
  data___seo_description
  data___seo_title
  data___steps
  data___steps___button_link___id
  data___steps___button_link___isBroken
  data___steps___button_link___lang
  data___steps___button_link___link_type
  data___steps___button_link___raw
  data___steps___button_link___size
  data___steps___button_link___slug
  data___steps___button_link___tags
  data___steps___button_link___target
  data___steps___button_link___type
  data___steps___button_link___uid
  data___steps___button_link___url
  data___steps___button_text
  data___steps___image___alt
  data___steps___image___copyright
  data___steps___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___steps___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___steps___text___html
  data___steps___text___raw
  data___steps___text___richText
  data___steps___text___text
  data___steps___title___html
  data___steps___title___raw
  data___steps___title___richText
  data___steps___title___text
  data___steps_title___html
  data___steps_title___raw
  data___steps_title___richText
  data___steps_title___text
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicHomePageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicHomePageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicHomePageGroupConnection {
  distinct(field: PrismicHomePageFieldsEnum!): [String!]!
  edges: [PrismicHomePageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicHomePageFieldsEnum!, limit: Int, skip: Int): [PrismicHomePageGroupConnection!]!
  max(field: PrismicHomePageFieldsEnum!): Float
  min(field: PrismicHomePageFieldsEnum!): Float
  nodes: [PrismicHomePage!]!
  pageInfo: PageInfo!
  sum(field: PrismicHomePageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicHomePageSortInput {
  fields: [PrismicHomePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicIconList implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicIconListDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicIconListConnection {
  distinct(field: PrismicIconListFieldsEnum!): [String!]!
  edges: [PrismicIconListEdge!]!
  group(field: PrismicIconListFieldsEnum!, limit: Int, skip: Int): [PrismicIconListGroupConnection!]!
  max(field: PrismicIconListFieldsEnum!): Float
  min(field: PrismicIconListFieldsEnum!): Float
  nodes: [PrismicIconList!]!
  pageInfo: PageInfo!
  sum(field: PrismicIconListFieldsEnum!): Float
  totalCount: Int!
}

type PrismicIconListDataType {
  icon: String
}

input PrismicIconListDataTypeFilterInput {
  icon: StringQueryOperatorInput
}

type PrismicIconListEdge {
  next: PrismicIconList
  node: PrismicIconList!
  previous: PrismicIconList
}

enum PrismicIconListFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___icon
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicIconListFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicIconListDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicIconListGroupConnection {
  distinct(field: PrismicIconListFieldsEnum!): [String!]!
  edges: [PrismicIconListEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicIconListFieldsEnum!, limit: Int, skip: Int): [PrismicIconListGroupConnection!]!
  max(field: PrismicIconListFieldsEnum!): Float
  min(field: PrismicIconListFieldsEnum!): Float
  nodes: [PrismicIconList!]!
  pageInfo: PageInfo!
  sum(field: PrismicIconListFieldsEnum!): Float
  totalCount: Int!
}

input PrismicIconListSortInput {
  fields: [PrismicIconListFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicImageDimensionsType {
  height: Int!
  width: Int!
}

input PrismicImageDimensionsTypeFilterInput {
  height: IntQueryOperatorInput
  width: IntQueryOperatorInput
}

type PrismicImageThumbnailType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicLegalPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicLegalPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicLegalPageConnection {
  distinct(field: PrismicLegalPageFieldsEnum!): [String!]!
  edges: [PrismicLegalPageEdge!]!
  group(field: PrismicLegalPageFieldsEnum!, limit: Int, skip: Int): [PrismicLegalPageGroupConnection!]!
  max(field: PrismicLegalPageFieldsEnum!): Float
  min(field: PrismicLegalPageFieldsEnum!): Float
  nodes: [PrismicLegalPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicLegalPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicLegalPageDataType {
  content: PrismicStructuredTextType
  title: String
}

input PrismicLegalPageDataTypeFilterInput {
  content: PrismicStructuredTextTypeFilterInput
  title: StringQueryOperatorInput
}

type PrismicLegalPageEdge {
  next: PrismicLegalPage
  node: PrismicLegalPage!
  previous: PrismicLegalPage
}

enum PrismicLegalPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___content___html
  data___content___raw
  data___content___richText
  data___content___text
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicLegalPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicLegalPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicLegalPageGroupConnection {
  distinct(field: PrismicLegalPageFieldsEnum!): [String!]!
  edges: [PrismicLegalPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicLegalPageFieldsEnum!, limit: Int, skip: Int): [PrismicLegalPageGroupConnection!]!
  max(field: PrismicLegalPageFieldsEnum!): Float
  min(field: PrismicLegalPageFieldsEnum!): Float
  nodes: [PrismicLegalPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicLegalPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicLegalPageSortInput {
  fields: [PrismicLegalPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicLinkType {
  document: PrismicAllDocumentTypes
  id: ID
  isBroken: Boolean
  lang: String
  link_type: PrismicLinkTypeEnum
  localFile: File
  raw: JSON
  size: Int
  slug: String
  tags: [String]
  target: String
  type: String
  uid: String
  url: String
}

enum PrismicLinkTypeEnum {
  Any
  Document
  Media
  Web
}

input PrismicLinkTypeEnumQueryOperatorInput {
  eq: PrismicLinkTypeEnum
  in: [PrismicLinkTypeEnum]
  ne: PrismicLinkTypeEnum
  nin: [PrismicLinkTypeEnum]
}

input PrismicLinkTypeFilterInput {
  id: IDQueryOperatorInput
  isBroken: BooleanQueryOperatorInput
  lang: StringQueryOperatorInput
  link_type: PrismicLinkTypeEnumQueryOperatorInput
  localFile: FileFilterInput
  raw: JSONQueryOperatorInput
  size: IntQueryOperatorInput
  slug: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  target: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicLoginPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicLoginPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicLoginPageConnection {
  distinct(field: PrismicLoginPageFieldsEnum!): [String!]!
  edges: [PrismicLoginPageEdge!]!
  group(field: PrismicLoginPageFieldsEnum!, limit: Int, skip: Int): [PrismicLoginPageGroupConnection!]!
  max(field: PrismicLoginPageFieldsEnum!): Float
  min(field: PrismicLoginPageFieldsEnum!): Float
  nodes: [PrismicLoginPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicLoginPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicLoginPageDataHeroImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicLoginPageDataHeroImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicLoginPageDataType {
  back_link: PrismicLinkType
  back_text: String
  button: String
  heading: PrismicStructuredTextType
  hero: PrismicLoginPageDataHeroImageType
  intro: String
  no_account_link: PrismicLinkType
  no_account_text_1: String
  no_account_text_2: String
  password_forgotten_link: PrismicLinkType
  password_forgotten_text: String
  title: String
}

input PrismicLoginPageDataTypeFilterInput {
  back_link: PrismicLinkTypeFilterInput
  back_text: StringQueryOperatorInput
  button: StringQueryOperatorInput
  heading: PrismicStructuredTextTypeFilterInput
  hero: PrismicLoginPageDataHeroImageTypeFilterInput
  intro: StringQueryOperatorInput
  no_account_link: PrismicLinkTypeFilterInput
  no_account_text_1: StringQueryOperatorInput
  no_account_text_2: StringQueryOperatorInput
  password_forgotten_link: PrismicLinkTypeFilterInput
  password_forgotten_text: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

type PrismicLoginPageEdge {
  next: PrismicLoginPage
  node: PrismicLoginPage!
  previous: PrismicLoginPage
}

enum PrismicLoginPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___back_link___id
  data___back_link___isBroken
  data___back_link___lang
  data___back_link___link_type
  data___back_link___localFile___absolutePath
  data___back_link___localFile___accessTime
  data___back_link___localFile___atime
  data___back_link___localFile___atimeMs
  data___back_link___localFile___base
  data___back_link___localFile___birthTime
  data___back_link___localFile___birthtime
  data___back_link___localFile___birthtimeMs
  data___back_link___localFile___blksize
  data___back_link___localFile___blocks
  data___back_link___localFile___changeTime
  data___back_link___localFile___children
  data___back_link___localFile___childrenImageSharp
  data___back_link___localFile___ctime
  data___back_link___localFile___ctimeMs
  data___back_link___localFile___dev
  data___back_link___localFile___dir
  data___back_link___localFile___ext
  data___back_link___localFile___extension
  data___back_link___localFile___gid
  data___back_link___localFile___id
  data___back_link___localFile___ino
  data___back_link___localFile___mode
  data___back_link___localFile___modifiedTime
  data___back_link___localFile___mtime
  data___back_link___localFile___mtimeMs
  data___back_link___localFile___name
  data___back_link___localFile___nlink
  data___back_link___localFile___prettySize
  data___back_link___localFile___publicURL
  data___back_link___localFile___rdev
  data___back_link___localFile___relativeDirectory
  data___back_link___localFile___relativePath
  data___back_link___localFile___root
  data___back_link___localFile___size
  data___back_link___localFile___sourceInstanceName
  data___back_link___localFile___uid
  data___back_link___raw
  data___back_link___size
  data___back_link___slug
  data___back_link___tags
  data___back_link___target
  data___back_link___type
  data___back_link___uid
  data___back_link___url
  data___back_text
  data___button
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___hero___alt
  data___hero___copyright
  data___hero___dimensions___height
  data___hero___dimensions___width
  data___hero___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___localFile___absolutePath
  data___hero___localFile___accessTime
  data___hero___localFile___atime
  data___hero___localFile___atimeMs
  data___hero___localFile___base
  data___hero___localFile___birthTime
  data___hero___localFile___birthtime
  data___hero___localFile___birthtimeMs
  data___hero___localFile___blksize
  data___hero___localFile___blocks
  data___hero___localFile___changeTime
  data___hero___localFile___children
  data___hero___localFile___childrenImageSharp
  data___hero___localFile___ctime
  data___hero___localFile___ctimeMs
  data___hero___localFile___dev
  data___hero___localFile___dir
  data___hero___localFile___ext
  data___hero___localFile___extension
  data___hero___localFile___gid
  data___hero___localFile___id
  data___hero___localFile___ino
  data___hero___localFile___mode
  data___hero___localFile___modifiedTime
  data___hero___localFile___mtime
  data___hero___localFile___mtimeMs
  data___hero___localFile___name
  data___hero___localFile___nlink
  data___hero___localFile___prettySize
  data___hero___localFile___publicURL
  data___hero___localFile___rdev
  data___hero___localFile___relativeDirectory
  data___hero___localFile___relativePath
  data___hero___localFile___root
  data___hero___localFile___size
  data___hero___localFile___sourceInstanceName
  data___hero___localFile___uid
  data___hero___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___intro
  data___no_account_link___id
  data___no_account_link___isBroken
  data___no_account_link___lang
  data___no_account_link___link_type
  data___no_account_link___localFile___absolutePath
  data___no_account_link___localFile___accessTime
  data___no_account_link___localFile___atime
  data___no_account_link___localFile___atimeMs
  data___no_account_link___localFile___base
  data___no_account_link___localFile___birthTime
  data___no_account_link___localFile___birthtime
  data___no_account_link___localFile___birthtimeMs
  data___no_account_link___localFile___blksize
  data___no_account_link___localFile___blocks
  data___no_account_link___localFile___changeTime
  data___no_account_link___localFile___children
  data___no_account_link___localFile___childrenImageSharp
  data___no_account_link___localFile___ctime
  data___no_account_link___localFile___ctimeMs
  data___no_account_link___localFile___dev
  data___no_account_link___localFile___dir
  data___no_account_link___localFile___ext
  data___no_account_link___localFile___extension
  data___no_account_link___localFile___gid
  data___no_account_link___localFile___id
  data___no_account_link___localFile___ino
  data___no_account_link___localFile___mode
  data___no_account_link___localFile___modifiedTime
  data___no_account_link___localFile___mtime
  data___no_account_link___localFile___mtimeMs
  data___no_account_link___localFile___name
  data___no_account_link___localFile___nlink
  data___no_account_link___localFile___prettySize
  data___no_account_link___localFile___publicURL
  data___no_account_link___localFile___rdev
  data___no_account_link___localFile___relativeDirectory
  data___no_account_link___localFile___relativePath
  data___no_account_link___localFile___root
  data___no_account_link___localFile___size
  data___no_account_link___localFile___sourceInstanceName
  data___no_account_link___localFile___uid
  data___no_account_link___raw
  data___no_account_link___size
  data___no_account_link___slug
  data___no_account_link___tags
  data___no_account_link___target
  data___no_account_link___type
  data___no_account_link___uid
  data___no_account_link___url
  data___no_account_text_1
  data___no_account_text_2
  data___password_forgotten_link___id
  data___password_forgotten_link___isBroken
  data___password_forgotten_link___lang
  data___password_forgotten_link___link_type
  data___password_forgotten_link___localFile___absolutePath
  data___password_forgotten_link___localFile___accessTime
  data___password_forgotten_link___localFile___atime
  data___password_forgotten_link___localFile___atimeMs
  data___password_forgotten_link___localFile___base
  data___password_forgotten_link___localFile___birthTime
  data___password_forgotten_link___localFile___birthtime
  data___password_forgotten_link___localFile___birthtimeMs
  data___password_forgotten_link___localFile___blksize
  data___password_forgotten_link___localFile___blocks
  data___password_forgotten_link___localFile___changeTime
  data___password_forgotten_link___localFile___children
  data___password_forgotten_link___localFile___childrenImageSharp
  data___password_forgotten_link___localFile___ctime
  data___password_forgotten_link___localFile___ctimeMs
  data___password_forgotten_link___localFile___dev
  data___password_forgotten_link___localFile___dir
  data___password_forgotten_link___localFile___ext
  data___password_forgotten_link___localFile___extension
  data___password_forgotten_link___localFile___gid
  data___password_forgotten_link___localFile___id
  data___password_forgotten_link___localFile___ino
  data___password_forgotten_link___localFile___mode
  data___password_forgotten_link___localFile___modifiedTime
  data___password_forgotten_link___localFile___mtime
  data___password_forgotten_link___localFile___mtimeMs
  data___password_forgotten_link___localFile___name
  data___password_forgotten_link___localFile___nlink
  data___password_forgotten_link___localFile___prettySize
  data___password_forgotten_link___localFile___publicURL
  data___password_forgotten_link___localFile___rdev
  data___password_forgotten_link___localFile___relativeDirectory
  data___password_forgotten_link___localFile___relativePath
  data___password_forgotten_link___localFile___root
  data___password_forgotten_link___localFile___size
  data___password_forgotten_link___localFile___sourceInstanceName
  data___password_forgotten_link___localFile___uid
  data___password_forgotten_link___raw
  data___password_forgotten_link___size
  data___password_forgotten_link___slug
  data___password_forgotten_link___tags
  data___password_forgotten_link___target
  data___password_forgotten_link___type
  data___password_forgotten_link___uid
  data___password_forgotten_link___url
  data___password_forgotten_text
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicLoginPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicLoginPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicLoginPageGroupConnection {
  distinct(field: PrismicLoginPageFieldsEnum!): [String!]!
  edges: [PrismicLoginPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicLoginPageFieldsEnum!, limit: Int, skip: Int): [PrismicLoginPageGroupConnection!]!
  max(field: PrismicLoginPageFieldsEnum!): Float
  min(field: PrismicLoginPageFieldsEnum!): Float
  nodes: [PrismicLoginPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicLoginPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicLoginPageSortInput {
  fields: [PrismicLoginPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicMedicalExpert implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicMedicalExpertDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicMedicalExpertConnection {
  distinct(field: PrismicMedicalExpertFieldsEnum!): [String!]!
  edges: [PrismicMedicalExpertEdge!]!
  group(field: PrismicMedicalExpertFieldsEnum!, limit: Int, skip: Int): [PrismicMedicalExpertGroupConnection!]!
  max(field: PrismicMedicalExpertFieldsEnum!): Float
  min(field: PrismicMedicalExpertFieldsEnum!): Float
  nodes: [PrismicMedicalExpert!]!
  pageInfo: PageInfo!
  sum(field: PrismicMedicalExpertFieldsEnum!): Float
  totalCount: Int!
}

type PrismicMedicalExpertDataAvatarImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicMedicalExpertDataAvatarImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicMedicalExpertDataJobs {
  job: String
}

input PrismicMedicalExpertDataJobsFilterInput {
  job: StringQueryOperatorInput
}

input PrismicMedicalExpertDataJobsFilterListInput {
  elemMatch: PrismicMedicalExpertDataJobsFilterInput
}

type PrismicMedicalExpertDataType {
  avatar: PrismicMedicalExpertDataAvatarImageType
  first_name: String
  jobs: [PrismicMedicalExpertDataJobs]
  last_name: String
}

input PrismicMedicalExpertDataTypeFilterInput {
  avatar: PrismicMedicalExpertDataAvatarImageTypeFilterInput
  first_name: StringQueryOperatorInput
  jobs: PrismicMedicalExpertDataJobsFilterListInput
  last_name: StringQueryOperatorInput
}

type PrismicMedicalExpertEdge {
  next: PrismicMedicalExpert
  node: PrismicMedicalExpert!
  previous: PrismicMedicalExpert
}

enum PrismicMedicalExpertFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___avatar___alt
  data___avatar___copyright
  data___avatar___dimensions___height
  data___avatar___dimensions___width
  data___avatar___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___avatar___localFile___absolutePath
  data___avatar___localFile___accessTime
  data___avatar___localFile___atime
  data___avatar___localFile___atimeMs
  data___avatar___localFile___base
  data___avatar___localFile___birthTime
  data___avatar___localFile___birthtime
  data___avatar___localFile___birthtimeMs
  data___avatar___localFile___blksize
  data___avatar___localFile___blocks
  data___avatar___localFile___changeTime
  data___avatar___localFile___children
  data___avatar___localFile___childrenImageSharp
  data___avatar___localFile___ctime
  data___avatar___localFile___ctimeMs
  data___avatar___localFile___dev
  data___avatar___localFile___dir
  data___avatar___localFile___ext
  data___avatar___localFile___extension
  data___avatar___localFile___gid
  data___avatar___localFile___id
  data___avatar___localFile___ino
  data___avatar___localFile___mode
  data___avatar___localFile___modifiedTime
  data___avatar___localFile___mtime
  data___avatar___localFile___mtimeMs
  data___avatar___localFile___name
  data___avatar___localFile___nlink
  data___avatar___localFile___prettySize
  data___avatar___localFile___publicURL
  data___avatar___localFile___rdev
  data___avatar___localFile___relativeDirectory
  data___avatar___localFile___relativePath
  data___avatar___localFile___root
  data___avatar___localFile___size
  data___avatar___localFile___sourceInstanceName
  data___avatar___localFile___uid
  data___avatar___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___first_name
  data___jobs
  data___jobs___job
  data___last_name
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicMedicalExpertFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicMedicalExpertDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicMedicalExpertGroupConnection {
  distinct(field: PrismicMedicalExpertFieldsEnum!): [String!]!
  edges: [PrismicMedicalExpertEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicMedicalExpertFieldsEnum!, limit: Int, skip: Int): [PrismicMedicalExpertGroupConnection!]!
  max(field: PrismicMedicalExpertFieldsEnum!): Float
  min(field: PrismicMedicalExpertFieldsEnum!): Float
  nodes: [PrismicMedicalExpert!]!
  pageInfo: PageInfo!
  sum(field: PrismicMedicalExpertFieldsEnum!): Float
  totalCount: Int!
}

input PrismicMedicalExpertSortInput {
  fields: [PrismicMedicalExpertFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicMobileAppPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicMobileAppPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicMobileAppPageConnection {
  distinct(field: PrismicMobileAppPageFieldsEnum!): [String!]!
  edges: [PrismicMobileAppPageEdge!]!
  group(field: PrismicMobileAppPageFieldsEnum!, limit: Int, skip: Int): [PrismicMobileAppPageGroupConnection!]!
  max(field: PrismicMobileAppPageFieldsEnum!): Float
  min(field: PrismicMobileAppPageFieldsEnum!): Float
  nodes: [PrismicMobileAppPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicMobileAppPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicMobileAppPageDataAppDetails {
  heading: PrismicStructuredTextType
  text: PrismicStructuredTextType
}

input PrismicMobileAppPageDataAppDetailsFilterInput {
  heading: PrismicStructuredTextTypeFilterInput
  text: PrismicStructuredTextTypeFilterInput
}

input PrismicMobileAppPageDataAppDetailsFilterListInput {
  elemMatch: PrismicMobileAppPageDataAppDetailsFilterInput
}

type PrismicMobileAppPageDataAppDetailsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicMobileAppPageDataAppDetailsImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicMobileAppPageDataFeatures {
  feature_color: String
  feature_color_bar: String
  feature_heading: PrismicStructuredTextType
  feature_image: PrismicMobileAppPageDataFeaturesFeatureImageImageType
  feature_number: Float
  feature_text: PrismicStructuredTextType
}

type PrismicMobileAppPageDataFeaturesFeatureImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicMobileAppPageDataFeaturesFeatureImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

input PrismicMobileAppPageDataFeaturesFilterInput {
  feature_color: StringQueryOperatorInput
  feature_color_bar: StringQueryOperatorInput
  feature_heading: PrismicStructuredTextTypeFilterInput
  feature_image: PrismicMobileAppPageDataFeaturesFeatureImageImageTypeFilterInput
  feature_number: FloatQueryOperatorInput
  feature_text: PrismicStructuredTextTypeFilterInput
}

input PrismicMobileAppPageDataFeaturesFilterListInput {
  elemMatch: PrismicMobileAppPageDataFeaturesFilterInput
}

type PrismicMobileAppPageDataHeroImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicMobileAppPageDataHeroImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicMobileAppPageDataQuestions {
  question: PrismicLinkType
}

input PrismicMobileAppPageDataQuestionsFilterInput {
  question: PrismicLinkTypeFilterInput
}

input PrismicMobileAppPageDataQuestionsFilterListInput {
  elemMatch: PrismicMobileAppPageDataQuestionsFilterInput
}

type PrismicMobileAppPageDataType {
  app_details: [PrismicMobileAppPageDataAppDetails]
  app_details_heading: PrismicStructuredTextType
  app_details_image: PrismicMobileAppPageDataAppDetailsImageImageType
  features: [PrismicMobileAppPageDataFeatures]
  hero_image: PrismicMobileAppPageDataHeroImageImageType
  hero_text: PrismicStructuredTextType
  hero_title: PrismicStructuredTextType
  questions: [PrismicMobileAppPageDataQuestions]
  seo_description: String
  seo_title: String
  title: String
}

input PrismicMobileAppPageDataTypeFilterInput {
  app_details: PrismicMobileAppPageDataAppDetailsFilterListInput
  app_details_heading: PrismicStructuredTextTypeFilterInput
  app_details_image: PrismicMobileAppPageDataAppDetailsImageImageTypeFilterInput
  features: PrismicMobileAppPageDataFeaturesFilterListInput
  hero_image: PrismicMobileAppPageDataHeroImageImageTypeFilterInput
  hero_text: PrismicStructuredTextTypeFilterInput
  hero_title: PrismicStructuredTextTypeFilterInput
  questions: PrismicMobileAppPageDataQuestionsFilterListInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

type PrismicMobileAppPageEdge {
  next: PrismicMobileAppPage
  node: PrismicMobileAppPage!
  previous: PrismicMobileAppPage
}

enum PrismicMobileAppPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___app_details
  data___app_details___heading___html
  data___app_details___heading___raw
  data___app_details___heading___richText
  data___app_details___heading___text
  data___app_details___text___html
  data___app_details___text___raw
  data___app_details___text___richText
  data___app_details___text___text
  data___app_details_heading___html
  data___app_details_heading___raw
  data___app_details_heading___richText
  data___app_details_heading___text
  data___app_details_image___alt
  data___app_details_image___copyright
  data___app_details_image___dimensions___height
  data___app_details_image___dimensions___width
  data___app_details_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___app_details_image___localFile___absolutePath
  data___app_details_image___localFile___accessTime
  data___app_details_image___localFile___atime
  data___app_details_image___localFile___atimeMs
  data___app_details_image___localFile___base
  data___app_details_image___localFile___birthTime
  data___app_details_image___localFile___birthtime
  data___app_details_image___localFile___birthtimeMs
  data___app_details_image___localFile___blksize
  data___app_details_image___localFile___blocks
  data___app_details_image___localFile___changeTime
  data___app_details_image___localFile___children
  data___app_details_image___localFile___childrenImageSharp
  data___app_details_image___localFile___ctime
  data___app_details_image___localFile___ctimeMs
  data___app_details_image___localFile___dev
  data___app_details_image___localFile___dir
  data___app_details_image___localFile___ext
  data___app_details_image___localFile___extension
  data___app_details_image___localFile___gid
  data___app_details_image___localFile___id
  data___app_details_image___localFile___ino
  data___app_details_image___localFile___mode
  data___app_details_image___localFile___modifiedTime
  data___app_details_image___localFile___mtime
  data___app_details_image___localFile___mtimeMs
  data___app_details_image___localFile___name
  data___app_details_image___localFile___nlink
  data___app_details_image___localFile___prettySize
  data___app_details_image___localFile___publicURL
  data___app_details_image___localFile___rdev
  data___app_details_image___localFile___relativeDirectory
  data___app_details_image___localFile___relativePath
  data___app_details_image___localFile___root
  data___app_details_image___localFile___size
  data___app_details_image___localFile___sourceInstanceName
  data___app_details_image___localFile___uid
  data___app_details_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___features
  data___features___feature_color
  data___features___feature_color_bar
  data___features___feature_heading___html
  data___features___feature_heading___raw
  data___features___feature_heading___richText
  data___features___feature_heading___text
  data___features___feature_image___alt
  data___features___feature_image___copyright
  data___features___feature_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___features___feature_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___features___feature_number
  data___features___feature_text___html
  data___features___feature_text___raw
  data___features___feature_text___richText
  data___features___feature_text___text
  data___hero_image___alt
  data___hero_image___copyright
  data___hero_image___dimensions___height
  data___hero_image___dimensions___width
  data___hero_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___localFile___absolutePath
  data___hero_image___localFile___accessTime
  data___hero_image___localFile___atime
  data___hero_image___localFile___atimeMs
  data___hero_image___localFile___base
  data___hero_image___localFile___birthTime
  data___hero_image___localFile___birthtime
  data___hero_image___localFile___birthtimeMs
  data___hero_image___localFile___blksize
  data___hero_image___localFile___blocks
  data___hero_image___localFile___changeTime
  data___hero_image___localFile___children
  data___hero_image___localFile___childrenImageSharp
  data___hero_image___localFile___ctime
  data___hero_image___localFile___ctimeMs
  data___hero_image___localFile___dev
  data___hero_image___localFile___dir
  data___hero_image___localFile___ext
  data___hero_image___localFile___extension
  data___hero_image___localFile___gid
  data___hero_image___localFile___id
  data___hero_image___localFile___ino
  data___hero_image___localFile___mode
  data___hero_image___localFile___modifiedTime
  data___hero_image___localFile___mtime
  data___hero_image___localFile___mtimeMs
  data___hero_image___localFile___name
  data___hero_image___localFile___nlink
  data___hero_image___localFile___prettySize
  data___hero_image___localFile___publicURL
  data___hero_image___localFile___rdev
  data___hero_image___localFile___relativeDirectory
  data___hero_image___localFile___relativePath
  data___hero_image___localFile___root
  data___hero_image___localFile___size
  data___hero_image___localFile___sourceInstanceName
  data___hero_image___localFile___uid
  data___hero_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_text___html
  data___hero_text___raw
  data___hero_text___richText
  data___hero_text___text
  data___hero_title___html
  data___hero_title___raw
  data___hero_title___richText
  data___hero_title___text
  data___questions
  data___questions___question___id
  data___questions___question___isBroken
  data___questions___question___lang
  data___questions___question___link_type
  data___questions___question___raw
  data___questions___question___size
  data___questions___question___slug
  data___questions___question___tags
  data___questions___question___target
  data___questions___question___type
  data___questions___question___uid
  data___questions___question___url
  data___seo_description
  data___seo_title
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicMobileAppPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicMobileAppPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicMobileAppPageGroupConnection {
  distinct(field: PrismicMobileAppPageFieldsEnum!): [String!]!
  edges: [PrismicMobileAppPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicMobileAppPageFieldsEnum!, limit: Int, skip: Int): [PrismicMobileAppPageGroupConnection!]!
  max(field: PrismicMobileAppPageFieldsEnum!): Float
  min(field: PrismicMobileAppPageFieldsEnum!): Float
  nodes: [PrismicMobileAppPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicMobileAppPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicMobileAppPageSortInput {
  fields: [PrismicMobileAppPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicNewsletterSection implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicNewsletterSectionDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicNewsletterSectionConnection {
  distinct(field: PrismicNewsletterSectionFieldsEnum!): [String!]!
  edges: [PrismicNewsletterSectionEdge!]!
  group(field: PrismicNewsletterSectionFieldsEnum!, limit: Int, skip: Int): [PrismicNewsletterSectionGroupConnection!]!
  max(field: PrismicNewsletterSectionFieldsEnum!): Float
  min(field: PrismicNewsletterSectionFieldsEnum!): Float
  nodes: [PrismicNewsletterSection!]!
  pageInfo: PageInfo!
  sum(field: PrismicNewsletterSectionFieldsEnum!): Float
  totalCount: Int!
}

type PrismicNewsletterSectionDataType {
  button: PrismicStructuredTextType
  confirmed: PrismicStructuredTextType
  confirmed_text: PrismicStructuredTextType
  heading: PrismicStructuredTextType
  text: PrismicStructuredTextType
}

input PrismicNewsletterSectionDataTypeFilterInput {
  button: PrismicStructuredTextTypeFilterInput
  confirmed: PrismicStructuredTextTypeFilterInput
  confirmed_text: PrismicStructuredTextTypeFilterInput
  heading: PrismicStructuredTextTypeFilterInput
  text: PrismicStructuredTextTypeFilterInput
}

type PrismicNewsletterSectionEdge {
  next: PrismicNewsletterSection
  node: PrismicNewsletterSection!
  previous: PrismicNewsletterSection
}

enum PrismicNewsletterSectionFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___button___html
  data___button___raw
  data___button___richText
  data___button___text
  data___confirmed___html
  data___confirmed___raw
  data___confirmed___richText
  data___confirmed___text
  data___confirmed_text___html
  data___confirmed_text___raw
  data___confirmed_text___richText
  data___confirmed_text___text
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___text___html
  data___text___raw
  data___text___richText
  data___text___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicNewsletterSectionFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicNewsletterSectionDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicNewsletterSectionGroupConnection {
  distinct(field: PrismicNewsletterSectionFieldsEnum!): [String!]!
  edges: [PrismicNewsletterSectionEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicNewsletterSectionFieldsEnum!, limit: Int, skip: Int): [PrismicNewsletterSectionGroupConnection!]!
  max(field: PrismicNewsletterSectionFieldsEnum!): Float
  min(field: PrismicNewsletterSectionFieldsEnum!): Float
  nodes: [PrismicNewsletterSection!]!
  pageInfo: PageInfo!
  sum(field: PrismicNewsletterSectionFieldsEnum!): Float
  totalCount: Int!
}

input PrismicNewsletterSectionSortInput {
  fields: [PrismicNewsletterSectionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicOrdersPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicOrdersPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicOrdersPageConnection {
  distinct(field: PrismicOrdersPageFieldsEnum!): [String!]!
  edges: [PrismicOrdersPageEdge!]!
  group(field: PrismicOrdersPageFieldsEnum!, limit: Int, skip: Int): [PrismicOrdersPageGroupConnection!]!
  max(field: PrismicOrdersPageFieldsEnum!): Float
  min(field: PrismicOrdersPageFieldsEnum!): Float
  nodes: [PrismicOrdersPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicOrdersPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicOrdersPageDataType {
  heading: PrismicStructuredTextType
  title: String
}

input PrismicOrdersPageDataTypeFilterInput {
  heading: PrismicStructuredTextTypeFilterInput
  title: StringQueryOperatorInput
}

type PrismicOrdersPageEdge {
  next: PrismicOrdersPage
  node: PrismicOrdersPage!
  previous: PrismicOrdersPage
}

enum PrismicOrdersPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicOrdersPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicOrdersPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicOrdersPageGroupConnection {
  distinct(field: PrismicOrdersPageFieldsEnum!): [String!]!
  edges: [PrismicOrdersPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicOrdersPageFieldsEnum!, limit: Int, skip: Int): [PrismicOrdersPageGroupConnection!]!
  max(field: PrismicOrdersPageFieldsEnum!): Float
  min(field: PrismicOrdersPageFieldsEnum!): Float
  nodes: [PrismicOrdersPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicOrdersPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicOrdersPageSortInput {
  fields: [PrismicOrdersPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicPasswordForgottenPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicPasswordForgottenPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicPasswordForgottenPageConnection {
  distinct(field: PrismicPasswordForgottenPageFieldsEnum!): [String!]!
  edges: [PrismicPasswordForgottenPageEdge!]!
  group(field: PrismicPasswordForgottenPageFieldsEnum!, limit: Int, skip: Int): [PrismicPasswordForgottenPageGroupConnection!]!
  max(field: PrismicPasswordForgottenPageFieldsEnum!): Float
  min(field: PrismicPasswordForgottenPageFieldsEnum!): Float
  nodes: [PrismicPasswordForgottenPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicPasswordForgottenPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicPasswordForgottenPageDataHeroImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicPasswordForgottenPageDataHeroImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicPasswordForgottenPageDataType {
  back_link: PrismicLinkType
  back_text: String
  button: String
  heading: PrismicStructuredTextType
  hero: PrismicPasswordForgottenPageDataHeroImageType
  intro: String
}

input PrismicPasswordForgottenPageDataTypeFilterInput {
  back_link: PrismicLinkTypeFilterInput
  back_text: StringQueryOperatorInput
  button: StringQueryOperatorInput
  heading: PrismicStructuredTextTypeFilterInput
  hero: PrismicPasswordForgottenPageDataHeroImageTypeFilterInput
  intro: StringQueryOperatorInput
}

type PrismicPasswordForgottenPageEdge {
  next: PrismicPasswordForgottenPage
  node: PrismicPasswordForgottenPage!
  previous: PrismicPasswordForgottenPage
}

enum PrismicPasswordForgottenPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___back_link___id
  data___back_link___isBroken
  data___back_link___lang
  data___back_link___link_type
  data___back_link___localFile___absolutePath
  data___back_link___localFile___accessTime
  data___back_link___localFile___atime
  data___back_link___localFile___atimeMs
  data___back_link___localFile___base
  data___back_link___localFile___birthTime
  data___back_link___localFile___birthtime
  data___back_link___localFile___birthtimeMs
  data___back_link___localFile___blksize
  data___back_link___localFile___blocks
  data___back_link___localFile___changeTime
  data___back_link___localFile___children
  data___back_link___localFile___childrenImageSharp
  data___back_link___localFile___ctime
  data___back_link___localFile___ctimeMs
  data___back_link___localFile___dev
  data___back_link___localFile___dir
  data___back_link___localFile___ext
  data___back_link___localFile___extension
  data___back_link___localFile___gid
  data___back_link___localFile___id
  data___back_link___localFile___ino
  data___back_link___localFile___mode
  data___back_link___localFile___modifiedTime
  data___back_link___localFile___mtime
  data___back_link___localFile___mtimeMs
  data___back_link___localFile___name
  data___back_link___localFile___nlink
  data___back_link___localFile___prettySize
  data___back_link___localFile___publicURL
  data___back_link___localFile___rdev
  data___back_link___localFile___relativeDirectory
  data___back_link___localFile___relativePath
  data___back_link___localFile___root
  data___back_link___localFile___size
  data___back_link___localFile___sourceInstanceName
  data___back_link___localFile___uid
  data___back_link___raw
  data___back_link___size
  data___back_link___slug
  data___back_link___tags
  data___back_link___target
  data___back_link___type
  data___back_link___uid
  data___back_link___url
  data___back_text
  data___button
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___hero___alt
  data___hero___copyright
  data___hero___dimensions___height
  data___hero___dimensions___width
  data___hero___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___localFile___absolutePath
  data___hero___localFile___accessTime
  data___hero___localFile___atime
  data___hero___localFile___atimeMs
  data___hero___localFile___base
  data___hero___localFile___birthTime
  data___hero___localFile___birthtime
  data___hero___localFile___birthtimeMs
  data___hero___localFile___blksize
  data___hero___localFile___blocks
  data___hero___localFile___changeTime
  data___hero___localFile___children
  data___hero___localFile___childrenImageSharp
  data___hero___localFile___ctime
  data___hero___localFile___ctimeMs
  data___hero___localFile___dev
  data___hero___localFile___dir
  data___hero___localFile___ext
  data___hero___localFile___extension
  data___hero___localFile___gid
  data___hero___localFile___id
  data___hero___localFile___ino
  data___hero___localFile___mode
  data___hero___localFile___modifiedTime
  data___hero___localFile___mtime
  data___hero___localFile___mtimeMs
  data___hero___localFile___name
  data___hero___localFile___nlink
  data___hero___localFile___prettySize
  data___hero___localFile___publicURL
  data___hero___localFile___rdev
  data___hero___localFile___relativeDirectory
  data___hero___localFile___relativePath
  data___hero___localFile___root
  data___hero___localFile___size
  data___hero___localFile___sourceInstanceName
  data___hero___localFile___uid
  data___hero___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___intro
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicPasswordForgottenPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicPasswordForgottenPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicPasswordForgottenPageGroupConnection {
  distinct(field: PrismicPasswordForgottenPageFieldsEnum!): [String!]!
  edges: [PrismicPasswordForgottenPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicPasswordForgottenPageFieldsEnum!, limit: Int, skip: Int): [PrismicPasswordForgottenPageGroupConnection!]!
  max(field: PrismicPasswordForgottenPageFieldsEnum!): Float
  min(field: PrismicPasswordForgottenPageFieldsEnum!): Float
  nodes: [PrismicPasswordForgottenPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicPasswordForgottenPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicPasswordForgottenPageSortInput {
  fields: [PrismicPasswordForgottenPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicPasswordResetPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicPasswordResetPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicPasswordResetPageConnection {
  distinct(field: PrismicPasswordResetPageFieldsEnum!): [String!]!
  edges: [PrismicPasswordResetPageEdge!]!
  group(field: PrismicPasswordResetPageFieldsEnum!, limit: Int, skip: Int): [PrismicPasswordResetPageGroupConnection!]!
  max(field: PrismicPasswordResetPageFieldsEnum!): Float
  min(field: PrismicPasswordResetPageFieldsEnum!): Float
  nodes: [PrismicPasswordResetPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicPasswordResetPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicPasswordResetPageDataHeroImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicPasswordResetPageDataHeroImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicPasswordResetPageDataType {
  back_link: PrismicLinkType
  back_text: String
  button: String
  heading: PrismicStructuredTextType
  hero: PrismicPasswordResetPageDataHeroImageType
  intro: String
}

input PrismicPasswordResetPageDataTypeFilterInput {
  back_link: PrismicLinkTypeFilterInput
  back_text: StringQueryOperatorInput
  button: StringQueryOperatorInput
  heading: PrismicStructuredTextTypeFilterInput
  hero: PrismicPasswordResetPageDataHeroImageTypeFilterInput
  intro: StringQueryOperatorInput
}

type PrismicPasswordResetPageEdge {
  next: PrismicPasswordResetPage
  node: PrismicPasswordResetPage!
  previous: PrismicPasswordResetPage
}

enum PrismicPasswordResetPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___back_link___id
  data___back_link___isBroken
  data___back_link___lang
  data___back_link___link_type
  data___back_link___localFile___absolutePath
  data___back_link___localFile___accessTime
  data___back_link___localFile___atime
  data___back_link___localFile___atimeMs
  data___back_link___localFile___base
  data___back_link___localFile___birthTime
  data___back_link___localFile___birthtime
  data___back_link___localFile___birthtimeMs
  data___back_link___localFile___blksize
  data___back_link___localFile___blocks
  data___back_link___localFile___changeTime
  data___back_link___localFile___children
  data___back_link___localFile___childrenImageSharp
  data___back_link___localFile___ctime
  data___back_link___localFile___ctimeMs
  data___back_link___localFile___dev
  data___back_link___localFile___dir
  data___back_link___localFile___ext
  data___back_link___localFile___extension
  data___back_link___localFile___gid
  data___back_link___localFile___id
  data___back_link___localFile___ino
  data___back_link___localFile___mode
  data___back_link___localFile___modifiedTime
  data___back_link___localFile___mtime
  data___back_link___localFile___mtimeMs
  data___back_link___localFile___name
  data___back_link___localFile___nlink
  data___back_link___localFile___prettySize
  data___back_link___localFile___publicURL
  data___back_link___localFile___rdev
  data___back_link___localFile___relativeDirectory
  data___back_link___localFile___relativePath
  data___back_link___localFile___root
  data___back_link___localFile___size
  data___back_link___localFile___sourceInstanceName
  data___back_link___localFile___uid
  data___back_link___raw
  data___back_link___size
  data___back_link___slug
  data___back_link___tags
  data___back_link___target
  data___back_link___type
  data___back_link___uid
  data___back_link___url
  data___back_text
  data___button
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___hero___alt
  data___hero___copyright
  data___hero___dimensions___height
  data___hero___dimensions___width
  data___hero___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero___localFile___absolutePath
  data___hero___localFile___accessTime
  data___hero___localFile___atime
  data___hero___localFile___atimeMs
  data___hero___localFile___base
  data___hero___localFile___birthTime
  data___hero___localFile___birthtime
  data___hero___localFile___birthtimeMs
  data___hero___localFile___blksize
  data___hero___localFile___blocks
  data___hero___localFile___changeTime
  data___hero___localFile___children
  data___hero___localFile___childrenImageSharp
  data___hero___localFile___ctime
  data___hero___localFile___ctimeMs
  data___hero___localFile___dev
  data___hero___localFile___dir
  data___hero___localFile___ext
  data___hero___localFile___extension
  data___hero___localFile___gid
  data___hero___localFile___id
  data___hero___localFile___ino
  data___hero___localFile___mode
  data___hero___localFile___modifiedTime
  data___hero___localFile___mtime
  data___hero___localFile___mtimeMs
  data___hero___localFile___name
  data___hero___localFile___nlink
  data___hero___localFile___prettySize
  data___hero___localFile___publicURL
  data___hero___localFile___rdev
  data___hero___localFile___relativeDirectory
  data___hero___localFile___relativePath
  data___hero___localFile___root
  data___hero___localFile___size
  data___hero___localFile___sourceInstanceName
  data___hero___localFile___uid
  data___hero___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___intro
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicPasswordResetPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicPasswordResetPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicPasswordResetPageGroupConnection {
  distinct(field: PrismicPasswordResetPageFieldsEnum!): [String!]!
  edges: [PrismicPasswordResetPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicPasswordResetPageFieldsEnum!, limit: Int, skip: Int): [PrismicPasswordResetPageGroupConnection!]!
  max(field: PrismicPasswordResetPageFieldsEnum!): Float
  min(field: PrismicPasswordResetPageFieldsEnum!): Float
  nodes: [PrismicPasswordResetPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicPasswordResetPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicPasswordResetPageSortInput {
  fields: [PrismicPasswordResetPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicProduct implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicProductDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicProductConnection {
  distinct(field: PrismicProductFieldsEnum!): [String!]!
  edges: [PrismicProductEdge!]!
  group(field: PrismicProductFieldsEnum!, limit: Int, skip: Int): [PrismicProductGroupConnection!]!
  max(field: PrismicProductFieldsEnum!): Float
  min(field: PrismicProductFieldsEnum!): Float
  nodes: [PrismicProduct!]!
  pageInfo: PageInfo!
  sum(field: PrismicProductFieldsEnum!): Float
  totalCount: Int!
}

type PrismicProductDataActiveSubstances {
  active_substance: PrismicLinkType
}

input PrismicProductDataActiveSubstancesFilterInput {
  active_substance: PrismicLinkTypeFilterInput
}

input PrismicProductDataActiveSubstancesFilterListInput {
  elemMatch: PrismicProductDataActiveSubstancesFilterInput
}

type PrismicProductDataGalleryImages {
  gallery_image: PrismicProductDataGalleryImagesGalleryImageImageType
}

input PrismicProductDataGalleryImagesFilterInput {
  gallery_image: PrismicProductDataGalleryImagesGalleryImageImageTypeFilterInput
}

input PrismicProductDataGalleryImagesFilterListInput {
  elemMatch: PrismicProductDataGalleryImagesFilterInput
}

type PrismicProductDataGalleryImagesGalleryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicProductDataGalleryImagesGalleryImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicProductDataGuaranteedWithout {
  item: String
}

input PrismicProductDataGuaranteedWithoutFilterInput {
  item: StringQueryOperatorInput
}

input PrismicProductDataGuaranteedWithoutFilterListInput {
  elemMatch: PrismicProductDataGuaranteedWithoutFilterInput
}

type PrismicProductDataImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicProductDataImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicProductDataListOfIngredients {
  ingredient_name: String
  ingredient_quantity: String
}

input PrismicProductDataListOfIngredientsFilterInput {
  ingredient_name: StringQueryOperatorInput
  ingredient_quantity: StringQueryOperatorInput
}

input PrismicProductDataListOfIngredientsFilterListInput {
  elemMatch: PrismicProductDataListOfIngredientsFilterInput
}

type PrismicProductDataPackProducts {
  pack_product: PrismicLinkType
}

input PrismicProductDataPackProductsFilterInput {
  pack_product: PrismicLinkTypeFilterInput
}

input PrismicProductDataPackProductsFilterListInput {
  elemMatch: PrismicProductDataPackProductsFilterInput
}

type PrismicProductDataProductEffectsList {
  product_effect: PrismicStructuredTextType
  product_effect_icon: String
}

input PrismicProductDataProductEffectsListFilterInput {
  product_effect: PrismicStructuredTextTypeFilterInput
  product_effect_icon: StringQueryOperatorInput
}

input PrismicProductDataProductEffectsListFilterListInput {
  elemMatch: PrismicProductDataProductEffectsListFilterInput
}

type PrismicProductDataProductIntegrationType implements Node {
  admin_graphql_api_id: String
  body_html: String
  children: [Node!]!
  created_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  handle: String
  id: ID!
  image: PrismicProductDataProductIntegrationTypeImage
  images: [PrismicProductDataProductIntegrationTypeImages]
  internal: Internal!
  options: [PrismicProductDataProductIntegrationTypeOptions]
  parent: Node
  prismicId: Float
  product_type: String
  published_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  published_scope: String
  status: String
  tags: String
  template_suffix: String
  title: String
  updated_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  variants: [PrismicProductDataProductIntegrationTypeVariants]
  vendor: String
}

type PrismicProductDataProductIntegrationTypeConnection {
  distinct(field: PrismicProductDataProductIntegrationTypeFieldsEnum!): [String!]!
  edges: [PrismicProductDataProductIntegrationTypeEdge!]!
  group(field: PrismicProductDataProductIntegrationTypeFieldsEnum!, limit: Int, skip: Int): [PrismicProductDataProductIntegrationTypeGroupConnection!]!
  max(field: PrismicProductDataProductIntegrationTypeFieldsEnum!): Float
  min(field: PrismicProductDataProductIntegrationTypeFieldsEnum!): Float
  nodes: [PrismicProductDataProductIntegrationType!]!
  pageInfo: PageInfo!
  sum(field: PrismicProductDataProductIntegrationTypeFieldsEnum!): Float
  totalCount: Int!
}

type PrismicProductDataProductIntegrationTypeEdge {
  next: PrismicProductDataProductIntegrationType
  node: PrismicProductDataProductIntegrationType!
  previous: PrismicProductDataProductIntegrationType
}

enum PrismicProductDataProductIntegrationTypeFieldsEnum {
  admin_graphql_api_id
  body_html
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  created_at
  handle
  id
  image___admin_graphql_api_id
  image___created_at
  image___height
  image___id
  image___position
  image___product_id
  image___src
  image___updated_at
  image___width
  images
  images___admin_graphql_api_id
  images___created_at
  images___height
  images___id
  images___position
  images___product_id
  images___src
  images___updated_at
  images___width
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  options
  options___id
  options___name
  options___position
  options___product_id
  options___values
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  product_type
  published_at
  published_scope
  status
  tags
  template_suffix
  title
  updated_at
  variants
  variants___admin_graphql_api_id
  variants___barcode
  variants___compare_at_price
  variants___created_at
  variants___fulfillment_service
  variants___grams
  variants___id
  variants___inventory_item_id
  variants___inventory_management
  variants___inventory_policy
  variants___inventory_quantity
  variants___old_inventory_quantity
  variants___option1
  variants___position
  variants___price
  variants___product_id
  variants___requires_shipping
  variants___sku
  variants___taxable
  variants___title
  variants___updated_at
  variants___weight
  variants___weight_unit
  vendor
}

input PrismicProductDataProductIntegrationTypeFilterInput {
  admin_graphql_api_id: StringQueryOperatorInput
  body_html: StringQueryOperatorInput
  children: NodeFilterListInput
  created_at: DateQueryOperatorInput
  handle: StringQueryOperatorInput
  id: StringQueryOperatorInput
  image: PrismicProductDataProductIntegrationTypeImageFilterInput
  images: PrismicProductDataProductIntegrationTypeImagesFilterListInput
  internal: InternalFilterInput
  options: PrismicProductDataProductIntegrationTypeOptionsFilterListInput
  parent: NodeFilterInput
  prismicId: FloatQueryOperatorInput
  product_type: StringQueryOperatorInput
  published_at: DateQueryOperatorInput
  published_scope: StringQueryOperatorInput
  status: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  template_suffix: StringQueryOperatorInput
  title: StringQueryOperatorInput
  updated_at: DateQueryOperatorInput
  variants: PrismicProductDataProductIntegrationTypeVariantsFilterListInput
  vendor: StringQueryOperatorInput
}

type PrismicProductDataProductIntegrationTypeGroupConnection {
  distinct(field: PrismicProductDataProductIntegrationTypeFieldsEnum!): [String!]!
  edges: [PrismicProductDataProductIntegrationTypeEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicProductDataProductIntegrationTypeFieldsEnum!, limit: Int, skip: Int): [PrismicProductDataProductIntegrationTypeGroupConnection!]!
  max(field: PrismicProductDataProductIntegrationTypeFieldsEnum!): Float
  min(field: PrismicProductDataProductIntegrationTypeFieldsEnum!): Float
  nodes: [PrismicProductDataProductIntegrationType!]!
  pageInfo: PageInfo!
  sum(field: PrismicProductDataProductIntegrationTypeFieldsEnum!): Float
  totalCount: Int!
}

type PrismicProductDataProductIntegrationTypeImage {
  admin_graphql_api_id: String
  created_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  height: Int
  id: Float
  position: Int
  product_id: Float
  src: String
  updated_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  width: Int
}

input PrismicProductDataProductIntegrationTypeImageFilterInput {
  admin_graphql_api_id: StringQueryOperatorInput
  created_at: DateQueryOperatorInput
  height: IntQueryOperatorInput
  id: FloatQueryOperatorInput
  position: IntQueryOperatorInput
  product_id: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  updated_at: DateQueryOperatorInput
  width: IntQueryOperatorInput
}

type PrismicProductDataProductIntegrationTypeImages {
  admin_graphql_api_id: String
  created_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  height: Int
  id: Float
  position: Int
  product_id: Float
  src: String
  updated_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  width: Int
}

input PrismicProductDataProductIntegrationTypeImagesFilterInput {
  admin_graphql_api_id: StringQueryOperatorInput
  created_at: DateQueryOperatorInput
  height: IntQueryOperatorInput
  id: FloatQueryOperatorInput
  position: IntQueryOperatorInput
  product_id: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  updated_at: DateQueryOperatorInput
  width: IntQueryOperatorInput
}

input PrismicProductDataProductIntegrationTypeImagesFilterListInput {
  elemMatch: PrismicProductDataProductIntegrationTypeImagesFilterInput
}

type PrismicProductDataProductIntegrationTypeOptions {
  id: Float
  name: String
  position: Int
  product_id: Float
  values: [String]
}

input PrismicProductDataProductIntegrationTypeOptionsFilterInput {
  id: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  position: IntQueryOperatorInput
  product_id: FloatQueryOperatorInput
  values: StringQueryOperatorInput
}

input PrismicProductDataProductIntegrationTypeOptionsFilterListInput {
  elemMatch: PrismicProductDataProductIntegrationTypeOptionsFilterInput
}

input PrismicProductDataProductIntegrationTypeSortInput {
  fields: [PrismicProductDataProductIntegrationTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicProductDataProductIntegrationTypeVariants {
  admin_graphql_api_id: String
  barcode: String
  compare_at_price: String
  created_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  fulfillment_service: String
  grams: Int
  id: Float
  inventory_item_id: Float
  inventory_management: String
  inventory_policy: String
  inventory_quantity: Int
  old_inventory_quantity: Int
  option1: String
  position: Int
  price: String
  product_id: Float
  requires_shipping: Boolean
  sku: String
  taxable: Boolean
  title: String
  updated_at(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  weight: Float
  weight_unit: String
}

input PrismicProductDataProductIntegrationTypeVariantsFilterInput {
  admin_graphql_api_id: StringQueryOperatorInput
  barcode: StringQueryOperatorInput
  compare_at_price: StringQueryOperatorInput
  created_at: DateQueryOperatorInput
  fulfillment_service: StringQueryOperatorInput
  grams: IntQueryOperatorInput
  id: FloatQueryOperatorInput
  inventory_item_id: FloatQueryOperatorInput
  inventory_management: StringQueryOperatorInput
  inventory_policy: StringQueryOperatorInput
  inventory_quantity: IntQueryOperatorInput
  old_inventory_quantity: IntQueryOperatorInput
  option1: StringQueryOperatorInput
  position: IntQueryOperatorInput
  price: StringQueryOperatorInput
  product_id: FloatQueryOperatorInput
  requires_shipping: BooleanQueryOperatorInput
  sku: StringQueryOperatorInput
  taxable: BooleanQueryOperatorInput
  title: StringQueryOperatorInput
  updated_at: DateQueryOperatorInput
  weight: FloatQueryOperatorInput
  weight_unit: StringQueryOperatorInput
}

input PrismicProductDataProductIntegrationTypeVariantsFilterListInput {
  elemMatch: PrismicProductDataProductIntegrationTypeVariantsFilterInput
}

type PrismicProductDataQuestions {
  question_heading: PrismicStructuredTextType
  question_text: PrismicStructuredTextType
}

input PrismicProductDataQuestionsFilterInput {
  question_heading: PrismicStructuredTextTypeFilterInput
  question_text: PrismicStructuredTextTypeFilterInput
}

input PrismicProductDataQuestionsFilterListInput {
  elemMatch: PrismicProductDataQuestionsFilterInput
}

type PrismicProductDataReviews {
  review_firstname: String
  review_lastname: String
  review_message: String
}

input PrismicProductDataReviewsFilterInput {
  review_firstname: StringQueryOperatorInput
  review_lastname: StringQueryOperatorInput
  review_message: StringQueryOperatorInput
}

input PrismicProductDataReviewsFilterListInput {
  elemMatch: PrismicProductDataReviewsFilterInput
}

type PrismicProductDataType {
  active_substances: [PrismicProductDataActiveSubstances]
  free_shipping: Boolean
  gallery_images: [PrismicProductDataGalleryImages]
  guaranteed_without: [PrismicProductDataGuaranteedWithout]
  hero_description: PrismicStructuredTextType
  hero_intro: PrismicStructuredTextType
  image: PrismicProductDataImageImageType
  list_of_ingredients: [PrismicProductDataListOfIngredients]
  main_ingredient: PrismicLinkType
  name: String
  pack_products: [PrismicProductDataPackProducts]
  precautions_for_use: PrismicStructuredTextType
  product: PrismicProductDataProductIntegrationType
  product_effects_list: [PrismicProductDataProductEffectsList]
  product_label: PrismicLinkType
  questions: [PrismicProductDataQuestions]
  reviews: [PrismicProductDataReviews]
  type: String
  usage_tips: PrismicStructuredTextType
  why_hedda: PrismicStructuredTextType
  why_hedda_heading: PrismicStructuredTextType
  why_hedda_image: PrismicProductDataWhyHeddaImageImageType
  why_supplement: PrismicStructuredTextType
  why_supplement_heading: PrismicStructuredTextType
  why_supplement_highlight: [PrismicProductDataWhySupplementHighlight]
}

input PrismicProductDataTypeFilterInput {
  active_substances: PrismicProductDataActiveSubstancesFilterListInput
  free_shipping: BooleanQueryOperatorInput
  gallery_images: PrismicProductDataGalleryImagesFilterListInput
  guaranteed_without: PrismicProductDataGuaranteedWithoutFilterListInput
  hero_description: PrismicStructuredTextTypeFilterInput
  hero_intro: PrismicStructuredTextTypeFilterInput
  image: PrismicProductDataImageImageTypeFilterInput
  list_of_ingredients: PrismicProductDataListOfIngredientsFilterListInput
  main_ingredient: PrismicLinkTypeFilterInput
  name: StringQueryOperatorInput
  pack_products: PrismicProductDataPackProductsFilterListInput
  precautions_for_use: PrismicStructuredTextTypeFilterInput
  product: PrismicProductDataProductIntegrationTypeFilterInput
  product_effects_list: PrismicProductDataProductEffectsListFilterListInput
  product_label: PrismicLinkTypeFilterInput
  questions: PrismicProductDataQuestionsFilterListInput
  reviews: PrismicProductDataReviewsFilterListInput
  type: StringQueryOperatorInput
  usage_tips: PrismicStructuredTextTypeFilterInput
  why_hedda: PrismicStructuredTextTypeFilterInput
  why_hedda_heading: PrismicStructuredTextTypeFilterInput
  why_hedda_image: PrismicProductDataWhyHeddaImageImageTypeFilterInput
  why_supplement: PrismicStructuredTextTypeFilterInput
  why_supplement_heading: PrismicStructuredTextTypeFilterInput
  why_supplement_highlight: PrismicProductDataWhySupplementHighlightFilterListInput
}

type PrismicProductDataWhyHeddaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicProductDataWhyHeddaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicProductDataWhySupplementHighlight {
  highlight_description: PrismicStructuredTextType
  highlight_heading: PrismicStructuredTextType
}

input PrismicProductDataWhySupplementHighlightFilterInput {
  highlight_description: PrismicStructuredTextTypeFilterInput
  highlight_heading: PrismicStructuredTextTypeFilterInput
}

input PrismicProductDataWhySupplementHighlightFilterListInput {
  elemMatch: PrismicProductDataWhySupplementHighlightFilterInput
}

type PrismicProductEdge {
  next: PrismicProduct
  node: PrismicProduct!
  previous: PrismicProduct
}

enum PrismicProductFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___active_substances
  data___active_substances___active_substance___id
  data___active_substances___active_substance___isBroken
  data___active_substances___active_substance___lang
  data___active_substances___active_substance___link_type
  data___active_substances___active_substance___raw
  data___active_substances___active_substance___size
  data___active_substances___active_substance___slug
  data___active_substances___active_substance___tags
  data___active_substances___active_substance___target
  data___active_substances___active_substance___type
  data___active_substances___active_substance___uid
  data___active_substances___active_substance___url
  data___free_shipping
  data___gallery_images
  data___gallery_images___gallery_image___alt
  data___gallery_images___gallery_image___copyright
  data___gallery_images___gallery_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___gallery_images___gallery_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___guaranteed_without
  data___guaranteed_without___item
  data___hero_description___html
  data___hero_description___raw
  data___hero_description___richText
  data___hero_description___text
  data___hero_intro___html
  data___hero_intro___raw
  data___hero_intro___richText
  data___hero_intro___text
  data___image___alt
  data___image___copyright
  data___image___dimensions___height
  data___image___dimensions___width
  data___image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___absolutePath
  data___image___localFile___accessTime
  data___image___localFile___atime
  data___image___localFile___atimeMs
  data___image___localFile___base
  data___image___localFile___birthTime
  data___image___localFile___birthtime
  data___image___localFile___birthtimeMs
  data___image___localFile___blksize
  data___image___localFile___blocks
  data___image___localFile___changeTime
  data___image___localFile___children
  data___image___localFile___childrenImageSharp
  data___image___localFile___ctime
  data___image___localFile___ctimeMs
  data___image___localFile___dev
  data___image___localFile___dir
  data___image___localFile___ext
  data___image___localFile___extension
  data___image___localFile___gid
  data___image___localFile___id
  data___image___localFile___ino
  data___image___localFile___mode
  data___image___localFile___modifiedTime
  data___image___localFile___mtime
  data___image___localFile___mtimeMs
  data___image___localFile___name
  data___image___localFile___nlink
  data___image___localFile___prettySize
  data___image___localFile___publicURL
  data___image___localFile___rdev
  data___image___localFile___relativeDirectory
  data___image___localFile___relativePath
  data___image___localFile___root
  data___image___localFile___size
  data___image___localFile___sourceInstanceName
  data___image___localFile___uid
  data___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___list_of_ingredients
  data___list_of_ingredients___ingredient_name
  data___list_of_ingredients___ingredient_quantity
  data___main_ingredient___id
  data___main_ingredient___isBroken
  data___main_ingredient___lang
  data___main_ingredient___link_type
  data___main_ingredient___localFile___absolutePath
  data___main_ingredient___localFile___accessTime
  data___main_ingredient___localFile___atime
  data___main_ingredient___localFile___atimeMs
  data___main_ingredient___localFile___base
  data___main_ingredient___localFile___birthTime
  data___main_ingredient___localFile___birthtime
  data___main_ingredient___localFile___birthtimeMs
  data___main_ingredient___localFile___blksize
  data___main_ingredient___localFile___blocks
  data___main_ingredient___localFile___changeTime
  data___main_ingredient___localFile___children
  data___main_ingredient___localFile___childrenImageSharp
  data___main_ingredient___localFile___ctime
  data___main_ingredient___localFile___ctimeMs
  data___main_ingredient___localFile___dev
  data___main_ingredient___localFile___dir
  data___main_ingredient___localFile___ext
  data___main_ingredient___localFile___extension
  data___main_ingredient___localFile___gid
  data___main_ingredient___localFile___id
  data___main_ingredient___localFile___ino
  data___main_ingredient___localFile___mode
  data___main_ingredient___localFile___modifiedTime
  data___main_ingredient___localFile___mtime
  data___main_ingredient___localFile___mtimeMs
  data___main_ingredient___localFile___name
  data___main_ingredient___localFile___nlink
  data___main_ingredient___localFile___prettySize
  data___main_ingredient___localFile___publicURL
  data___main_ingredient___localFile___rdev
  data___main_ingredient___localFile___relativeDirectory
  data___main_ingredient___localFile___relativePath
  data___main_ingredient___localFile___root
  data___main_ingredient___localFile___size
  data___main_ingredient___localFile___sourceInstanceName
  data___main_ingredient___localFile___uid
  data___main_ingredient___raw
  data___main_ingredient___size
  data___main_ingredient___slug
  data___main_ingredient___tags
  data___main_ingredient___target
  data___main_ingredient___type
  data___main_ingredient___uid
  data___main_ingredient___url
  data___name
  data___pack_products
  data___pack_products___pack_product___id
  data___pack_products___pack_product___isBroken
  data___pack_products___pack_product___lang
  data___pack_products___pack_product___link_type
  data___pack_products___pack_product___raw
  data___pack_products___pack_product___size
  data___pack_products___pack_product___slug
  data___pack_products___pack_product___tags
  data___pack_products___pack_product___target
  data___pack_products___pack_product___type
  data___pack_products___pack_product___uid
  data___pack_products___pack_product___url
  data___precautions_for_use___html
  data___precautions_for_use___raw
  data___precautions_for_use___richText
  data___precautions_for_use___text
  data___product___admin_graphql_api_id
  data___product___body_html
  data___product___children
  data___product___children___children
  data___product___children___id
  data___product___created_at
  data___product___handle
  data___product___id
  data___product___image___admin_graphql_api_id
  data___product___image___created_at
  data___product___image___height
  data___product___image___id
  data___product___image___position
  data___product___image___product_id
  data___product___image___src
  data___product___image___updated_at
  data___product___image___width
  data___product___images
  data___product___images___admin_graphql_api_id
  data___product___images___created_at
  data___product___images___height
  data___product___images___id
  data___product___images___position
  data___product___images___product_id
  data___product___images___src
  data___product___images___updated_at
  data___product___images___width
  data___product___internal___content
  data___product___internal___contentDigest
  data___product___internal___contentFilePath
  data___product___internal___description
  data___product___internal___fieldOwners
  data___product___internal___ignoreType
  data___product___internal___mediaType
  data___product___internal___owner
  data___product___internal___type
  data___product___options
  data___product___options___id
  data___product___options___name
  data___product___options___position
  data___product___options___product_id
  data___product___options___values
  data___product___parent___children
  data___product___parent___id
  data___product___prismicId
  data___product___product_type
  data___product___published_at
  data___product___published_scope
  data___product___status
  data___product___tags
  data___product___template_suffix
  data___product___title
  data___product___updated_at
  data___product___variants
  data___product___variants___admin_graphql_api_id
  data___product___variants___barcode
  data___product___variants___compare_at_price
  data___product___variants___created_at
  data___product___variants___fulfillment_service
  data___product___variants___grams
  data___product___variants___id
  data___product___variants___inventory_item_id
  data___product___variants___inventory_management
  data___product___variants___inventory_policy
  data___product___variants___inventory_quantity
  data___product___variants___old_inventory_quantity
  data___product___variants___option1
  data___product___variants___position
  data___product___variants___price
  data___product___variants___product_id
  data___product___variants___requires_shipping
  data___product___variants___sku
  data___product___variants___taxable
  data___product___variants___title
  data___product___variants___updated_at
  data___product___variants___weight
  data___product___variants___weight_unit
  data___product___vendor
  data___product_effects_list
  data___product_effects_list___product_effect___html
  data___product_effects_list___product_effect___raw
  data___product_effects_list___product_effect___richText
  data___product_effects_list___product_effect___text
  data___product_effects_list___product_effect_icon
  data___product_label___id
  data___product_label___isBroken
  data___product_label___lang
  data___product_label___link_type
  data___product_label___localFile___absolutePath
  data___product_label___localFile___accessTime
  data___product_label___localFile___atime
  data___product_label___localFile___atimeMs
  data___product_label___localFile___base
  data___product_label___localFile___birthTime
  data___product_label___localFile___birthtime
  data___product_label___localFile___birthtimeMs
  data___product_label___localFile___blksize
  data___product_label___localFile___blocks
  data___product_label___localFile___changeTime
  data___product_label___localFile___children
  data___product_label___localFile___childrenImageSharp
  data___product_label___localFile___ctime
  data___product_label___localFile___ctimeMs
  data___product_label___localFile___dev
  data___product_label___localFile___dir
  data___product_label___localFile___ext
  data___product_label___localFile___extension
  data___product_label___localFile___gid
  data___product_label___localFile___id
  data___product_label___localFile___ino
  data___product_label___localFile___mode
  data___product_label___localFile___modifiedTime
  data___product_label___localFile___mtime
  data___product_label___localFile___mtimeMs
  data___product_label___localFile___name
  data___product_label___localFile___nlink
  data___product_label___localFile___prettySize
  data___product_label___localFile___publicURL
  data___product_label___localFile___rdev
  data___product_label___localFile___relativeDirectory
  data___product_label___localFile___relativePath
  data___product_label___localFile___root
  data___product_label___localFile___size
  data___product_label___localFile___sourceInstanceName
  data___product_label___localFile___uid
  data___product_label___raw
  data___product_label___size
  data___product_label___slug
  data___product_label___tags
  data___product_label___target
  data___product_label___type
  data___product_label___uid
  data___product_label___url
  data___questions
  data___questions___question_heading___html
  data___questions___question_heading___raw
  data___questions___question_heading___richText
  data___questions___question_heading___text
  data___questions___question_text___html
  data___questions___question_text___raw
  data___questions___question_text___richText
  data___questions___question_text___text
  data___reviews
  data___reviews___review_firstname
  data___reviews___review_lastname
  data___reviews___review_message
  data___type
  data___usage_tips___html
  data___usage_tips___raw
  data___usage_tips___richText
  data___usage_tips___text
  data___why_hedda___html
  data___why_hedda___raw
  data___why_hedda___richText
  data___why_hedda___text
  data___why_hedda_heading___html
  data___why_hedda_heading___raw
  data___why_hedda_heading___richText
  data___why_hedda_heading___text
  data___why_hedda_image___alt
  data___why_hedda_image___copyright
  data___why_hedda_image___dimensions___height
  data___why_hedda_image___dimensions___width
  data___why_hedda_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_hedda_image___localFile___absolutePath
  data___why_hedda_image___localFile___accessTime
  data___why_hedda_image___localFile___atime
  data___why_hedda_image___localFile___atimeMs
  data___why_hedda_image___localFile___base
  data___why_hedda_image___localFile___birthTime
  data___why_hedda_image___localFile___birthtime
  data___why_hedda_image___localFile___birthtimeMs
  data___why_hedda_image___localFile___blksize
  data___why_hedda_image___localFile___blocks
  data___why_hedda_image___localFile___changeTime
  data___why_hedda_image___localFile___children
  data___why_hedda_image___localFile___childrenImageSharp
  data___why_hedda_image___localFile___ctime
  data___why_hedda_image___localFile___ctimeMs
  data___why_hedda_image___localFile___dev
  data___why_hedda_image___localFile___dir
  data___why_hedda_image___localFile___ext
  data___why_hedda_image___localFile___extension
  data___why_hedda_image___localFile___gid
  data___why_hedda_image___localFile___id
  data___why_hedda_image___localFile___ino
  data___why_hedda_image___localFile___mode
  data___why_hedda_image___localFile___modifiedTime
  data___why_hedda_image___localFile___mtime
  data___why_hedda_image___localFile___mtimeMs
  data___why_hedda_image___localFile___name
  data___why_hedda_image___localFile___nlink
  data___why_hedda_image___localFile___prettySize
  data___why_hedda_image___localFile___publicURL
  data___why_hedda_image___localFile___rdev
  data___why_hedda_image___localFile___relativeDirectory
  data___why_hedda_image___localFile___relativePath
  data___why_hedda_image___localFile___root
  data___why_hedda_image___localFile___size
  data___why_hedda_image___localFile___sourceInstanceName
  data___why_hedda_image___localFile___uid
  data___why_hedda_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___why_supplement___html
  data___why_supplement___raw
  data___why_supplement___richText
  data___why_supplement___text
  data___why_supplement_heading___html
  data___why_supplement_heading___raw
  data___why_supplement_heading___richText
  data___why_supplement_heading___text
  data___why_supplement_highlight
  data___why_supplement_highlight___highlight_description___html
  data___why_supplement_highlight___highlight_description___raw
  data___why_supplement_highlight___highlight_description___richText
  data___why_supplement_highlight___highlight_description___text
  data___why_supplement_highlight___highlight_heading___html
  data___why_supplement_highlight___highlight_heading___raw
  data___why_supplement_highlight___highlight_heading___richText
  data___why_supplement_highlight___highlight_heading___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicProductFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicProductDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicProductGroupConnection {
  distinct(field: PrismicProductFieldsEnum!): [String!]!
  edges: [PrismicProductEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicProductFieldsEnum!, limit: Int, skip: Int): [PrismicProductGroupConnection!]!
  max(field: PrismicProductFieldsEnum!): Float
  min(field: PrismicProductFieldsEnum!): Float
  nodes: [PrismicProduct!]!
  pageInfo: PageInfo!
  sum(field: PrismicProductFieldsEnum!): Float
  totalCount: Int!
}

type PrismicProductPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicProductPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicProductPageConnection {
  distinct(field: PrismicProductPageFieldsEnum!): [String!]!
  edges: [PrismicProductPageEdge!]!
  group(field: PrismicProductPageFieldsEnum!, limit: Int, skip: Int): [PrismicProductPageGroupConnection!]!
  max(field: PrismicProductPageFieldsEnum!): Float
  min(field: PrismicProductPageFieldsEnum!): Float
  nodes: [PrismicProductPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicProductPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicProductPageDataType {
  frequency_text: PrismicStructuredTextType
  nutritional_information: String
  recommended_for_you: String
  reviews: String
}

input PrismicProductPageDataTypeFilterInput {
  frequency_text: PrismicStructuredTextTypeFilterInput
  nutritional_information: StringQueryOperatorInput
  recommended_for_you: StringQueryOperatorInput
  reviews: StringQueryOperatorInput
}

type PrismicProductPageEdge {
  next: PrismicProductPage
  node: PrismicProductPage!
  previous: PrismicProductPage
}

enum PrismicProductPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___frequency_text___html
  data___frequency_text___raw
  data___frequency_text___richText
  data___frequency_text___text
  data___nutritional_information
  data___recommended_for_you
  data___reviews
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicProductPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicProductPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicProductPageGroupConnection {
  distinct(field: PrismicProductPageFieldsEnum!): [String!]!
  edges: [PrismicProductPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicProductPageFieldsEnum!, limit: Int, skip: Int): [PrismicProductPageGroupConnection!]!
  max(field: PrismicProductPageFieldsEnum!): Float
  min(field: PrismicProductPageFieldsEnum!): Float
  nodes: [PrismicProductPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicProductPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicProductPageSortInput {
  fields: [PrismicProductPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicProductSortInput {
  fields: [PrismicProductFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicProductsPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicProductsPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicProductsPageConnection {
  distinct(field: PrismicProductsPageFieldsEnum!): [String!]!
  edges: [PrismicProductsPageEdge!]!
  group(field: PrismicProductsPageFieldsEnum!, limit: Int, skip: Int): [PrismicProductsPageGroupConnection!]!
  max(field: PrismicProductsPageFieldsEnum!): Float
  min(field: PrismicProductsPageFieldsEnum!): Float
  nodes: [PrismicProductsPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicProductsPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicProductsPageDataHeroBestsellersImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicProductsPageDataHeroBestsellersImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicProductsPageDataHeroPackImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  """
  Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  """
  fixed(
    """The fixed image height to render, in px."""
    height: Int

    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    """
    quality: Int

    """The fixed image width to render, in px."""
    width: Int = 8192
  ): ImgixFixed

  """
  Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  """
  fluid(
    """
    The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    imgixParams: ImgixParamsInput = {}

    """
    The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    """
    maxHeight: Int

    """
    The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    """
    maxWidth: Int = 8192

    """
    Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    """
    placeholderImgixParams: ImgixParamsInput = {}

    """
    A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    """
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    This argument is used to set parameters to instruct imgix to transform the image. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    imgixParams: ImgixParamsInput

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    """
    placeholder: ImgixPlaceholder

    """
    This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
            
            All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    """
    placeholderImgixParams: ImgixParamsInput

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    """
    srcSetMaxWidth: Int = 8192

    """
    This argument determines the minimum srcset width that is generated. The default is 100px.
    """
    srcSetMinWidth: Int = 100

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    
    By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    """
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  """A plain imgix URL with the URL and params applied."""
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicProductsPageDataHeroPackImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicProductsPageDataListProducts {
  product: PrismicLinkType
}

input PrismicProductsPageDataListProductsFilterInput {
  product: PrismicLinkTypeFilterInput
}

input PrismicProductsPageDataListProductsFilterListInput {
  elemMatch: PrismicProductsPageDataListProductsFilterInput
}

type PrismicProductsPageDataType {
  filters: String
  hero_bestsellers_image: PrismicProductsPageDataHeroBestsellersImageImageType
  hero_bestsellers_text: String
  hero_heading: PrismicStructuredTextType
  hero_pack_image: PrismicProductsPageDataHeroPackImageImageType
  hero_pack_text: String
  hero_tag_link: PrismicLinkType
  hero_tag_text: String
  hero_text: PrismicStructuredTextType
  list_products: [PrismicProductsPageDataListProducts]
  seo_description: String
  seo_title: String
  sort: String
  title: String
}

input PrismicProductsPageDataTypeFilterInput {
  filters: StringQueryOperatorInput
  hero_bestsellers_image: PrismicProductsPageDataHeroBestsellersImageImageTypeFilterInput
  hero_bestsellers_text: StringQueryOperatorInput
  hero_heading: PrismicStructuredTextTypeFilterInput
  hero_pack_image: PrismicProductsPageDataHeroPackImageImageTypeFilterInput
  hero_pack_text: StringQueryOperatorInput
  hero_tag_link: PrismicLinkTypeFilterInput
  hero_tag_text: StringQueryOperatorInput
  hero_text: PrismicStructuredTextTypeFilterInput
  list_products: PrismicProductsPageDataListProductsFilterListInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  sort: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

type PrismicProductsPageEdge {
  next: PrismicProductsPage
  node: PrismicProductsPage!
  previous: PrismicProductsPage
}

enum PrismicProductsPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___filters
  data___hero_bestsellers_image___alt
  data___hero_bestsellers_image___copyright
  data___hero_bestsellers_image___dimensions___height
  data___hero_bestsellers_image___dimensions___width
  data___hero_bestsellers_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_image___localFile___absolutePath
  data___hero_bestsellers_image___localFile___accessTime
  data___hero_bestsellers_image___localFile___atime
  data___hero_bestsellers_image___localFile___atimeMs
  data___hero_bestsellers_image___localFile___base
  data___hero_bestsellers_image___localFile___birthTime
  data___hero_bestsellers_image___localFile___birthtime
  data___hero_bestsellers_image___localFile___birthtimeMs
  data___hero_bestsellers_image___localFile___blksize
  data___hero_bestsellers_image___localFile___blocks
  data___hero_bestsellers_image___localFile___changeTime
  data___hero_bestsellers_image___localFile___children
  data___hero_bestsellers_image___localFile___childrenImageSharp
  data___hero_bestsellers_image___localFile___ctime
  data___hero_bestsellers_image___localFile___ctimeMs
  data___hero_bestsellers_image___localFile___dev
  data___hero_bestsellers_image___localFile___dir
  data___hero_bestsellers_image___localFile___ext
  data___hero_bestsellers_image___localFile___extension
  data___hero_bestsellers_image___localFile___gid
  data___hero_bestsellers_image___localFile___id
  data___hero_bestsellers_image___localFile___ino
  data___hero_bestsellers_image___localFile___mode
  data___hero_bestsellers_image___localFile___modifiedTime
  data___hero_bestsellers_image___localFile___mtime
  data___hero_bestsellers_image___localFile___mtimeMs
  data___hero_bestsellers_image___localFile___name
  data___hero_bestsellers_image___localFile___nlink
  data___hero_bestsellers_image___localFile___prettySize
  data___hero_bestsellers_image___localFile___publicURL
  data___hero_bestsellers_image___localFile___rdev
  data___hero_bestsellers_image___localFile___relativeDirectory
  data___hero_bestsellers_image___localFile___relativePath
  data___hero_bestsellers_image___localFile___root
  data___hero_bestsellers_image___localFile___size
  data___hero_bestsellers_image___localFile___sourceInstanceName
  data___hero_bestsellers_image___localFile___uid
  data___hero_bestsellers_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_bestsellers_text
  data___hero_heading___html
  data___hero_heading___raw
  data___hero_heading___richText
  data___hero_heading___text
  data___hero_pack_image___alt
  data___hero_pack_image___copyright
  data___hero_pack_image___dimensions___height
  data___hero_pack_image___dimensions___width
  data___hero_pack_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_image___localFile___absolutePath
  data___hero_pack_image___localFile___accessTime
  data___hero_pack_image___localFile___atime
  data___hero_pack_image___localFile___atimeMs
  data___hero_pack_image___localFile___base
  data___hero_pack_image___localFile___birthTime
  data___hero_pack_image___localFile___birthtime
  data___hero_pack_image___localFile___birthtimeMs
  data___hero_pack_image___localFile___blksize
  data___hero_pack_image___localFile___blocks
  data___hero_pack_image___localFile___changeTime
  data___hero_pack_image___localFile___children
  data___hero_pack_image___localFile___childrenImageSharp
  data___hero_pack_image___localFile___ctime
  data___hero_pack_image___localFile___ctimeMs
  data___hero_pack_image___localFile___dev
  data___hero_pack_image___localFile___dir
  data___hero_pack_image___localFile___ext
  data___hero_pack_image___localFile___extension
  data___hero_pack_image___localFile___gid
  data___hero_pack_image___localFile___id
  data___hero_pack_image___localFile___ino
  data___hero_pack_image___localFile___mode
  data___hero_pack_image___localFile___modifiedTime
  data___hero_pack_image___localFile___mtime
  data___hero_pack_image___localFile___mtimeMs
  data___hero_pack_image___localFile___name
  data___hero_pack_image___localFile___nlink
  data___hero_pack_image___localFile___prettySize
  data___hero_pack_image___localFile___publicURL
  data___hero_pack_image___localFile___rdev
  data___hero_pack_image___localFile___relativeDirectory
  data___hero_pack_image___localFile___relativePath
  data___hero_pack_image___localFile___root
  data___hero_pack_image___localFile___size
  data___hero_pack_image___localFile___sourceInstanceName
  data___hero_pack_image___localFile___uid
  data___hero_pack_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_pack_text
  data___hero_tag_link___id
  data___hero_tag_link___isBroken
  data___hero_tag_link___lang
  data___hero_tag_link___link_type
  data___hero_tag_link___localFile___absolutePath
  data___hero_tag_link___localFile___accessTime
  data___hero_tag_link___localFile___atime
  data___hero_tag_link___localFile___atimeMs
  data___hero_tag_link___localFile___base
  data___hero_tag_link___localFile___birthTime
  data___hero_tag_link___localFile___birthtime
  data___hero_tag_link___localFile___birthtimeMs
  data___hero_tag_link___localFile___blksize
  data___hero_tag_link___localFile___blocks
  data___hero_tag_link___localFile___changeTime
  data___hero_tag_link___localFile___children
  data___hero_tag_link___localFile___childrenImageSharp
  data___hero_tag_link___localFile___ctime
  data___hero_tag_link___localFile___ctimeMs
  data___hero_tag_link___localFile___dev
  data___hero_tag_link___localFile___dir
  data___hero_tag_link___localFile___ext
  data___hero_tag_link___localFile___extension
  data___hero_tag_link___localFile___gid
  data___hero_tag_link___localFile___id
  data___hero_tag_link___localFile___ino
  data___hero_tag_link___localFile___mode
  data___hero_tag_link___localFile___modifiedTime
  data___hero_tag_link___localFile___mtime
  data___hero_tag_link___localFile___mtimeMs
  data___hero_tag_link___localFile___name
  data___hero_tag_link___localFile___nlink
  data___hero_tag_link___localFile___prettySize
  data___hero_tag_link___localFile___publicURL
  data___hero_tag_link___localFile___rdev
  data___hero_tag_link___localFile___relativeDirectory
  data___hero_tag_link___localFile___relativePath
  data___hero_tag_link___localFile___root
  data___hero_tag_link___localFile___size
  data___hero_tag_link___localFile___sourceInstanceName
  data___hero_tag_link___localFile___uid
  data___hero_tag_link___raw
  data___hero_tag_link___size
  data___hero_tag_link___slug
  data___hero_tag_link___tags
  data___hero_tag_link___target
  data___hero_tag_link___type
  data___hero_tag_link___uid
  data___hero_tag_link___url
  data___hero_tag_text
  data___hero_text___html
  data___hero_text___raw
  data___hero_text___richText
  data___hero_text___text
  data___list_products
  data___list_products___product___id
  data___list_products___product___isBroken
  data___list_products___product___lang
  data___list_products___product___link_type
  data___list_products___product___raw
  data___list_products___product___size
  data___list_products___product___slug
  data___list_products___product___tags
  data___list_products___product___target
  data___list_products___product___type
  data___list_products___product___uid
  data___list_products___product___url
  data___seo_description
  data___seo_title
  data___sort
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicProductsPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicProductsPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicProductsPageGroupConnection {
  distinct(field: PrismicProductsPageFieldsEnum!): [String!]!
  edges: [PrismicProductsPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicProductsPageFieldsEnum!, limit: Int, skip: Int): [PrismicProductsPageGroupConnection!]!
  max(field: PrismicProductsPageFieldsEnum!): Float
  min(field: PrismicProductsPageFieldsEnum!): Float
  nodes: [PrismicProductsPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicProductsPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicProductsPageSortInput {
  fields: [PrismicProductsPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicSearchPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicSearchPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicSearchPageConnection {
  distinct(field: PrismicSearchPageFieldsEnum!): [String!]!
  edges: [PrismicSearchPageEdge!]!
  group(field: PrismicSearchPageFieldsEnum!, limit: Int, skip: Int): [PrismicSearchPageGroupConnection!]!
  max(field: PrismicSearchPageFieldsEnum!): Float
  min(field: PrismicSearchPageFieldsEnum!): Float
  nodes: [PrismicSearchPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicSearchPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicSearchPageDataType {
  heading: PrismicStructuredTextType
}

input PrismicSearchPageDataTypeFilterInput {
  heading: PrismicStructuredTextTypeFilterInput
}

type PrismicSearchPageEdge {
  next: PrismicSearchPage
  node: PrismicSearchPage!
  previous: PrismicSearchPage
}

enum PrismicSearchPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicSearchPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicSearchPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicSearchPageGroupConnection {
  distinct(field: PrismicSearchPageFieldsEnum!): [String!]!
  edges: [PrismicSearchPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicSearchPageFieldsEnum!, limit: Int, skip: Int): [PrismicSearchPageGroupConnection!]!
  max(field: PrismicSearchPageFieldsEnum!): Float
  min(field: PrismicSearchPageFieldsEnum!): Float
  nodes: [PrismicSearchPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicSearchPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicSearchPageSortInput {
  fields: [PrismicSearchPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

interface PrismicSharedSliceType {
  id: ID!
  slice_label: String
  slice_type: String!
  variation: String!
  version: String!
}

interface PrismicSliceType {
  id: ID!
  slice_label: String
  slice_type: String!
}

"""
Text content with rich formatting capabilities using a Prismic format called Structured Text.
"""
scalar PrismicStructuredText

input PrismicStructuredTextQueryOperatorInput {
  eq: PrismicStructuredText
  in: [PrismicStructuredText]
  ne: PrismicStructuredText
  nin: [PrismicStructuredText]
}

type PrismicStructuredTextType {
  html: String
  raw: PrismicStructuredText! @deprecated(reason: "This field has been renamed to `richText`. The `richText` field has the same value the `raw` field.")
  richText: PrismicStructuredText!
  text: String
}

input PrismicStructuredTextTypeFilterInput {
  html: StringQueryOperatorInput
  raw: PrismicStructuredTextQueryOperatorInput
  richText: PrismicStructuredTextQueryOperatorInput
  text: StringQueryOperatorInput
}

type PrismicSubscriptionsPage implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicSubscriptionsPageDataType!
  dataRaw: JSON!
  first_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicSubscriptionsPageConnection {
  distinct(field: PrismicSubscriptionsPageFieldsEnum!): [String!]!
  edges: [PrismicSubscriptionsPageEdge!]!
  group(field: PrismicSubscriptionsPageFieldsEnum!, limit: Int, skip: Int): [PrismicSubscriptionsPageGroupConnection!]!
  max(field: PrismicSubscriptionsPageFieldsEnum!): Float
  min(field: PrismicSubscriptionsPageFieldsEnum!): Float
  nodes: [PrismicSubscriptionsPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicSubscriptionsPageFieldsEnum!): Float
  totalCount: Int!
}

type PrismicSubscriptionsPageDataType {
  heading: PrismicStructuredTextType
  title: String
}

input PrismicSubscriptionsPageDataTypeFilterInput {
  heading: PrismicStructuredTextTypeFilterInput
  title: StringQueryOperatorInput
}

type PrismicSubscriptionsPageEdge {
  next: PrismicSubscriptionsPage
  node: PrismicSubscriptionsPage!
  previous: PrismicSubscriptionsPage
}

enum PrismicSubscriptionsPageFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___heading___html
  data___heading___raw
  data___heading___richText
  data___heading___text
  data___title
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicSubscriptionsPageFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicSubscriptionsPageDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicSubscriptionsPageGroupConnection {
  distinct(field: PrismicSubscriptionsPageFieldsEnum!): [String!]!
  edges: [PrismicSubscriptionsPageEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicSubscriptionsPageFieldsEnum!, limit: Int, skip: Int): [PrismicSubscriptionsPageGroupConnection!]!
  max(field: PrismicSubscriptionsPageFieldsEnum!): Float
  min(field: PrismicSubscriptionsPageFieldsEnum!): Float
  nodes: [PrismicSubscriptionsPage!]!
  pageInfo: PageInfo!
  sum(field: PrismicSubscriptionsPageFieldsEnum!): Float
  totalCount: Int!
}

input PrismicSubscriptionsPageSortInput {
  fields: [PrismicSubscriptionsPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicTypePathType implements Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  kind: String!
  parent: Node
  path: [String!]!
  type: String!
}

type PrismicTypePathTypeConnection {
  distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
  edges: [PrismicTypePathTypeEdge!]!
  group(field: PrismicTypePathTypeFieldsEnum!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
  max(field: PrismicTypePathTypeFieldsEnum!): Float
  min(field: PrismicTypePathTypeFieldsEnum!): Float
  nodes: [PrismicTypePathType!]!
  pageInfo: PageInfo!
  sum(field: PrismicTypePathTypeFieldsEnum!): Float
  totalCount: Int!
}

type PrismicTypePathTypeEdge {
  next: PrismicTypePathType
  node: PrismicTypePathType!
  previous: PrismicTypePathType
}

enum PrismicTypePathTypeFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  kind
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  path
  type
}

input PrismicTypePathTypeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  kind: StringQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

type PrismicTypePathTypeGroupConnection {
  distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
  edges: [PrismicTypePathTypeEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicTypePathTypeFieldsEnum!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
  max(field: PrismicTypePathTypeFieldsEnum!): Float
  min(field: PrismicTypePathTypeFieldsEnum!): Float
  nodes: [PrismicTypePathType!]!
  pageInfo: PageInfo!
  sum(field: PrismicTypePathTypeFieldsEnum!): Float
  totalCount: Int!
}

input PrismicTypePathTypeSortInput {
  fields: [PrismicTypePathTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type Query {
  allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
  allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
  allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
  allPrismicAboutPage(filter: PrismicAboutPageFilterInput, limit: Int, skip: Int, sort: PrismicAboutPageSortInput): PrismicAboutPageConnection!
  allPrismicAccountPage(filter: PrismicAccountPageFilterInput, limit: Int, skip: Int, sort: PrismicAccountPageSortInput): PrismicAccountPageConnection!
  allPrismicActivateAccountPage(filter: PrismicActivateAccountPageFilterInput, limit: Int, skip: Int, sort: PrismicActivateAccountPageSortInput): PrismicActivateAccountPageConnection!
  allPrismicActiveSubstance(filter: PrismicActiveSubstanceFilterInput, limit: Int, skip: Int, sort: PrismicActiveSubstanceSortInput): PrismicActiveSubstanceConnection!
  allPrismicBlogAuthor(filter: PrismicBlogAuthorFilterInput, limit: Int, skip: Int, sort: PrismicBlogAuthorSortInput): PrismicBlogAuthorConnection!
  allPrismicBlogCategory(filter: PrismicBlogCategoryFilterInput, limit: Int, skip: Int, sort: PrismicBlogCategorySortInput): PrismicBlogCategoryConnection!
  allPrismicBlogPage(filter: PrismicBlogPageFilterInput, limit: Int, skip: Int, sort: PrismicBlogPageSortInput): PrismicBlogPageConnection!
  allPrismicBlogPost(filter: PrismicBlogPostFilterInput, limit: Int, skip: Int, sort: PrismicBlogPostSortInput): PrismicBlogPostConnection!
  allPrismicBlogPostPage(filter: PrismicBlogPostPageFilterInput, limit: Int, skip: Int, sort: PrismicBlogPostPageSortInput): PrismicBlogPostPageConnection!
  allPrismicBlogSubCategory(filter: PrismicBlogSubCategoryFilterInput, limit: Int, skip: Int, sort: PrismicBlogSubCategorySortInput): PrismicBlogSubCategoryConnection!
  allPrismicCartPage(filter: PrismicCartPageFilterInput, limit: Int, skip: Int, sort: PrismicCartPageSortInput): PrismicCartPageConnection!
  allPrismicCreateAccountPage(filter: PrismicCreateAccountPageFilterInput, limit: Int, skip: Int, sort: PrismicCreateAccountPageSortInput): PrismicCreateAccountPageConnection!
  allPrismicDownloadAppSection(filter: PrismicDownloadAppSectionFilterInput, limit: Int, skip: Int, sort: PrismicDownloadAppSectionSortInput): PrismicDownloadAppSectionConnection!
  allPrismicEmbedType(filter: PrismicEmbedTypeFilterInput, limit: Int, skip: Int, sort: PrismicEmbedTypeSortInput): PrismicEmbedTypeConnection!
  allPrismicFaqSection(filter: PrismicFaqSectionFilterInput, limit: Int, skip: Int, sort: PrismicFaqSectionSortInput): PrismicFaqSectionConnection!
  allPrismicHeddaPage(filter: PrismicHeddaPageFilterInput, limit: Int, skip: Int, sort: PrismicHeddaPageSortInput): PrismicHeddaPageConnection!
  allPrismicHelpCategory(filter: PrismicHelpCategoryFilterInput, limit: Int, skip: Int, sort: PrismicHelpCategorySortInput): PrismicHelpCategoryConnection!
  allPrismicHelpCategoryPage(filter: PrismicHelpCategoryPageFilterInput, limit: Int, skip: Int, sort: PrismicHelpCategoryPageSortInput): PrismicHelpCategoryPageConnection!
  allPrismicHelpPage(filter: PrismicHelpPageFilterInput, limit: Int, skip: Int, sort: PrismicHelpPageSortInput): PrismicHelpPageConnection!
  allPrismicHelpQuestion(filter: PrismicHelpQuestionFilterInput, limit: Int, skip: Int, sort: PrismicHelpQuestionSortInput): PrismicHelpQuestionConnection!
  allPrismicHighlightsSection(filter: PrismicHighlightsSectionFilterInput, limit: Int, skip: Int, sort: PrismicHighlightsSectionSortInput): PrismicHighlightsSectionConnection!
  allPrismicHomePage(filter: PrismicHomePageFilterInput, limit: Int, skip: Int, sort: PrismicHomePageSortInput): PrismicHomePageConnection!
  allPrismicIconList(filter: PrismicIconListFilterInput, limit: Int, skip: Int, sort: PrismicIconListSortInput): PrismicIconListConnection!
  allPrismicLegalPage(filter: PrismicLegalPageFilterInput, limit: Int, skip: Int, sort: PrismicLegalPageSortInput): PrismicLegalPageConnection!
  allPrismicLoginPage(filter: PrismicLoginPageFilterInput, limit: Int, skip: Int, sort: PrismicLoginPageSortInput): PrismicLoginPageConnection!
  allPrismicMedicalExpert(filter: PrismicMedicalExpertFilterInput, limit: Int, skip: Int, sort: PrismicMedicalExpertSortInput): PrismicMedicalExpertConnection!
  allPrismicMobileAppPage(filter: PrismicMobileAppPageFilterInput, limit: Int, skip: Int, sort: PrismicMobileAppPageSortInput): PrismicMobileAppPageConnection!
  allPrismicNewsletterSection(filter: PrismicNewsletterSectionFilterInput, limit: Int, skip: Int, sort: PrismicNewsletterSectionSortInput): PrismicNewsletterSectionConnection!
  allPrismicOrdersPage(filter: PrismicOrdersPageFilterInput, limit: Int, skip: Int, sort: PrismicOrdersPageSortInput): PrismicOrdersPageConnection!
  allPrismicPasswordForgottenPage(filter: PrismicPasswordForgottenPageFilterInput, limit: Int, skip: Int, sort: PrismicPasswordForgottenPageSortInput): PrismicPasswordForgottenPageConnection!
  allPrismicPasswordResetPage(filter: PrismicPasswordResetPageFilterInput, limit: Int, skip: Int, sort: PrismicPasswordResetPageSortInput): PrismicPasswordResetPageConnection!
  allPrismicProduct(filter: PrismicProductFilterInput, limit: Int, skip: Int, sort: PrismicProductSortInput): PrismicProductConnection!
  allPrismicProductDataProductIntegrationType(filter: PrismicProductDataProductIntegrationTypeFilterInput, limit: Int, skip: Int, sort: PrismicProductDataProductIntegrationTypeSortInput): PrismicProductDataProductIntegrationTypeConnection!
  allPrismicProductPage(filter: PrismicProductPageFilterInput, limit: Int, skip: Int, sort: PrismicProductPageSortInput): PrismicProductPageConnection!
  allPrismicProductsPage(filter: PrismicProductsPageFilterInput, limit: Int, skip: Int, sort: PrismicProductsPageSortInput): PrismicProductsPageConnection!
  allPrismicSearchPage(filter: PrismicSearchPageFilterInput, limit: Int, skip: Int, sort: PrismicSearchPageSortInput): PrismicSearchPageConnection!
  allPrismicSubscriptionsPage(filter: PrismicSubscriptionsPageFilterInput, limit: Int, skip: Int, sort: PrismicSubscriptionsPageSortInput): PrismicSubscriptionsPageConnection!
  allPrismicTypePathType(filter: PrismicTypePathTypeFilterInput, limit: Int, skip: Int, sort: PrismicTypePathTypeSortInput): PrismicTypePathTypeConnection!
  allShopifyExternalVideo(filter: ShopifyExternalVideoFilterInput, limit: Int, skip: Int, sort: ShopifyExternalVideoSortInput): ShopifyExternalVideoConnection!
  allShopifyMedia(filter: ShopifyMediaFilterInput, limit: Int, skip: Int, sort: ShopifyMediaSortInput): ShopifyMediaConnection!
  allShopifyMediaImage(filter: ShopifyMediaImageFilterInput, limit: Int, skip: Int, sort: ShopifyMediaImageSortInput): ShopifyMediaImageConnection!
  allShopifyMetafield(filter: ShopifyMetafieldFilterInput, limit: Int, skip: Int, sort: ShopifyMetafieldSortInput): ShopifyMetafieldConnection!
  allShopifyModel3D(filter: ShopifyModel3dFilterInput, limit: Int, skip: Int, sort: ShopifyModel3dSortInput): ShopifyModel3dConnection!
  allShopifyProduct(filter: ShopifyProductFilterInput, limit: Int, skip: Int, sort: ShopifyProductSortInput): ShopifyProductConnection!
  allShopifyProductSellingPlan(filter: ShopifyProductSellingPlanFilterInput, limit: Int, skip: Int, sort: ShopifyProductSellingPlanSortInput): ShopifyProductSellingPlanConnection!
  allShopifyProductVariant(filter: ShopifyProductVariantFilterInput, limit: Int, skip: Int, sort: ShopifyProductVariantSortInput): ShopifyProductVariantConnection!
  allShopifyVideo(filter: ShopifyVideoFilterInput, limit: Int, skip: Int, sort: ShopifyVideoSortInput): ShopifyVideoConnection!
  allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
  allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: SiteFunctionSortInput): SiteFunctionConnection!
  allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
  allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
  directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
  file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
  imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
  prismicAboutPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicAboutPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicAboutPage
  prismicAccountPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicAccountPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicAccountPage
  prismicActivateAccountPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicActivateAccountPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicActivateAccountPage
  prismicActiveSubstance(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicActiveSubstanceDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicActiveSubstance
  prismicBlogAuthor(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicBlogAuthorDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicBlogAuthor
  prismicBlogCategory(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicBlogCategoryDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicBlogCategory
  prismicBlogPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicBlogPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicBlogPage
  prismicBlogPost(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicBlogPostDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicBlogPost
  prismicBlogPostPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicBlogPostPage
  prismicBlogSubCategory(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicBlogSubCategoryDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicBlogSubCategory
  prismicCartPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicCartPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicCartPage
  prismicCreateAccountPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicCreateAccountPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicCreateAccountPage
  prismicDownloadAppSection(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicDownloadAppSectionDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicDownloadAppSection
  prismicEmbedType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): PrismicEmbedType
  prismicFaqSection(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicFaqSectionDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicFaqSection
  prismicHeddaPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicHeddaPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicHeddaPage
  prismicHelpCategory(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicHelpCategoryDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicHelpCategory
  prismicHelpCategoryPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicHelpCategoryPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicHelpCategoryPage
  prismicHelpPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicHelpPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicHelpPage
  prismicHelpQuestion(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicHelpQuestionDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicHelpQuestion
  prismicHighlightsSection(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicHighlightsSectionDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicHighlightsSection
  prismicHomePage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicHomePageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicHomePage
  prismicIconList(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicIconListDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicIconList
  prismicLegalPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicLegalPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicLegalPage
  prismicLoginPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicLoginPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicLoginPage
  prismicMedicalExpert(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicMedicalExpertDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicMedicalExpert
  prismicMobileAppPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicMobileAppPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicMobileAppPage
  prismicNewsletterSection(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicNewsletterSectionDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicNewsletterSection
  prismicOrdersPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicOrdersPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicOrdersPage
  prismicPasswordForgottenPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicPasswordForgottenPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicPasswordForgottenPage
  prismicPasswordResetPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicPasswordResetPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicPasswordResetPage
  prismicProduct(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicProductDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicProduct
  prismicProductDataProductIntegrationType(admin_graphql_api_id: StringQueryOperatorInput, body_html: StringQueryOperatorInput, children: NodeFilterListInput, created_at: DateQueryOperatorInput, handle: StringQueryOperatorInput, id: StringQueryOperatorInput, image: PrismicProductDataProductIntegrationTypeImageFilterInput, images: PrismicProductDataProductIntegrationTypeImagesFilterListInput, internal: InternalFilterInput, options: PrismicProductDataProductIntegrationTypeOptionsFilterListInput, parent: NodeFilterInput, prismicId: FloatQueryOperatorInput, product_type: StringQueryOperatorInput, published_at: DateQueryOperatorInput, published_scope: StringQueryOperatorInput, status: StringQueryOperatorInput, tags: StringQueryOperatorInput, template_suffix: StringQueryOperatorInput, title: StringQueryOperatorInput, updated_at: DateQueryOperatorInput, variants: PrismicProductDataProductIntegrationTypeVariantsFilterListInput, vendor: StringQueryOperatorInput): PrismicProductDataProductIntegrationType
  prismicProductPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicProductPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicProductPage
  prismicProductsPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicProductsPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicProductsPage
  prismicSearchPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicSearchPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicSearchPage
  prismicSubscriptionsPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicSubscriptionsPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicSubscriptionsPage
  prismicTypePathType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, kind: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, type: StringQueryOperatorInput): PrismicTypePathType
  shopifyExternalVideo(alt: StringQueryOperatorInput, children: NodeFilterListInput, embeddedUrl: StringQueryOperatorInput, host: ShopifyMediaHostQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, mediaContentType: ShopifyMediaContentTypeQueryOperatorInput, mediaErrors: ShopifyMediaErrorFilterListInput, parent: NodeFilterInput, preview: ShopifyMediaPreviewImageFilterInput, shopifyId: StringQueryOperatorInput, status: ShopifyMediaStatusQueryOperatorInput): ShopifyExternalVideo
  shopifyMedia(alt: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, mediaContentType: ShopifyMediaContentTypeQueryOperatorInput, mediaErrors: ShopifyMediaErrorFilterListInput, parent: NodeFilterInput, preview: ShopifyMediaPreviewImageFilterInput, shopifyId: StringQueryOperatorInput, status: ShopifyMediaStatusQueryOperatorInput): ShopifyMedia
  shopifyMediaImage(alt: StringQueryOperatorInput, children: NodeFilterListInput, createdAt: DateQueryOperatorInput, fileErrors: ShopifyFileErrorFilterListInput, fileStatus: ShopifyFileStatusQueryOperatorInput, id: StringQueryOperatorInput, image: ShopifyImageFilterInput, internal: InternalFilterInput, mediaContentType: ShopifyMediaContentTypeQueryOperatorInput, mediaErrors: ShopifyMediaErrorFilterListInput, mimeType: StringQueryOperatorInput, parent: NodeFilterInput, preview: ShopifyMediaPreviewImageFilterInput, shopifyId: StringQueryOperatorInput, status: ShopifyMediaStatusQueryOperatorInput): ShopifyMediaImage
  shopifyMetafield(children: NodeFilterListInput, createdAt: DateQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, key: StringQueryOperatorInput, legacyResourceId: StringQueryOperatorInput, namespace: StringQueryOperatorInput, ownerType: ShopifyMetafieldOwnerTypeQueryOperatorInput, parent: NodeFilterInput, shopifyId: StringQueryOperatorInput, type: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput, value: StringQueryOperatorInput, valueType: StringQueryOperatorInput): ShopifyMetafield
  shopifyModel3D(alt: StringQueryOperatorInput, children: NodeFilterListInput, filename: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, mediaContentType: ShopifyMediaContentTypeQueryOperatorInput, mediaErrors: ShopifyMediaErrorFilterListInput, originalSource: ShopifyModel3dSourceFilterInput, parent: NodeFilterInput, preview: ShopifyMediaPreviewImageFilterInput, shopifyId: StringQueryOperatorInput, sources: ShopifyModel3dSourceFilterListInput, status: ShopifyMediaStatusQueryOperatorInput): ShopifyModel3d
  shopifyProduct(children: NodeFilterListInput, createdAt: DateQueryOperatorInput, description: StringQueryOperatorInput, descriptionHtml: StringQueryOperatorInput, featuredImage: ShopifyImageFilterInput, featuredMedia: ShopifyMediaFilterInput, feedback: ShopifyResourceFeedbackFilterInput, giftCardTemplateSuffix: StringQueryOperatorInput, handle: StringQueryOperatorInput, hasOnlyDefaultVariant: BooleanQueryOperatorInput, hasOutOfStockVariants: BooleanQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isGiftCard: BooleanQueryOperatorInput, legacyResourceId: StringQueryOperatorInput, media: ShopifyMediaFilterListInput, mediaCount: IntQueryOperatorInput, metafield: ShopifyMetafieldFilterInput, metafields: ShopifyMetafieldFilterListInput, onlineStorePreviewUrl: StringQueryOperatorInput, onlineStoreUrl: StringQueryOperatorInput, options: ShopifyProductOptionFilterListInput, parent: NodeFilterInput, priceRange: ShopifyProductPriceRangeFilterInput, priceRangeV2: ShopifyProductPriceRangeV2FilterInput, productType: StringQueryOperatorInput, publishedAt: DateQueryOperatorInput, requiresSellingPlan: BooleanQueryOperatorInput, sellingPlanGroupCount: IntQueryOperatorInput, seo: ShopifySEOFilterInput, shopifyId: StringQueryOperatorInput, status: ShopifyProductStatusQueryOperatorInput, storefrontId: StringQueryOperatorInput, tags: StringQueryOperatorInput, templateSuffix: StringQueryOperatorInput, title: StringQueryOperatorInput, totalInventory: IntQueryOperatorInput, totalVariants: IntQueryOperatorInput, tracksInventory: BooleanQueryOperatorInput, updatedAt: DateQueryOperatorInput, variants: ShopifyProductVariantFilterListInput, vendor: StringQueryOperatorInput): ShopifyProduct
  shopifyProductSellingPlan(children: NodeFilterListInput, handle: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, sellingPlanGroups: ShopifyProductSellingPlanSellingPlanGroupsFilterInput): ShopifyProductSellingPlan
  shopifyProductVariant(availableForSale: BooleanQueryOperatorInput, barcode: StringQueryOperatorInput, children: NodeFilterListInput, compareAtPrice: FloatQueryOperatorInput, createdAt: DateQueryOperatorInput, displayName: StringQueryOperatorInput, id: StringQueryOperatorInput, image: ShopifyImageFilterInput, internal: InternalFilterInput, inventoryPolicy: ShopifyProductVariantInventoryPolicyQueryOperatorInput, inventoryQuantity: IntQueryOperatorInput, legacyResourceId: StringQueryOperatorInput, media: ShopifyMediaFilterListInput, metafield: ShopifyMetafieldFilterInput, metafields: ShopifyMetafieldFilterListInput, parent: NodeFilterInput, position: IntQueryOperatorInput, presentmentPrices: ShopifyProductVariantPricePairFilterListInput, price: FloatQueryOperatorInput, product: ShopifyProductFilterInput, requiresShipping: BooleanQueryOperatorInput, selectedOptions: ShopifySelectedOptionFilterListInput, sellingPlanGroupCount: IntQueryOperatorInput, shopifyId: StringQueryOperatorInput, sku: StringQueryOperatorInput, storefrontId: StringQueryOperatorInput, taxCode: StringQueryOperatorInput, taxable: BooleanQueryOperatorInput, title: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput, weight: FloatQueryOperatorInput, weightUnit: ShopifyWeightUnitQueryOperatorInput): ShopifyProductVariant
  shopifyVideo(alt: StringQueryOperatorInput, children: NodeFilterListInput, filename: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, mediaContentType: ShopifyMediaContentTypeQueryOperatorInput, mediaErrors: ShopifyMediaErrorFilterListInput, originalSource: ShopifyVideoSourceFilterInput, parent: NodeFilterInput, preview: ShopifyMediaPreviewImageFilterInput, shopifyId: StringQueryOperatorInput, sources: ShopifyVideoSourceFilterListInput, status: ShopifyMediaStatusQueryOperatorInput): ShopifyVideo
  site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, graphqlTypegen: BooleanQueryOperatorInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
  siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
  siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
  sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput): SitePage
  sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: JSONQueryOperatorInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type ShopifyApp {
  shopifyId: String!
}

type ShopifyAppFeedback {
  app: ShopifyApp!
  link: ShopifyLink
  messages: [ShopifyUserError!]!
}

input ShopifyAppFeedbackFilterInput {
  app: ShopifyAppFilterInput
  link: ShopifyLinkFilterInput
  messages: ShopifyUserErrorFilterListInput
}

input ShopifyAppFeedbackFilterListInput {
  elemMatch: ShopifyAppFeedbackFilterInput
}

input ShopifyAppFilterInput {
  shopifyId: StringQueryOperatorInput
}

enum ShopifyCountryCode {
  AC
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AN
  AO
  AR
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MK
  ML
  MM
  MN
  MO
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PS
  PT
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SY
  SZ
  TA
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VN
  VU
  WF
  WS
  XK
  YE
  YT
  ZA
  ZM
  ZW
  ZZ
}

enum ShopifyCurrencyCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTN
  BWP
  BYN
  BYR @deprecated(reason: "`BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.")
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JEP
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KID
  KMF
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LTL
  LVL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STD
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEF @deprecated(reason: "`VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.")
  VES
  VND
  VUV
  WST
  XAF
  XCD
  XOF
  XPF
  XXX
  YER
  ZAR
  ZMW
}

input ShopifyCurrencyCodeQueryOperatorInput {
  eq: ShopifyCurrencyCode
  in: [ShopifyCurrencyCode]
  ne: ShopifyCurrencyCode
  nin: [ShopifyCurrencyCode]
}

type ShopifyEditableProperty {
  locked: Boolean!
  reason: String
}

type ShopifyExternalVideo implements Node & ShopifyMedia {
  alt: String
  children: [Node!]!
  embeddedUrl: String!
  host: ShopifyMediaHost!
  id: ID!
  internal: Internal!
  mediaContentType: ShopifyMediaContentType!
  mediaErrors: [ShopifyMediaError!]!
  parent: Node
  preview: ShopifyMediaPreviewImage
  shopifyId: String!
  status: ShopifyMediaStatus!
}

type ShopifyExternalVideoConnection {
  distinct(field: ShopifyExternalVideoFieldsEnum!): [String!]!
  edges: [ShopifyExternalVideoEdge!]!
  group(field: ShopifyExternalVideoFieldsEnum!, limit: Int, skip: Int): [ShopifyExternalVideoGroupConnection!]!
  max(field: ShopifyExternalVideoFieldsEnum!): Float
  min(field: ShopifyExternalVideoFieldsEnum!): Float
  nodes: [ShopifyExternalVideo!]!
  pageInfo: PageInfo!
  sum(field: ShopifyExternalVideoFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyExternalVideoEdge {
  next: ShopifyExternalVideo
  node: ShopifyExternalVideo!
  previous: ShopifyExternalVideo
}

enum ShopifyExternalVideoFieldsEnum {
  alt
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  embeddedUrl
  host
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mediaContentType
  mediaErrors
  mediaErrors___code
  mediaErrors___details
  mediaErrors___message
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  preview___image___altText
  preview___image___height
  preview___image___originalSrc
  preview___image___src
  preview___image___transformedSrc
  preview___image___width
  preview___status
  shopifyId
  status
}

input ShopifyExternalVideoFilterInput {
  alt: StringQueryOperatorInput
  children: NodeFilterListInput
  embeddedUrl: StringQueryOperatorInput
  host: ShopifyMediaHostQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  mediaContentType: ShopifyMediaContentTypeQueryOperatorInput
  mediaErrors: ShopifyMediaErrorFilterListInput
  parent: NodeFilterInput
  preview: ShopifyMediaPreviewImageFilterInput
  shopifyId: StringQueryOperatorInput
  status: ShopifyMediaStatusQueryOperatorInput
}

type ShopifyExternalVideoGroupConnection {
  distinct(field: ShopifyExternalVideoFieldsEnum!): [String!]!
  edges: [ShopifyExternalVideoEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyExternalVideoFieldsEnum!, limit: Int, skip: Int): [ShopifyExternalVideoGroupConnection!]!
  max(field: ShopifyExternalVideoFieldsEnum!): Float
  min(field: ShopifyExternalVideoFieldsEnum!): Float
  nodes: [ShopifyExternalVideo!]!
  pageInfo: PageInfo!
  sum(field: ShopifyExternalVideoFieldsEnum!): Float
  totalCount: Int!
}

input ShopifyExternalVideoSortInput {
  fields: [ShopifyExternalVideoFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ShopifyFileError {
  code: ShopifyFileErrorCode!
  details: String
  message: String!
}

enum ShopifyFileErrorCode {
  EXTERNAL_VIDEO_EMBED_DISABLED
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO
  EXTERNAL_VIDEO_NOT_FOUND
  EXTERNAL_VIDEO_UNLISTED
  FILE_STORAGE_LIMIT_EXCEEDED
  GENERIC_FILE_DOWNLOAD_FAILURE
  GENERIC_FILE_INVALID_SIZE
  IMAGE_DOWNLOAD_FAILURE
  IMAGE_PROCESSING_FAILURE
  INVALID_IMAGE_ASPECT_RATIO
  INVALID_IMAGE_FILE_SIZE
  INVALID_IMAGE_RESOLUTION
  INVALID_SIGNED_URL
  MEDIA_TIMEOUT_ERROR
  MODEL3D_GLB_OUTPUT_CREATION_ERROR
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR
  MODEL3D_THUMBNAIL_GENERATION_ERROR
  MODEL3D_VALIDATION_ERROR
  UNKNOWN
  UNSUPPORTED_IMAGE_FILE_TYPE
  VIDEO_INVALID_FILETYPE_ERROR
  VIDEO_MAX_DURATION_ERROR
  VIDEO_MAX_HEIGHT_ERROR
  VIDEO_MAX_WIDTH_ERROR
  VIDEO_METADATA_READ_ERROR
  VIDEO_MIN_DURATION_ERROR
  VIDEO_MIN_HEIGHT_ERROR
  VIDEO_MIN_WIDTH_ERROR
  VIDEO_VALIDATION_ERROR
}

input ShopifyFileErrorCodeQueryOperatorInput {
  eq: ShopifyFileErrorCode
  in: [ShopifyFileErrorCode]
  ne: ShopifyFileErrorCode
  nin: [ShopifyFileErrorCode]
}

input ShopifyFileErrorFilterInput {
  code: ShopifyFileErrorCodeQueryOperatorInput
  details: StringQueryOperatorInput
  message: StringQueryOperatorInput
}

input ShopifyFileErrorFilterListInput {
  elemMatch: ShopifyFileErrorFilterInput
}

enum ShopifyFileStatus {
  FAILED
  PROCESSING
  READY
  UPLOADED
}

input ShopifyFileStatusQueryOperatorInput {
  eq: ShopifyFileStatus
  in: [ShopifyFileStatus]
  ne: ShopifyFileStatus
  nin: [ShopifyFileStatus]
}

type ShopifyImage {
  altText: String
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: GatsbyImagePlaceholder

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int
  ): JSON
  height: Int
  originalSrc: String!
  src: String!
  transformedSrc: String!
  width: Int
}

input ShopifyImageFilterInput {
  altText: StringQueryOperatorInput
  height: IntQueryOperatorInput
  originalSrc: StringQueryOperatorInput
  src: StringQueryOperatorInput
  transformedSrc: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

type ShopifyLink {
  label: String!
  url: String!
}

input ShopifyLinkFilterInput {
  label: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

interface ShopifyMedia implements Node {
  alt: String
  children: [Node!]!
  id: ID!
  internal: Internal!
  mediaContentType: ShopifyMediaContentType!
  mediaErrors: [ShopifyMediaError!]!
  parent: Node
  preview: ShopifyMediaPreviewImage
  shopifyId: String!
  status: ShopifyMediaStatus!
}

type ShopifyMediaConnection {
  distinct(field: ShopifyMediaFieldsEnum!): [String!]!
  edges: [ShopifyMediaEdge!]!
  group(field: ShopifyMediaFieldsEnum!, limit: Int, skip: Int): [ShopifyMediaGroupConnection!]!
  max(field: ShopifyMediaFieldsEnum!): Float
  min(field: ShopifyMediaFieldsEnum!): Float
  nodes: [ShopifyMedia!]!
  pageInfo: PageInfo!
  sum(field: ShopifyMediaFieldsEnum!): Float
  totalCount: Int!
}

enum ShopifyMediaContentType {
  EXTERNAL_VIDEO
  IMAGE
  MODEL_3D
  VIDEO
}

input ShopifyMediaContentTypeQueryOperatorInput {
  eq: ShopifyMediaContentType
  in: [ShopifyMediaContentType]
  ne: ShopifyMediaContentType
  nin: [ShopifyMediaContentType]
}

type ShopifyMediaEdge {
  next: ShopifyMedia
  node: ShopifyMedia!
  previous: ShopifyMedia
}

type ShopifyMediaError {
  code: ShopifyMediaErrorCode!
  details: String
  message: String!
}

enum ShopifyMediaErrorCode {
  EXTERNAL_VIDEO_EMBED_DISABLED
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO
  EXTERNAL_VIDEO_NOT_FOUND
  EXTERNAL_VIDEO_UNLISTED
  FILE_STORAGE_LIMIT_EXCEEDED
  GENERIC_FILE_DOWNLOAD_FAILURE
  GENERIC_FILE_INVALID_SIZE
  IMAGE_DOWNLOAD_FAILURE
  IMAGE_PROCESSING_FAILURE
  INVALID_IMAGE_ASPECT_RATIO
  INVALID_IMAGE_FILE_SIZE
  INVALID_IMAGE_RESOLUTION
  INVALID_SIGNED_URL
  MEDIA_TIMEOUT_ERROR
  MODEL3D_GLB_OUTPUT_CREATION_ERROR
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR
  MODEL3D_THUMBNAIL_GENERATION_ERROR
  MODEL3D_VALIDATION_ERROR
  UNKNOWN
  UNSUPPORTED_IMAGE_FILE_TYPE
  VIDEO_INVALID_FILETYPE_ERROR
  VIDEO_MAX_DURATION_ERROR
  VIDEO_MAX_HEIGHT_ERROR
  VIDEO_MAX_WIDTH_ERROR
  VIDEO_METADATA_READ_ERROR
  VIDEO_MIN_DURATION_ERROR
  VIDEO_MIN_HEIGHT_ERROR
  VIDEO_MIN_WIDTH_ERROR
  VIDEO_VALIDATION_ERROR
}

input ShopifyMediaErrorCodeQueryOperatorInput {
  eq: ShopifyMediaErrorCode
  in: [ShopifyMediaErrorCode]
  ne: ShopifyMediaErrorCode
  nin: [ShopifyMediaErrorCode]
}

input ShopifyMediaErrorFilterInput {
  code: ShopifyMediaErrorCodeQueryOperatorInput
  details: StringQueryOperatorInput
  message: StringQueryOperatorInput
}

input ShopifyMediaErrorFilterListInput {
  elemMatch: ShopifyMediaErrorFilterInput
}

enum ShopifyMediaFieldsEnum {
  alt
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mediaContentType
  mediaErrors
  mediaErrors___code
  mediaErrors___details
  mediaErrors___message
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  preview___image___altText
  preview___image___height
  preview___image___originalSrc
  preview___image___src
  preview___image___transformedSrc
  preview___image___width
  preview___status
  shopifyId
  status
}

input ShopifyMediaFilterInput {
  alt: StringQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  mediaContentType: ShopifyMediaContentTypeQueryOperatorInput
  mediaErrors: ShopifyMediaErrorFilterListInput
  parent: NodeFilterInput
  preview: ShopifyMediaPreviewImageFilterInput
  shopifyId: StringQueryOperatorInput
  status: ShopifyMediaStatusQueryOperatorInput
}

input ShopifyMediaFilterListInput {
  elemMatch: ShopifyMediaFilterInput
}

type ShopifyMediaGroupConnection {
  distinct(field: ShopifyMediaFieldsEnum!): [String!]!
  edges: [ShopifyMediaEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyMediaFieldsEnum!, limit: Int, skip: Int): [ShopifyMediaGroupConnection!]!
  max(field: ShopifyMediaFieldsEnum!): Float
  min(field: ShopifyMediaFieldsEnum!): Float
  nodes: [ShopifyMedia!]!
  pageInfo: PageInfo!
  sum(field: ShopifyMediaFieldsEnum!): Float
  totalCount: Int!
}

enum ShopifyMediaHost {
  VIMEO
  YOUTUBE
}

input ShopifyMediaHostQueryOperatorInput {
  eq: ShopifyMediaHost
  in: [ShopifyMediaHost]
  ne: ShopifyMediaHost
  nin: [ShopifyMediaHost]
}

type ShopifyMediaImage implements Node & ShopifyMedia {
  alt: String
  children: [Node!]!
  createdAt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  fileErrors: [ShopifyFileError!]!
  fileStatus: ShopifyFileStatus!
  id: ID!
  image: ShopifyImage
  internal: Internal!
  mediaContentType: ShopifyMediaContentType!
  mediaErrors: [ShopifyMediaError!]!
  mimeType: String
  parent: Node
  preview: ShopifyMediaPreviewImage
  shopifyId: String!
  status: ShopifyMediaStatus!
}

type ShopifyMediaImageConnection {
  distinct(field: ShopifyMediaImageFieldsEnum!): [String!]!
  edges: [ShopifyMediaImageEdge!]!
  group(field: ShopifyMediaImageFieldsEnum!, limit: Int, skip: Int): [ShopifyMediaImageGroupConnection!]!
  max(field: ShopifyMediaImageFieldsEnum!): Float
  min(field: ShopifyMediaImageFieldsEnum!): Float
  nodes: [ShopifyMediaImage!]!
  pageInfo: PageInfo!
  sum(field: ShopifyMediaImageFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyMediaImageEdge {
  next: ShopifyMediaImage
  node: ShopifyMediaImage!
  previous: ShopifyMediaImage
}

enum ShopifyMediaImageFieldsEnum {
  alt
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  createdAt
  fileErrors
  fileErrors___code
  fileErrors___details
  fileErrors___message
  fileStatus
  id
  image___altText
  image___height
  image___originalSrc
  image___src
  image___transformedSrc
  image___width
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mediaContentType
  mediaErrors
  mediaErrors___code
  mediaErrors___details
  mediaErrors___message
  mimeType
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  preview___image___altText
  preview___image___height
  preview___image___originalSrc
  preview___image___src
  preview___image___transformedSrc
  preview___image___width
  preview___status
  shopifyId
  status
}

input ShopifyMediaImageFilterInput {
  alt: StringQueryOperatorInput
  children: NodeFilterListInput
  createdAt: DateQueryOperatorInput
  fileErrors: ShopifyFileErrorFilterListInput
  fileStatus: ShopifyFileStatusQueryOperatorInput
  id: StringQueryOperatorInput
  image: ShopifyImageFilterInput
  internal: InternalFilterInput
  mediaContentType: ShopifyMediaContentTypeQueryOperatorInput
  mediaErrors: ShopifyMediaErrorFilterListInput
  mimeType: StringQueryOperatorInput
  parent: NodeFilterInput
  preview: ShopifyMediaPreviewImageFilterInput
  shopifyId: StringQueryOperatorInput
  status: ShopifyMediaStatusQueryOperatorInput
}

type ShopifyMediaImageGroupConnection {
  distinct(field: ShopifyMediaImageFieldsEnum!): [String!]!
  edges: [ShopifyMediaImageEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyMediaImageFieldsEnum!, limit: Int, skip: Int): [ShopifyMediaImageGroupConnection!]!
  max(field: ShopifyMediaImageFieldsEnum!): Float
  min(field: ShopifyMediaImageFieldsEnum!): Float
  nodes: [ShopifyMediaImage!]!
  pageInfo: PageInfo!
  sum(field: ShopifyMediaImageFieldsEnum!): Float
  totalCount: Int!
}

input ShopifyMediaImageSortInput {
  fields: [ShopifyMediaImageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ShopifyMediaPreviewImage {
  image: ShopifyImage
  status: ShopifyMediaPreviewImageStatus!
}

input ShopifyMediaPreviewImageFilterInput {
  image: ShopifyImageFilterInput
  status: ShopifyMediaPreviewImageStatusQueryOperatorInput
}

enum ShopifyMediaPreviewImageStatus {
  FAILED
  PROCESSING
  READY
  UPLOADED
}

input ShopifyMediaPreviewImageStatusQueryOperatorInput {
  eq: ShopifyMediaPreviewImageStatus
  in: [ShopifyMediaPreviewImageStatus]
  ne: ShopifyMediaPreviewImageStatus
  nin: [ShopifyMediaPreviewImageStatus]
}

input ShopifyMediaSortInput {
  fields: [ShopifyMediaFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum ShopifyMediaStatus {
  FAILED
  PROCESSING
  READY
  UPLOADED
}

input ShopifyMediaStatusQueryOperatorInput {
  eq: ShopifyMediaStatus
  in: [ShopifyMediaStatus]
  ne: ShopifyMediaStatus
  nin: [ShopifyMediaStatus]
}

type ShopifyMetafield implements Node {
  children: [Node!]!
  createdAt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  description: String
  id: ID!
  internal: Internal!
  key: String!
  legacyResourceId: String!
  namespace: String!
  ownerType: ShopifyMetafieldOwnerType!
  parent: Node
  shopifyId: String!
  type: String!
  updatedAt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  value: String!
  valueType: String! @deprecated(reason: "`valueType` is deprecated and replaced by `type` in API version 2021-07.")
}

type ShopifyMetafieldConnection {
  distinct(field: ShopifyMetafieldFieldsEnum!): [String!]!
  edges: [ShopifyMetafieldEdge!]!
  group(field: ShopifyMetafieldFieldsEnum!, limit: Int, skip: Int): [ShopifyMetafieldGroupConnection!]!
  max(field: ShopifyMetafieldFieldsEnum!): Float
  min(field: ShopifyMetafieldFieldsEnum!): Float
  nodes: [ShopifyMetafield!]!
  pageInfo: PageInfo!
  sum(field: ShopifyMetafieldFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyMetafieldEdge {
  next: ShopifyMetafield
  node: ShopifyMetafield!
  previous: ShopifyMetafield
}

enum ShopifyMetafieldFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  createdAt
  description
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  key
  legacyResourceId
  namespace
  ownerType
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  shopifyId
  type
  updatedAt
  value
  valueType
}

input ShopifyMetafieldFilterInput {
  children: NodeFilterListInput
  createdAt: DateQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  key: StringQueryOperatorInput
  legacyResourceId: StringQueryOperatorInput
  namespace: StringQueryOperatorInput
  ownerType: ShopifyMetafieldOwnerTypeQueryOperatorInput
  parent: NodeFilterInput
  shopifyId: StringQueryOperatorInput
  type: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  value: StringQueryOperatorInput
  valueType: StringQueryOperatorInput
}

input ShopifyMetafieldFilterListInput {
  elemMatch: ShopifyMetafieldFilterInput
}

type ShopifyMetafieldGroupConnection {
  distinct(field: ShopifyMetafieldFieldsEnum!): [String!]!
  edges: [ShopifyMetafieldEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyMetafieldFieldsEnum!, limit: Int, skip: Int): [ShopifyMetafieldGroupConnection!]!
  max(field: ShopifyMetafieldFieldsEnum!): Float
  min(field: ShopifyMetafieldFieldsEnum!): Float
  nodes: [ShopifyMetafield!]!
  pageInfo: PageInfo!
  sum(field: ShopifyMetafieldFieldsEnum!): Float
  totalCount: Int!
}

enum ShopifyMetafieldOwnerType {
  ARTICLE
  BLOG
  COLLECTION
  CUSTOMER
  DRAFTORDER
  ORDER
  PAGE
  PRODUCT
  PRODUCTIMAGE
  PRODUCTVARIANT
  SHOP
}

input ShopifyMetafieldOwnerTypeQueryOperatorInput {
  eq: ShopifyMetafieldOwnerType
  in: [ShopifyMetafieldOwnerType]
  ne: ShopifyMetafieldOwnerType
  nin: [ShopifyMetafieldOwnerType]
}

input ShopifyMetafieldSortInput {
  fields: [ShopifyMetafieldFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ShopifyModel3d implements Node & ShopifyMedia {
  alt: String
  children: [Node!]!
  filename: String!
  id: ID!
  internal: Internal!
  mediaContentType: ShopifyMediaContentType!
  mediaErrors: [ShopifyMediaError!]!
  originalSource: ShopifyModel3dSource
  parent: Node
  preview: ShopifyMediaPreviewImage
  shopifyId: String!
  sources: [ShopifyModel3dSource!]!
  status: ShopifyMediaStatus!
}

type ShopifyModel3dConnection {
  distinct(field: ShopifyModel3dFieldsEnum!): [String!]!
  edges: [ShopifyModel3dEdge!]!
  group(field: ShopifyModel3dFieldsEnum!, limit: Int, skip: Int): [ShopifyModel3dGroupConnection!]!
  max(field: ShopifyModel3dFieldsEnum!): Float
  min(field: ShopifyModel3dFieldsEnum!): Float
  nodes: [ShopifyModel3d!]!
  pageInfo: PageInfo!
  sum(field: ShopifyModel3dFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyModel3dEdge {
  next: ShopifyModel3d
  node: ShopifyModel3d!
  previous: ShopifyModel3d
}

enum ShopifyModel3dFieldsEnum {
  alt
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  filename
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mediaContentType
  mediaErrors
  mediaErrors___code
  mediaErrors___details
  mediaErrors___message
  originalSource___filesize
  originalSource___format
  originalSource___mimeType
  originalSource___url
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  preview___image___altText
  preview___image___height
  preview___image___originalSrc
  preview___image___src
  preview___image___transformedSrc
  preview___image___width
  preview___status
  shopifyId
  sources
  sources___filesize
  sources___format
  sources___mimeType
  sources___url
  status
}

input ShopifyModel3dFilterInput {
  alt: StringQueryOperatorInput
  children: NodeFilterListInput
  filename: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  mediaContentType: ShopifyMediaContentTypeQueryOperatorInput
  mediaErrors: ShopifyMediaErrorFilterListInput
  originalSource: ShopifyModel3dSourceFilterInput
  parent: NodeFilterInput
  preview: ShopifyMediaPreviewImageFilterInput
  shopifyId: StringQueryOperatorInput
  sources: ShopifyModel3dSourceFilterListInput
  status: ShopifyMediaStatusQueryOperatorInput
}

type ShopifyModel3dGroupConnection {
  distinct(field: ShopifyModel3dFieldsEnum!): [String!]!
  edges: [ShopifyModel3dEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyModel3dFieldsEnum!, limit: Int, skip: Int): [ShopifyModel3dGroupConnection!]!
  max(field: ShopifyModel3dFieldsEnum!): Float
  min(field: ShopifyModel3dFieldsEnum!): Float
  nodes: [ShopifyModel3d!]!
  pageInfo: PageInfo!
  sum(field: ShopifyModel3dFieldsEnum!): Float
  totalCount: Int!
}

input ShopifyModel3dSortInput {
  fields: [ShopifyModel3dFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ShopifyModel3dSource {
  filesize: Int!
  format: String!
  mimeType: String!
  url: String!
}

input ShopifyModel3dSourceFilterInput {
  filesize: IntQueryOperatorInput
  format: StringQueryOperatorInput
  mimeType: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

input ShopifyModel3dSourceFilterListInput {
  elemMatch: ShopifyModel3dSourceFilterInput
}

type ShopifyMoneyV2 {
  amount: Float!
  currencyCode: ShopifyCurrencyCode!
}

input ShopifyMoneyV2FilterInput {
  amount: FloatQueryOperatorInput
  currencyCode: ShopifyCurrencyCodeQueryOperatorInput
}

type ShopifyProduct implements Node {
  children: [Node!]!
  createdAt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  description: String!
  descriptionHtml: String!
  featuredImage: ShopifyImage
  featuredMedia: ShopifyMedia
  feedback: ShopifyResourceFeedback
  giftCardTemplateSuffix: String
  handle: String!
  hasOnlyDefaultVariant: Boolean!
  hasOutOfStockVariants: Boolean!
  id: ID!
  internal: Internal!
  isGiftCard: Boolean!
  legacyResourceId: String!
  media: [ShopifyMedia!]!
  mediaCount: Int!
  metafield(key: String!, namespace: String!): ShopifyMetafield
  metafields: [ShopifyMetafield!]!
  onlineStorePreviewUrl: String
  onlineStoreUrl: String
  options: [ShopifyProductOption!]!
  parent: Node
  priceRange: ShopifyProductPriceRange! @deprecated(reason: "Deprecated in API version 2020-10. Use `priceRangeV2` instead.")
  priceRangeV2: ShopifyProductPriceRangeV2!
  productType: String!
  publishedAt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  requiresSellingPlan: Boolean!
  sellingPlanGroupCount: Int!
  seo: ShopifySEO!
  shopifyId: String!
  status: ShopifyProductStatus!
  storefrontId: String!
  tags: [String!]!
  templateSuffix: String
  title: String!
  totalInventory: Int!
  totalVariants: Int!
  tracksInventory: Boolean!
  updatedAt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  variants: [ShopifyProductVariant!]!
  vendor: String!
}

type ShopifyProductConnection {
  distinct(field: ShopifyProductFieldsEnum!): [String!]!
  edges: [ShopifyProductEdge!]!
  group(field: ShopifyProductFieldsEnum!, limit: Int, skip: Int): [ShopifyProductGroupConnection!]!
  max(field: ShopifyProductFieldsEnum!): Float
  min(field: ShopifyProductFieldsEnum!): Float
  nodes: [ShopifyProduct!]!
  pageInfo: PageInfo!
  sum(field: ShopifyProductFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyProductEdge {
  next: ShopifyProduct
  node: ShopifyProduct!
  previous: ShopifyProduct
}

enum ShopifyProductFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  createdAt
  description
  descriptionHtml
  featuredImage___altText
  featuredImage___height
  featuredImage___originalSrc
  featuredImage___src
  featuredImage___transformedSrc
  featuredImage___width
  featuredMedia___alt
  featuredMedia___children
  featuredMedia___children___children
  featuredMedia___children___children___children
  featuredMedia___children___children___id
  featuredMedia___children___id
  featuredMedia___children___internal___content
  featuredMedia___children___internal___contentDigest
  featuredMedia___children___internal___contentFilePath
  featuredMedia___children___internal___description
  featuredMedia___children___internal___fieldOwners
  featuredMedia___children___internal___ignoreType
  featuredMedia___children___internal___mediaType
  featuredMedia___children___internal___owner
  featuredMedia___children___internal___type
  featuredMedia___children___parent___children
  featuredMedia___children___parent___id
  featuredMedia___id
  featuredMedia___internal___content
  featuredMedia___internal___contentDigest
  featuredMedia___internal___contentFilePath
  featuredMedia___internal___description
  featuredMedia___internal___fieldOwners
  featuredMedia___internal___ignoreType
  featuredMedia___internal___mediaType
  featuredMedia___internal___owner
  featuredMedia___internal___type
  featuredMedia___mediaContentType
  featuredMedia___mediaErrors
  featuredMedia___mediaErrors___code
  featuredMedia___mediaErrors___details
  featuredMedia___mediaErrors___message
  featuredMedia___parent___children
  featuredMedia___parent___children___children
  featuredMedia___parent___children___id
  featuredMedia___parent___id
  featuredMedia___parent___internal___content
  featuredMedia___parent___internal___contentDigest
  featuredMedia___parent___internal___contentFilePath
  featuredMedia___parent___internal___description
  featuredMedia___parent___internal___fieldOwners
  featuredMedia___parent___internal___ignoreType
  featuredMedia___parent___internal___mediaType
  featuredMedia___parent___internal___owner
  featuredMedia___parent___internal___type
  featuredMedia___parent___parent___children
  featuredMedia___parent___parent___id
  featuredMedia___preview___image___altText
  featuredMedia___preview___image___height
  featuredMedia___preview___image___originalSrc
  featuredMedia___preview___image___src
  featuredMedia___preview___image___transformedSrc
  featuredMedia___preview___image___width
  featuredMedia___preview___status
  featuredMedia___shopifyId
  featuredMedia___status
  feedback___details
  feedback___details___app___shopifyId
  feedback___details___link___label
  feedback___details___link___url
  feedback___details___messages
  feedback___details___messages___field
  feedback___details___messages___message
  feedback___summary
  giftCardTemplateSuffix
  handle
  hasOnlyDefaultVariant
  hasOutOfStockVariants
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  isGiftCard
  legacyResourceId
  media
  mediaCount
  media___alt
  media___children
  media___children___children
  media___children___children___children
  media___children___children___id
  media___children___id
  media___children___internal___content
  media___children___internal___contentDigest
  media___children___internal___contentFilePath
  media___children___internal___description
  media___children___internal___fieldOwners
  media___children___internal___ignoreType
  media___children___internal___mediaType
  media___children___internal___owner
  media___children___internal___type
  media___children___parent___children
  media___children___parent___id
  media___id
  media___internal___content
  media___internal___contentDigest
  media___internal___contentFilePath
  media___internal___description
  media___internal___fieldOwners
  media___internal___ignoreType
  media___internal___mediaType
  media___internal___owner
  media___internal___type
  media___mediaContentType
  media___mediaErrors
  media___mediaErrors___code
  media___mediaErrors___details
  media___mediaErrors___message
  media___parent___children
  media___parent___children___children
  media___parent___children___id
  media___parent___id
  media___parent___internal___content
  media___parent___internal___contentDigest
  media___parent___internal___contentFilePath
  media___parent___internal___description
  media___parent___internal___fieldOwners
  media___parent___internal___ignoreType
  media___parent___internal___mediaType
  media___parent___internal___owner
  media___parent___internal___type
  media___parent___parent___children
  media___parent___parent___id
  media___preview___image___altText
  media___preview___image___height
  media___preview___image___originalSrc
  media___preview___image___src
  media___preview___image___transformedSrc
  media___preview___image___width
  media___preview___status
  media___shopifyId
  media___status
  metafield___children
  metafield___children___children
  metafield___children___children___children
  metafield___children___children___id
  metafield___children___id
  metafield___children___internal___content
  metafield___children___internal___contentDigest
  metafield___children___internal___contentFilePath
  metafield___children___internal___description
  metafield___children___internal___fieldOwners
  metafield___children___internal___ignoreType
  metafield___children___internal___mediaType
  metafield___children___internal___owner
  metafield___children___internal___type
  metafield___children___parent___children
  metafield___children___parent___id
  metafield___createdAt
  metafield___description
  metafield___id
  metafield___internal___content
  metafield___internal___contentDigest
  metafield___internal___contentFilePath
  metafield___internal___description
  metafield___internal___fieldOwners
  metafield___internal___ignoreType
  metafield___internal___mediaType
  metafield___internal___owner
  metafield___internal___type
  metafield___key
  metafield___legacyResourceId
  metafield___namespace
  metafield___ownerType
  metafield___parent___children
  metafield___parent___children___children
  metafield___parent___children___id
  metafield___parent___id
  metafield___parent___internal___content
  metafield___parent___internal___contentDigest
  metafield___parent___internal___contentFilePath
  metafield___parent___internal___description
  metafield___parent___internal___fieldOwners
  metafield___parent___internal___ignoreType
  metafield___parent___internal___mediaType
  metafield___parent___internal___owner
  metafield___parent___internal___type
  metafield___parent___parent___children
  metafield___parent___parent___id
  metafield___shopifyId
  metafield___type
  metafield___updatedAt
  metafield___value
  metafield___valueType
  metafields
  metafields___children
  metafields___children___children
  metafields___children___children___children
  metafields___children___children___id
  metafields___children___id
  metafields___children___internal___content
  metafields___children___internal___contentDigest
  metafields___children___internal___contentFilePath
  metafields___children___internal___description
  metafields___children___internal___fieldOwners
  metafields___children___internal___ignoreType
  metafields___children___internal___mediaType
  metafields___children___internal___owner
  metafields___children___internal___type
  metafields___children___parent___children
  metafields___children___parent___id
  metafields___createdAt
  metafields___description
  metafields___id
  metafields___internal___content
  metafields___internal___contentDigest
  metafields___internal___contentFilePath
  metafields___internal___description
  metafields___internal___fieldOwners
  metafields___internal___ignoreType
  metafields___internal___mediaType
  metafields___internal___owner
  metafields___internal___type
  metafields___key
  metafields___legacyResourceId
  metafields___namespace
  metafields___ownerType
  metafields___parent___children
  metafields___parent___children___children
  metafields___parent___children___id
  metafields___parent___id
  metafields___parent___internal___content
  metafields___parent___internal___contentDigest
  metafields___parent___internal___contentFilePath
  metafields___parent___internal___description
  metafields___parent___internal___fieldOwners
  metafields___parent___internal___ignoreType
  metafields___parent___internal___mediaType
  metafields___parent___internal___owner
  metafields___parent___internal___type
  metafields___parent___parent___children
  metafields___parent___parent___id
  metafields___shopifyId
  metafields___type
  metafields___updatedAt
  metafields___value
  metafields___valueType
  onlineStorePreviewUrl
  onlineStoreUrl
  options
  options___name
  options___position
  options___shopifyId
  options___values
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  priceRangeV2___maxVariantPrice___amount
  priceRangeV2___maxVariantPrice___currencyCode
  priceRangeV2___minVariantPrice___amount
  priceRangeV2___minVariantPrice___currencyCode
  priceRange___maxVariantPrice___amount
  priceRange___maxVariantPrice___currencyCode
  priceRange___minVariantPrice___amount
  priceRange___minVariantPrice___currencyCode
  productType
  publishedAt
  requiresSellingPlan
  sellingPlanGroupCount
  seo___description
  seo___title
  shopifyId
  status
  storefrontId
  tags
  templateSuffix
  title
  totalInventory
  totalVariants
  tracksInventory
  updatedAt
  variants
  variants___availableForSale
  variants___barcode
  variants___children
  variants___children___children
  variants___children___children___children
  variants___children___children___id
  variants___children___id
  variants___children___internal___content
  variants___children___internal___contentDigest
  variants___children___internal___contentFilePath
  variants___children___internal___description
  variants___children___internal___fieldOwners
  variants___children___internal___ignoreType
  variants___children___internal___mediaType
  variants___children___internal___owner
  variants___children___internal___type
  variants___children___parent___children
  variants___children___parent___id
  variants___compareAtPrice
  variants___createdAt
  variants___displayName
  variants___id
  variants___image___altText
  variants___image___height
  variants___image___originalSrc
  variants___image___src
  variants___image___transformedSrc
  variants___image___width
  variants___internal___content
  variants___internal___contentDigest
  variants___internal___contentFilePath
  variants___internal___description
  variants___internal___fieldOwners
  variants___internal___ignoreType
  variants___internal___mediaType
  variants___internal___owner
  variants___internal___type
  variants___inventoryPolicy
  variants___inventoryQuantity
  variants___legacyResourceId
  variants___media
  variants___media___alt
  variants___media___children
  variants___media___children___children
  variants___media___children___id
  variants___media___id
  variants___media___internal___content
  variants___media___internal___contentDigest
  variants___media___internal___contentFilePath
  variants___media___internal___description
  variants___media___internal___fieldOwners
  variants___media___internal___ignoreType
  variants___media___internal___mediaType
  variants___media___internal___owner
  variants___media___internal___type
  variants___media___mediaContentType
  variants___media___mediaErrors
  variants___media___mediaErrors___code
  variants___media___mediaErrors___details
  variants___media___mediaErrors___message
  variants___media___parent___children
  variants___media___parent___id
  variants___media___preview___status
  variants___media___shopifyId
  variants___media___status
  variants___metafield___children
  variants___metafield___children___children
  variants___metafield___children___id
  variants___metafield___createdAt
  variants___metafield___description
  variants___metafield___id
  variants___metafield___internal___content
  variants___metafield___internal___contentDigest
  variants___metafield___internal___contentFilePath
  variants___metafield___internal___description
  variants___metafield___internal___fieldOwners
  variants___metafield___internal___ignoreType
  variants___metafield___internal___mediaType
  variants___metafield___internal___owner
  variants___metafield___internal___type
  variants___metafield___key
  variants___metafield___legacyResourceId
  variants___metafield___namespace
  variants___metafield___ownerType
  variants___metafield___parent___children
  variants___metafield___parent___id
  variants___metafield___shopifyId
  variants___metafield___type
  variants___metafield___updatedAt
  variants___metafield___value
  variants___metafield___valueType
  variants___metafields
  variants___metafields___children
  variants___metafields___children___children
  variants___metafields___children___id
  variants___metafields___createdAt
  variants___metafields___description
  variants___metafields___id
  variants___metafields___internal___content
  variants___metafields___internal___contentDigest
  variants___metafields___internal___contentFilePath
  variants___metafields___internal___description
  variants___metafields___internal___fieldOwners
  variants___metafields___internal___ignoreType
  variants___metafields___internal___mediaType
  variants___metafields___internal___owner
  variants___metafields___internal___type
  variants___metafields___key
  variants___metafields___legacyResourceId
  variants___metafields___namespace
  variants___metafields___ownerType
  variants___metafields___parent___children
  variants___metafields___parent___id
  variants___metafields___shopifyId
  variants___metafields___type
  variants___metafields___updatedAt
  variants___metafields___value
  variants___metafields___valueType
  variants___parent___children
  variants___parent___children___children
  variants___parent___children___id
  variants___parent___id
  variants___parent___internal___content
  variants___parent___internal___contentDigest
  variants___parent___internal___contentFilePath
  variants___parent___internal___description
  variants___parent___internal___fieldOwners
  variants___parent___internal___ignoreType
  variants___parent___internal___mediaType
  variants___parent___internal___owner
  variants___parent___internal___type
  variants___parent___parent___children
  variants___parent___parent___id
  variants___position
  variants___presentmentPrices
  variants___presentmentPrices___compareAtPrice___amount
  variants___presentmentPrices___compareAtPrice___currencyCode
  variants___presentmentPrices___price___amount
  variants___presentmentPrices___price___currencyCode
  variants___price
  variants___product___children
  variants___product___children___children
  variants___product___children___id
  variants___product___createdAt
  variants___product___description
  variants___product___descriptionHtml
  variants___product___featuredImage___altText
  variants___product___featuredImage___height
  variants___product___featuredImage___originalSrc
  variants___product___featuredImage___src
  variants___product___featuredImage___transformedSrc
  variants___product___featuredImage___width
  variants___product___featuredMedia___alt
  variants___product___featuredMedia___children
  variants___product___featuredMedia___id
  variants___product___featuredMedia___mediaContentType
  variants___product___featuredMedia___mediaErrors
  variants___product___featuredMedia___shopifyId
  variants___product___featuredMedia___status
  variants___product___feedback___details
  variants___product___feedback___summary
  variants___product___giftCardTemplateSuffix
  variants___product___handle
  variants___product___hasOnlyDefaultVariant
  variants___product___hasOutOfStockVariants
  variants___product___id
  variants___product___internal___content
  variants___product___internal___contentDigest
  variants___product___internal___contentFilePath
  variants___product___internal___description
  variants___product___internal___fieldOwners
  variants___product___internal___ignoreType
  variants___product___internal___mediaType
  variants___product___internal___owner
  variants___product___internal___type
  variants___product___isGiftCard
  variants___product___legacyResourceId
  variants___product___media
  variants___product___mediaCount
  variants___product___media___alt
  variants___product___media___children
  variants___product___media___id
  variants___product___media___mediaContentType
  variants___product___media___mediaErrors
  variants___product___media___shopifyId
  variants___product___media___status
  variants___product___metafield___children
  variants___product___metafield___createdAt
  variants___product___metafield___description
  variants___product___metafield___id
  variants___product___metafield___key
  variants___product___metafield___legacyResourceId
  variants___product___metafield___namespace
  variants___product___metafield___ownerType
  variants___product___metafield___shopifyId
  variants___product___metafield___type
  variants___product___metafield___updatedAt
  variants___product___metafield___value
  variants___product___metafield___valueType
  variants___product___metafields
  variants___product___metafields___children
  variants___product___metafields___createdAt
  variants___product___metafields___description
  variants___product___metafields___id
  variants___product___metafields___key
  variants___product___metafields___legacyResourceId
  variants___product___metafields___namespace
  variants___product___metafields___ownerType
  variants___product___metafields___shopifyId
  variants___product___metafields___type
  variants___product___metafields___updatedAt
  variants___product___metafields___value
  variants___product___metafields___valueType
  variants___product___onlineStorePreviewUrl
  variants___product___onlineStoreUrl
  variants___product___options
  variants___product___options___name
  variants___product___options___position
  variants___product___options___shopifyId
  variants___product___options___values
  variants___product___parent___children
  variants___product___parent___id
  variants___product___productType
  variants___product___publishedAt
  variants___product___requiresSellingPlan
  variants___product___sellingPlanGroupCount
  variants___product___seo___description
  variants___product___seo___title
  variants___product___shopifyId
  variants___product___status
  variants___product___storefrontId
  variants___product___tags
  variants___product___templateSuffix
  variants___product___title
  variants___product___totalInventory
  variants___product___totalVariants
  variants___product___tracksInventory
  variants___product___updatedAt
  variants___product___variants
  variants___product___variants___availableForSale
  variants___product___variants___barcode
  variants___product___variants___children
  variants___product___variants___compareAtPrice
  variants___product___variants___createdAt
  variants___product___variants___displayName
  variants___product___variants___id
  variants___product___variants___inventoryPolicy
  variants___product___variants___inventoryQuantity
  variants___product___variants___legacyResourceId
  variants___product___variants___media
  variants___product___variants___metafields
  variants___product___variants___position
  variants___product___variants___presentmentPrices
  variants___product___variants___price
  variants___product___variants___requiresShipping
  variants___product___variants___selectedOptions
  variants___product___variants___sellingPlanGroupCount
  variants___product___variants___shopifyId
  variants___product___variants___sku
  variants___product___variants___storefrontId
  variants___product___variants___taxCode
  variants___product___variants___taxable
  variants___product___variants___title
  variants___product___variants___updatedAt
  variants___product___variants___weight
  variants___product___variants___weightUnit
  variants___product___vendor
  variants___requiresShipping
  variants___selectedOptions
  variants___selectedOptions___name
  variants___selectedOptions___value
  variants___sellingPlanGroupCount
  variants___shopifyId
  variants___sku
  variants___storefrontId
  variants___taxCode
  variants___taxable
  variants___title
  variants___updatedAt
  variants___weight
  variants___weightUnit
  vendor
}

input ShopifyProductFilterInput {
  children: NodeFilterListInput
  createdAt: DateQueryOperatorInput
  description: StringQueryOperatorInput
  descriptionHtml: StringQueryOperatorInput
  featuredImage: ShopifyImageFilterInput
  featuredMedia: ShopifyMediaFilterInput
  feedback: ShopifyResourceFeedbackFilterInput
  giftCardTemplateSuffix: StringQueryOperatorInput
  handle: StringQueryOperatorInput
  hasOnlyDefaultVariant: BooleanQueryOperatorInput
  hasOutOfStockVariants: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isGiftCard: BooleanQueryOperatorInput
  legacyResourceId: StringQueryOperatorInput
  media: ShopifyMediaFilterListInput
  mediaCount: IntQueryOperatorInput
  metafield: ShopifyMetafieldFilterInput
  metafields: ShopifyMetafieldFilterListInput
  onlineStorePreviewUrl: StringQueryOperatorInput
  onlineStoreUrl: StringQueryOperatorInput
  options: ShopifyProductOptionFilterListInput
  parent: NodeFilterInput
  priceRange: ShopifyProductPriceRangeFilterInput
  priceRangeV2: ShopifyProductPriceRangeV2FilterInput
  productType: StringQueryOperatorInput
  publishedAt: DateQueryOperatorInput
  requiresSellingPlan: BooleanQueryOperatorInput
  sellingPlanGroupCount: IntQueryOperatorInput
  seo: ShopifySEOFilterInput
  shopifyId: StringQueryOperatorInput
  status: ShopifyProductStatusQueryOperatorInput
  storefrontId: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  templateSuffix: StringQueryOperatorInput
  title: StringQueryOperatorInput
  totalInventory: IntQueryOperatorInput
  totalVariants: IntQueryOperatorInput
  tracksInventory: BooleanQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  variants: ShopifyProductVariantFilterListInput
  vendor: StringQueryOperatorInput
}

type ShopifyProductGroupConnection {
  distinct(field: ShopifyProductFieldsEnum!): [String!]!
  edges: [ShopifyProductEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyProductFieldsEnum!, limit: Int, skip: Int): [ShopifyProductGroupConnection!]!
  max(field: ShopifyProductFieldsEnum!): Float
  min(field: ShopifyProductFieldsEnum!): Float
  nodes: [ShopifyProduct!]!
  pageInfo: PageInfo!
  sum(field: ShopifyProductFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyProductOption {
  name: String!
  position: Int!
  shopifyId: String!
  values: [String!]!
}

input ShopifyProductOptionFilterInput {
  name: StringQueryOperatorInput
  position: IntQueryOperatorInput
  shopifyId: StringQueryOperatorInput
  values: StringQueryOperatorInput
}

input ShopifyProductOptionFilterListInput {
  elemMatch: ShopifyProductOptionFilterInput
}

type ShopifyProductPriceRange {
  maxVariantPrice: ShopifyMoneyV2!
  minVariantPrice: ShopifyMoneyV2!
}

input ShopifyProductPriceRangeFilterInput {
  maxVariantPrice: ShopifyMoneyV2FilterInput
  minVariantPrice: ShopifyMoneyV2FilterInput
}

type ShopifyProductPriceRangeV2 {
  maxVariantPrice: ShopifyMoneyV2!
  minVariantPrice: ShopifyMoneyV2!
}

input ShopifyProductPriceRangeV2FilterInput {
  maxVariantPrice: ShopifyMoneyV2FilterInput
  minVariantPrice: ShopifyMoneyV2FilterInput
}

type ShopifyProductSellingPlan implements Node {
  children: [Node!]!
  handle: String
  id: ID!
  internal: Internal!
  parent: Node
  sellingPlanGroups: ShopifyProductSellingPlanSellingPlanGroups
}

type ShopifyProductSellingPlanConnection {
  distinct(field: ShopifyProductSellingPlanFieldsEnum!): [String!]!
  edges: [ShopifyProductSellingPlanEdge!]!
  group(field: ShopifyProductSellingPlanFieldsEnum!, limit: Int, skip: Int): [ShopifyProductSellingPlanGroupConnection!]!
  max(field: ShopifyProductSellingPlanFieldsEnum!): Float
  min(field: ShopifyProductSellingPlanFieldsEnum!): Float
  nodes: [ShopifyProductSellingPlan!]!
  pageInfo: PageInfo!
  sum(field: ShopifyProductSellingPlanFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyProductSellingPlanEdge {
  next: ShopifyProductSellingPlan
  node: ShopifyProductSellingPlan!
  previous: ShopifyProductSellingPlan
}

enum ShopifyProductSellingPlanFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  handle
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  sellingPlanGroups___edges
  sellingPlanGroups___edges___node___id
}

input ShopifyProductSellingPlanFilterInput {
  children: NodeFilterListInput
  handle: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  sellingPlanGroups: ShopifyProductSellingPlanSellingPlanGroupsFilterInput
}

type ShopifyProductSellingPlanGroupConnection {
  distinct(field: ShopifyProductSellingPlanFieldsEnum!): [String!]!
  edges: [ShopifyProductSellingPlanEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyProductSellingPlanFieldsEnum!, limit: Int, skip: Int): [ShopifyProductSellingPlanGroupConnection!]!
  max(field: ShopifyProductSellingPlanFieldsEnum!): Float
  min(field: ShopifyProductSellingPlanFieldsEnum!): Float
  nodes: [ShopifyProductSellingPlan!]!
  pageInfo: PageInfo!
  sum(field: ShopifyProductSellingPlanFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyProductSellingPlanSellingPlanGroups {
  edges: [ShopifyProductSellingPlanSellingPlanGroupsEdges]
}

type ShopifyProductSellingPlanSellingPlanGroupsEdges {
  node: ShopifyProductSellingPlanSellingPlanGroupsEdgesNode
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesFilterInput {
  node: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeFilterInput
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesFilterListInput {
  elemMatch: ShopifyProductSellingPlanSellingPlanGroupsEdgesFilterInput
}

type ShopifyProductSellingPlanSellingPlanGroupsEdgesNode {
  id: String
  sellingPlans: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlans
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeFilterInput {
  id: StringQueryOperatorInput
  sellingPlans: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansFilterInput
}

type ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlans {
  edges: [ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdges]
}

type ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdges {
  node: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNode
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesFilterInput {
  node: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodeFilterInput
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesFilterListInput {
  elemMatch: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesFilterInput
}

type ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNode {
  id: String
  name: String
  options: [String]
  pricingPolicies: [ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPolicies]
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodeFilterInput {
  id: StringQueryOperatorInput
  name: StringQueryOperatorInput
  options: StringQueryOperatorInput
  pricingPolicies: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPoliciesFilterListInput
}

type ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPolicies {
  adjustmentType: String
  adjustmentValue: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPoliciesAdjustmentValue
}

type ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPoliciesAdjustmentValue {
  percentage: Int
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPoliciesAdjustmentValueFilterInput {
  percentage: IntQueryOperatorInput
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPoliciesFilterInput {
  adjustmentType: StringQueryOperatorInput
  adjustmentValue: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPoliciesAdjustmentValueFilterInput
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPoliciesFilterListInput {
  elemMatch: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesNodePricingPoliciesFilterInput
}

input ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansFilterInput {
  edges: ShopifyProductSellingPlanSellingPlanGroupsEdgesNodeSellingPlansEdgesFilterListInput
}

input ShopifyProductSellingPlanSellingPlanGroupsFilterInput {
  edges: ShopifyProductSellingPlanSellingPlanGroupsEdgesFilterListInput
}

input ShopifyProductSellingPlanSortInput {
  fields: [ShopifyProductSellingPlanFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input ShopifyProductSortInput {
  fields: [ShopifyProductFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum ShopifyProductStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

input ShopifyProductStatusQueryOperatorInput {
  eq: ShopifyProductStatus
  in: [ShopifyProductStatus]
  ne: ShopifyProductStatus
  nin: [ShopifyProductStatus]
}

type ShopifyProductVariant implements Node {
  availableForSale: Boolean!
  barcode: String
  children: [Node!]!
  compareAtPrice: Float
  createdAt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  displayName: String!
  id: ID!
  image: ShopifyImage
  internal: Internal!
  inventoryPolicy: ShopifyProductVariantInventoryPolicy!
  inventoryQuantity: Int
  legacyResourceId: String!
  media: [ShopifyMedia!]!
  metafield(key: String!, namespace: String!): ShopifyMetafield
  metafields: [ShopifyMetafield!]!
  parent: Node
  position: Int!
  presentmentPrices: [ShopifyProductVariantPricePair!]!
  price: Float!
  product: ShopifyProduct!
  requiresShipping: Boolean! @deprecated(reason: "Use `InventoryItem.requiresShipping` instead.")
  selectedOptions: [ShopifySelectedOption!]!
  sellingPlanGroupCount: Int!
  shopifyId: String!
  sku: String
  storefrontId: String!
  taxCode: String
  taxable: Boolean!
  title: String!
  updatedAt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  weight: Float
  weightUnit: ShopifyWeightUnit!
}

type ShopifyProductVariantConnection {
  distinct(field: ShopifyProductVariantFieldsEnum!): [String!]!
  edges: [ShopifyProductVariantEdge!]!
  group(field: ShopifyProductVariantFieldsEnum!, limit: Int, skip: Int): [ShopifyProductVariantGroupConnection!]!
  max(field: ShopifyProductVariantFieldsEnum!): Float
  min(field: ShopifyProductVariantFieldsEnum!): Float
  nodes: [ShopifyProductVariant!]!
  pageInfo: PageInfo!
  sum(field: ShopifyProductVariantFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyProductVariantEdge {
  next: ShopifyProductVariant
  node: ShopifyProductVariant!
  previous: ShopifyProductVariant
}

enum ShopifyProductVariantFieldsEnum {
  availableForSale
  barcode
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  compareAtPrice
  createdAt
  displayName
  id
  image___altText
  image___height
  image___originalSrc
  image___src
  image___transformedSrc
  image___width
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  inventoryPolicy
  inventoryQuantity
  legacyResourceId
  media
  media___alt
  media___children
  media___children___children
  media___children___children___children
  media___children___children___id
  media___children___id
  media___children___internal___content
  media___children___internal___contentDigest
  media___children___internal___contentFilePath
  media___children___internal___description
  media___children___internal___fieldOwners
  media___children___internal___ignoreType
  media___children___internal___mediaType
  media___children___internal___owner
  media___children___internal___type
  media___children___parent___children
  media___children___parent___id
  media___id
  media___internal___content
  media___internal___contentDigest
  media___internal___contentFilePath
  media___internal___description
  media___internal___fieldOwners
  media___internal___ignoreType
  media___internal___mediaType
  media___internal___owner
  media___internal___type
  media___mediaContentType
  media___mediaErrors
  media___mediaErrors___code
  media___mediaErrors___details
  media___mediaErrors___message
  media___parent___children
  media___parent___children___children
  media___parent___children___id
  media___parent___id
  media___parent___internal___content
  media___parent___internal___contentDigest
  media___parent___internal___contentFilePath
  media___parent___internal___description
  media___parent___internal___fieldOwners
  media___parent___internal___ignoreType
  media___parent___internal___mediaType
  media___parent___internal___owner
  media___parent___internal___type
  media___parent___parent___children
  media___parent___parent___id
  media___preview___image___altText
  media___preview___image___height
  media___preview___image___originalSrc
  media___preview___image___src
  media___preview___image___transformedSrc
  media___preview___image___width
  media___preview___status
  media___shopifyId
  media___status
  metafield___children
  metafield___children___children
  metafield___children___children___children
  metafield___children___children___id
  metafield___children___id
  metafield___children___internal___content
  metafield___children___internal___contentDigest
  metafield___children___internal___contentFilePath
  metafield___children___internal___description
  metafield___children___internal___fieldOwners
  metafield___children___internal___ignoreType
  metafield___children___internal___mediaType
  metafield___children___internal___owner
  metafield___children___internal___type
  metafield___children___parent___children
  metafield___children___parent___id
  metafield___createdAt
  metafield___description
  metafield___id
  metafield___internal___content
  metafield___internal___contentDigest
  metafield___internal___contentFilePath
  metafield___internal___description
  metafield___internal___fieldOwners
  metafield___internal___ignoreType
  metafield___internal___mediaType
  metafield___internal___owner
  metafield___internal___type
  metafield___key
  metafield___legacyResourceId
  metafield___namespace
  metafield___ownerType
  metafield___parent___children
  metafield___parent___children___children
  metafield___parent___children___id
  metafield___parent___id
  metafield___parent___internal___content
  metafield___parent___internal___contentDigest
  metafield___parent___internal___contentFilePath
  metafield___parent___internal___description
  metafield___parent___internal___fieldOwners
  metafield___parent___internal___ignoreType
  metafield___parent___internal___mediaType
  metafield___parent___internal___owner
  metafield___parent___internal___type
  metafield___parent___parent___children
  metafield___parent___parent___id
  metafield___shopifyId
  metafield___type
  metafield___updatedAt
  metafield___value
  metafield___valueType
  metafields
  metafields___children
  metafields___children___children
  metafields___children___children___children
  metafields___children___children___id
  metafields___children___id
  metafields___children___internal___content
  metafields___children___internal___contentDigest
  metafields___children___internal___contentFilePath
  metafields___children___internal___description
  metafields___children___internal___fieldOwners
  metafields___children___internal___ignoreType
  metafields___children___internal___mediaType
  metafields___children___internal___owner
  metafields___children___internal___type
  metafields___children___parent___children
  metafields___children___parent___id
  metafields___createdAt
  metafields___description
  metafields___id
  metafields___internal___content
  metafields___internal___contentDigest
  metafields___internal___contentFilePath
  metafields___internal___description
  metafields___internal___fieldOwners
  metafields___internal___ignoreType
  metafields___internal___mediaType
  metafields___internal___owner
  metafields___internal___type
  metafields___key
  metafields___legacyResourceId
  metafields___namespace
  metafields___ownerType
  metafields___parent___children
  metafields___parent___children___children
  metafields___parent___children___id
  metafields___parent___id
  metafields___parent___internal___content
  metafields___parent___internal___contentDigest
  metafields___parent___internal___contentFilePath
  metafields___parent___internal___description
  metafields___parent___internal___fieldOwners
  metafields___parent___internal___ignoreType
  metafields___parent___internal___mediaType
  metafields___parent___internal___owner
  metafields___parent___internal___type
  metafields___parent___parent___children
  metafields___parent___parent___id
  metafields___shopifyId
  metafields___type
  metafields___updatedAt
  metafields___value
  metafields___valueType
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  position
  presentmentPrices
  presentmentPrices___compareAtPrice___amount
  presentmentPrices___compareAtPrice___currencyCode
  presentmentPrices___price___amount
  presentmentPrices___price___currencyCode
  price
  product___children
  product___children___children
  product___children___children___children
  product___children___children___id
  product___children___id
  product___children___internal___content
  product___children___internal___contentDigest
  product___children___internal___contentFilePath
  product___children___internal___description
  product___children___internal___fieldOwners
  product___children___internal___ignoreType
  product___children___internal___mediaType
  product___children___internal___owner
  product___children___internal___type
  product___children___parent___children
  product___children___parent___id
  product___createdAt
  product___description
  product___descriptionHtml
  product___featuredImage___altText
  product___featuredImage___height
  product___featuredImage___originalSrc
  product___featuredImage___src
  product___featuredImage___transformedSrc
  product___featuredImage___width
  product___featuredMedia___alt
  product___featuredMedia___children
  product___featuredMedia___children___children
  product___featuredMedia___children___id
  product___featuredMedia___id
  product___featuredMedia___internal___content
  product___featuredMedia___internal___contentDigest
  product___featuredMedia___internal___contentFilePath
  product___featuredMedia___internal___description
  product___featuredMedia___internal___fieldOwners
  product___featuredMedia___internal___ignoreType
  product___featuredMedia___internal___mediaType
  product___featuredMedia___internal___owner
  product___featuredMedia___internal___type
  product___featuredMedia___mediaContentType
  product___featuredMedia___mediaErrors
  product___featuredMedia___mediaErrors___code
  product___featuredMedia___mediaErrors___details
  product___featuredMedia___mediaErrors___message
  product___featuredMedia___parent___children
  product___featuredMedia___parent___id
  product___featuredMedia___preview___status
  product___featuredMedia___shopifyId
  product___featuredMedia___status
  product___feedback___details
  product___feedback___details___messages
  product___feedback___summary
  product___giftCardTemplateSuffix
  product___handle
  product___hasOnlyDefaultVariant
  product___hasOutOfStockVariants
  product___id
  product___internal___content
  product___internal___contentDigest
  product___internal___contentFilePath
  product___internal___description
  product___internal___fieldOwners
  product___internal___ignoreType
  product___internal___mediaType
  product___internal___owner
  product___internal___type
  product___isGiftCard
  product___legacyResourceId
  product___media
  product___mediaCount
  product___media___alt
  product___media___children
  product___media___children___children
  product___media___children___id
  product___media___id
  product___media___internal___content
  product___media___internal___contentDigest
  product___media___internal___contentFilePath
  product___media___internal___description
  product___media___internal___fieldOwners
  product___media___internal___ignoreType
  product___media___internal___mediaType
  product___media___internal___owner
  product___media___internal___type
  product___media___mediaContentType
  product___media___mediaErrors
  product___media___mediaErrors___code
  product___media___mediaErrors___details
  product___media___mediaErrors___message
  product___media___parent___children
  product___media___parent___id
  product___media___preview___status
  product___media___shopifyId
  product___media___status
  product___metafield___children
  product___metafield___children___children
  product___metafield___children___id
  product___metafield___createdAt
  product___metafield___description
  product___metafield___id
  product___metafield___internal___content
  product___metafield___internal___contentDigest
  product___metafield___internal___contentFilePath
  product___metafield___internal___description
  product___metafield___internal___fieldOwners
  product___metafield___internal___ignoreType
  product___metafield___internal___mediaType
  product___metafield___internal___owner
  product___metafield___internal___type
  product___metafield___key
  product___metafield___legacyResourceId
  product___metafield___namespace
  product___metafield___ownerType
  product___metafield___parent___children
  product___metafield___parent___id
  product___metafield___shopifyId
  product___metafield___type
  product___metafield___updatedAt
  product___metafield___value
  product___metafield___valueType
  product___metafields
  product___metafields___children
  product___metafields___children___children
  product___metafields___children___id
  product___metafields___createdAt
  product___metafields___description
  product___metafields___id
  product___metafields___internal___content
  product___metafields___internal___contentDigest
  product___metafields___internal___contentFilePath
  product___metafields___internal___description
  product___metafields___internal___fieldOwners
  product___metafields___internal___ignoreType
  product___metafields___internal___mediaType
  product___metafields___internal___owner
  product___metafields___internal___type
  product___metafields___key
  product___metafields___legacyResourceId
  product___metafields___namespace
  product___metafields___ownerType
  product___metafields___parent___children
  product___metafields___parent___id
  product___metafields___shopifyId
  product___metafields___type
  product___metafields___updatedAt
  product___metafields___value
  product___metafields___valueType
  product___onlineStorePreviewUrl
  product___onlineStoreUrl
  product___options
  product___options___name
  product___options___position
  product___options___shopifyId
  product___options___values
  product___parent___children
  product___parent___children___children
  product___parent___children___id
  product___parent___id
  product___parent___internal___content
  product___parent___internal___contentDigest
  product___parent___internal___contentFilePath
  product___parent___internal___description
  product___parent___internal___fieldOwners
  product___parent___internal___ignoreType
  product___parent___internal___mediaType
  product___parent___internal___owner
  product___parent___internal___type
  product___parent___parent___children
  product___parent___parent___id
  product___priceRangeV2___maxVariantPrice___amount
  product___priceRangeV2___maxVariantPrice___currencyCode
  product___priceRangeV2___minVariantPrice___amount
  product___priceRangeV2___minVariantPrice___currencyCode
  product___priceRange___maxVariantPrice___amount
  product___priceRange___maxVariantPrice___currencyCode
  product___priceRange___minVariantPrice___amount
  product___priceRange___minVariantPrice___currencyCode
  product___productType
  product___publishedAt
  product___requiresSellingPlan
  product___sellingPlanGroupCount
  product___seo___description
  product___seo___title
  product___shopifyId
  product___status
  product___storefrontId
  product___tags
  product___templateSuffix
  product___title
  product___totalInventory
  product___totalVariants
  product___tracksInventory
  product___updatedAt
  product___variants
  product___variants___availableForSale
  product___variants___barcode
  product___variants___children
  product___variants___children___children
  product___variants___children___id
  product___variants___compareAtPrice
  product___variants___createdAt
  product___variants___displayName
  product___variants___id
  product___variants___image___altText
  product___variants___image___height
  product___variants___image___originalSrc
  product___variants___image___src
  product___variants___image___transformedSrc
  product___variants___image___width
  product___variants___internal___content
  product___variants___internal___contentDigest
  product___variants___internal___contentFilePath
  product___variants___internal___description
  product___variants___internal___fieldOwners
  product___variants___internal___ignoreType
  product___variants___internal___mediaType
  product___variants___internal___owner
  product___variants___internal___type
  product___variants___inventoryPolicy
  product___variants___inventoryQuantity
  product___variants___legacyResourceId
  product___variants___media
  product___variants___media___alt
  product___variants___media___children
  product___variants___media___id
  product___variants___media___mediaContentType
  product___variants___media___mediaErrors
  product___variants___media___shopifyId
  product___variants___media___status
  product___variants___metafield___children
  product___variants___metafield___createdAt
  product___variants___metafield___description
  product___variants___metafield___id
  product___variants___metafield___key
  product___variants___metafield___legacyResourceId
  product___variants___metafield___namespace
  product___variants___metafield___ownerType
  product___variants___metafield___shopifyId
  product___variants___metafield___type
  product___variants___metafield___updatedAt
  product___variants___metafield___value
  product___variants___metafield___valueType
  product___variants___metafields
  product___variants___metafields___children
  product___variants___metafields___createdAt
  product___variants___metafields___description
  product___variants___metafields___id
  product___variants___metafields___key
  product___variants___metafields___legacyResourceId
  product___variants___metafields___namespace
  product___variants___metafields___ownerType
  product___variants___metafields___shopifyId
  product___variants___metafields___type
  product___variants___metafields___updatedAt
  product___variants___metafields___value
  product___variants___metafields___valueType
  product___variants___parent___children
  product___variants___parent___id
  product___variants___position
  product___variants___presentmentPrices
  product___variants___price
  product___variants___product___children
  product___variants___product___createdAt
  product___variants___product___description
  product___variants___product___descriptionHtml
  product___variants___product___giftCardTemplateSuffix
  product___variants___product___handle
  product___variants___product___hasOnlyDefaultVariant
  product___variants___product___hasOutOfStockVariants
  product___variants___product___id
  product___variants___product___isGiftCard
  product___variants___product___legacyResourceId
  product___variants___product___media
  product___variants___product___mediaCount
  product___variants___product___metafields
  product___variants___product___onlineStorePreviewUrl
  product___variants___product___onlineStoreUrl
  product___variants___product___options
  product___variants___product___productType
  product___variants___product___publishedAt
  product___variants___product___requiresSellingPlan
  product___variants___product___sellingPlanGroupCount
  product___variants___product___shopifyId
  product___variants___product___status
  product___variants___product___storefrontId
  product___variants___product___tags
  product___variants___product___templateSuffix
  product___variants___product___title
  product___variants___product___totalInventory
  product___variants___product___totalVariants
  product___variants___product___tracksInventory
  product___variants___product___updatedAt
  product___variants___product___variants
  product___variants___product___vendor
  product___variants___requiresShipping
  product___variants___selectedOptions
  product___variants___selectedOptions___name
  product___variants___selectedOptions___value
  product___variants___sellingPlanGroupCount
  product___variants___shopifyId
  product___variants___sku
  product___variants___storefrontId
  product___variants___taxCode
  product___variants___taxable
  product___variants___title
  product___variants___updatedAt
  product___variants___weight
  product___variants___weightUnit
  product___vendor
  requiresShipping
  selectedOptions
  selectedOptions___name
  selectedOptions___value
  sellingPlanGroupCount
  shopifyId
  sku
  storefrontId
  taxCode
  taxable
  title
  updatedAt
  weight
  weightUnit
}

input ShopifyProductVariantFilterInput {
  availableForSale: BooleanQueryOperatorInput
  barcode: StringQueryOperatorInput
  children: NodeFilterListInput
  compareAtPrice: FloatQueryOperatorInput
  createdAt: DateQueryOperatorInput
  displayName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  image: ShopifyImageFilterInput
  internal: InternalFilterInput
  inventoryPolicy: ShopifyProductVariantInventoryPolicyQueryOperatorInput
  inventoryQuantity: IntQueryOperatorInput
  legacyResourceId: StringQueryOperatorInput
  media: ShopifyMediaFilterListInput
  metafield: ShopifyMetafieldFilterInput
  metafields: ShopifyMetafieldFilterListInput
  parent: NodeFilterInput
  position: IntQueryOperatorInput
  presentmentPrices: ShopifyProductVariantPricePairFilterListInput
  price: FloatQueryOperatorInput
  product: ShopifyProductFilterInput
  requiresShipping: BooleanQueryOperatorInput
  selectedOptions: ShopifySelectedOptionFilterListInput
  sellingPlanGroupCount: IntQueryOperatorInput
  shopifyId: StringQueryOperatorInput
  sku: StringQueryOperatorInput
  storefrontId: StringQueryOperatorInput
  taxCode: StringQueryOperatorInput
  taxable: BooleanQueryOperatorInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  weight: FloatQueryOperatorInput
  weightUnit: ShopifyWeightUnitQueryOperatorInput
}

input ShopifyProductVariantFilterListInput {
  elemMatch: ShopifyProductVariantFilterInput
}

type ShopifyProductVariantGroupConnection {
  distinct(field: ShopifyProductVariantFieldsEnum!): [String!]!
  edges: [ShopifyProductVariantEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyProductVariantFieldsEnum!, limit: Int, skip: Int): [ShopifyProductVariantGroupConnection!]!
  max(field: ShopifyProductVariantFieldsEnum!): Float
  min(field: ShopifyProductVariantFieldsEnum!): Float
  nodes: [ShopifyProductVariant!]!
  pageInfo: PageInfo!
  sum(field: ShopifyProductVariantFieldsEnum!): Float
  totalCount: Int!
}

enum ShopifyProductVariantInventoryPolicy {
  CONTINUE
  DENY
}

input ShopifyProductVariantInventoryPolicyQueryOperatorInput {
  eq: ShopifyProductVariantInventoryPolicy
  in: [ShopifyProductVariantInventoryPolicy]
  ne: ShopifyProductVariantInventoryPolicy
  nin: [ShopifyProductVariantInventoryPolicy]
}

type ShopifyProductVariantPricePair {
  compareAtPrice: ShopifyMoneyV2
  price: ShopifyMoneyV2!
}

input ShopifyProductVariantPricePairFilterInput {
  compareAtPrice: ShopifyMoneyV2FilterInput
  price: ShopifyMoneyV2FilterInput
}

input ShopifyProductVariantPricePairFilterListInput {
  elemMatch: ShopifyProductVariantPricePairFilterInput
}

input ShopifyProductVariantSortInput {
  fields: [ShopifyProductVariantFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ShopifyResourceFeedback {
  details: [ShopifyAppFeedback!]!
  summary: String!
}

input ShopifyResourceFeedbackFilterInput {
  details: ShopifyAppFeedbackFilterListInput
  summary: StringQueryOperatorInput
}

type ShopifySEO {
  description: String
  title: String
}

input ShopifySEOFilterInput {
  description: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

type ShopifySelectedOption {
  name: String!
  value: String!
}

input ShopifySelectedOptionFilterInput {
  name: StringQueryOperatorInput
  value: StringQueryOperatorInput
}

input ShopifySelectedOptionFilterListInput {
  elemMatch: ShopifySelectedOptionFilterInput
}

type ShopifyUserError {
  field: [String!]
  message: String!
}

input ShopifyUserErrorFilterInput {
  field: StringQueryOperatorInput
  message: StringQueryOperatorInput
}

input ShopifyUserErrorFilterListInput {
  elemMatch: ShopifyUserErrorFilterInput
}

type ShopifyVideo implements Node & ShopifyMedia {
  alt: String
  children: [Node!]!
  filename: String!
  id: ID!
  internal: Internal!
  mediaContentType: ShopifyMediaContentType!
  mediaErrors: [ShopifyMediaError!]!
  originalSource: ShopifyVideoSource
  parent: Node
  preview: ShopifyMediaPreviewImage
  shopifyId: String!
  sources: [ShopifyVideoSource!]!
  status: ShopifyMediaStatus!
}

type ShopifyVideoConnection {
  distinct(field: ShopifyVideoFieldsEnum!): [String!]!
  edges: [ShopifyVideoEdge!]!
  group(field: ShopifyVideoFieldsEnum!, limit: Int, skip: Int): [ShopifyVideoGroupConnection!]!
  max(field: ShopifyVideoFieldsEnum!): Float
  min(field: ShopifyVideoFieldsEnum!): Float
  nodes: [ShopifyVideo!]!
  pageInfo: PageInfo!
  sum(field: ShopifyVideoFieldsEnum!): Float
  totalCount: Int!
}

type ShopifyVideoEdge {
  next: ShopifyVideo
  node: ShopifyVideo!
  previous: ShopifyVideo
}

enum ShopifyVideoFieldsEnum {
  alt
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  filename
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mediaContentType
  mediaErrors
  mediaErrors___code
  mediaErrors___details
  mediaErrors___message
  originalSource___format
  originalSource___height
  originalSource___mimeType
  originalSource___url
  originalSource___width
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  preview___image___altText
  preview___image___height
  preview___image___originalSrc
  preview___image___src
  preview___image___transformedSrc
  preview___image___width
  preview___status
  shopifyId
  sources
  sources___format
  sources___height
  sources___mimeType
  sources___url
  sources___width
  status
}

input ShopifyVideoFilterInput {
  alt: StringQueryOperatorInput
  children: NodeFilterListInput
  filename: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  mediaContentType: ShopifyMediaContentTypeQueryOperatorInput
  mediaErrors: ShopifyMediaErrorFilterListInput
  originalSource: ShopifyVideoSourceFilterInput
  parent: NodeFilterInput
  preview: ShopifyMediaPreviewImageFilterInput
  shopifyId: StringQueryOperatorInput
  sources: ShopifyVideoSourceFilterListInput
  status: ShopifyMediaStatusQueryOperatorInput
}

type ShopifyVideoGroupConnection {
  distinct(field: ShopifyVideoFieldsEnum!): [String!]!
  edges: [ShopifyVideoEdge!]!
  field: String!
  fieldValue: String
  group(field: ShopifyVideoFieldsEnum!, limit: Int, skip: Int): [ShopifyVideoGroupConnection!]!
  max(field: ShopifyVideoFieldsEnum!): Float
  min(field: ShopifyVideoFieldsEnum!): Float
  nodes: [ShopifyVideo!]!
  pageInfo: PageInfo!
  sum(field: ShopifyVideoFieldsEnum!): Float
  totalCount: Int!
}

input ShopifyVideoSortInput {
  fields: [ShopifyVideoFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ShopifyVideoSource {
  format: String!
  height: Int!
  mimeType: String!
  url: String!
  width: Int!
}

input ShopifyVideoSourceFilterInput {
  format: StringQueryOperatorInput
  height: IntQueryOperatorInput
  mimeType: StringQueryOperatorInput
  url: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ShopifyVideoSourceFilterListInput {
  elemMatch: ShopifyVideoSourceFilterInput
}

enum ShopifyWeightUnit {
  GRAMS
  KILOGRAMS
  OUNCES
  POUNDS
}

input ShopifyWeightUnitQueryOperatorInput {
  eq: ShopifyWeightUnit
  in: [ShopifyWeightUnit]
  ne: ShopifyWeightUnit
  nin: [ShopifyWeightUnit]
}

type Site implements Node {
  buildTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  children: [Node!]!
  graphqlTypegen: Boolean
  host: String
  id: ID!
  internal: Internal!
  jsxRuntime: String
  parent: Node
  pathPrefix: String
  polyfill: Boolean
  port: Int
  siteMetadata: SiteSiteMetadata
  trailingSlash: String
}

type SiteBuildMetadata implements Node {
  buildTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type SiteBuildMetadataConnection {
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  totalCount: Int!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  buildTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

type SiteBuildMetadataGroupConnection {
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  totalCount: Int!
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteConnection {
  distinct(field: SiteFieldsEnum!): [String!]!
  edges: [SiteEdge!]!
  group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldsEnum!): Float
  totalCount: Int!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  graphqlTypegen
  host
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  jsxRuntime
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pathPrefix
  polyfill
  port
  siteMetadata___description
  siteMetadata___siteUrl
  siteMetadata___title
  trailingSlash
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  graphqlTypegen: BooleanQueryOperatorInput
  host: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jsxRuntime: StringQueryOperatorInput
  parent: NodeFilterInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  port: IntQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  trailingSlash: StringQueryOperatorInput
}

type SiteFunction implements Node {
  absoluteCompiledFilePath: String!
  children: [Node!]!
  functionRoute: String!
  id: ID!
  internal: Internal!
  matchPath: String
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  parent: Node
  pluginName: String!
  relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  edges: [SiteFunctionEdge!]!
  group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldsEnum!): Float
  totalCount: Int!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

enum SiteFunctionFieldsEnum {
  absoluteCompiledFilePath
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  functionRoute
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  matchPath
  originalAbsoluteFilePath
  originalRelativeFilePath
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pluginName
  relativeCompiledFilePath
}

input SiteFunctionFilterInput {
  absoluteCompiledFilePath: StringQueryOperatorInput
  children: NodeFilterListInput
  functionRoute: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  matchPath: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  parent: NodeFilterInput
  pluginName: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
}

type SiteFunctionGroupConnection {
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  edges: [SiteFunctionEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldsEnum!): Float
  totalCount: Int!
}

input SiteFunctionSortInput {
  fields: [SiteFunctionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteGroupConnection {
  distinct(field: SiteFieldsEnum!): [String!]!
  edges: [SiteEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldsEnum!): Float
  totalCount: Int!
}

type SitePage implements Node {
  children: [Node!]!
  component: String!
  componentChunkName: String!
  id: ID!
  internal: Internal!
  internalComponentName: String!
  matchPath: String
  pageContext: JSON
  parent: Node
  path: String!
  pluginCreator: SitePlugin
}

type SitePageConnection {
  distinct(field: SitePageFieldsEnum!): [String!]!
  edges: [SitePageEdge!]!
  group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldsEnum!): Float
  totalCount: Int!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  component
  componentChunkName
  id
  internalComponentName
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  matchPath
  pageContext
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  path
  pluginCreator___browserAPIs
  pluginCreator___children
  pluginCreator___children___children
  pluginCreator___children___children___children
  pluginCreator___children___children___id
  pluginCreator___children___id
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___contentFilePath
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___children___parent___children
  pluginCreator___children___parent___id
  pluginCreator___id
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___contentFilePath
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___name
  pluginCreator___nodeAPIs
  pluginCreator___packageJson
  pluginCreator___parent___children
  pluginCreator___parent___children___children
  pluginCreator___parent___children___id
  pluginCreator___parent___id
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___contentFilePath
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___parent___parent___children
  pluginCreator___parent___parent___id
  pluginCreator___pluginFilepath
  pluginCreator___pluginOptions
  pluginCreator___resolve
  pluginCreator___ssrAPIs
  pluginCreator___version
}

input SitePageFilterInput {
  children: NodeFilterListInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  internalComponentName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
  pluginCreator: SitePluginFilterInput
}

type SitePageGroupConnection {
  distinct(field: SitePageFieldsEnum!): [String!]!
  edges: [SitePageEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldsEnum!): Float
  totalCount: Int!
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePlugin implements Node {
  browserAPIs: [String]
  children: [Node!]!
  id: ID!
  internal: Internal!
  name: String
  nodeAPIs: [String]
  packageJson: JSON
  parent: Node
  pluginFilepath: String
  pluginOptions: JSON
  resolve: String
  ssrAPIs: [String]
  version: String
}

type SitePluginConnection {
  distinct(field: SitePluginFieldsEnum!): [String!]!
  edges: [SitePluginEdge!]!
  group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  sum(field: SitePluginFieldsEnum!): Float
  totalCount: Int!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  browserAPIs
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___contentFilePath
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___contentFilePath
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___contentFilePath
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___contentFilePath
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  name
  nodeAPIs
  packageJson
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___contentFilePath
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___contentFilePath
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___contentFilePath
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pluginFilepath
  pluginOptions
  resolve
  ssrAPIs
  version
}

input SitePluginFilterInput {
  browserAPIs: StringQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  parent: NodeFilterInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  resolve: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

type SitePluginGroupConnection {
  distinct(field: SitePluginFieldsEnum!): [String!]!
  edges: [SitePluginEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  sum(field: SitePluginFieldsEnum!): Float
  totalCount: Int!
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteSiteMetadata {
  description: String
  siteUrl: String
  title: String
}

input SiteSiteMetadataFilterInput {
  description: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

input TransformOptions {
  cropFocus: ImageCropFocus = ATTENTION
  duotone: DuotoneGradient
  fit: ImageFit = COVER
  grayscale: Boolean = false
  rotate: Int = 0
  trim: Float = 0
}

input WebPOptions {
  quality: Int
}
